name: Build Release Info
# Run for new release tags only

on:
  workflow_call:
  workflow_dispatch:

jobs:
  build-release-info:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    outputs:
      cosmos_sdk_version: ${{ steps.version.outputs.cosmos_sdk_version }}
      go_version: ${{ steps.version.outputs.go_version }}
      consensus_version: ${{ steps.version.outputs.consensus_version }}
      cosmwasm_version: ${{ steps.version.outputs.cosmwasm_version }}
      ibc_version: ${{ steps.version.outputs.ibc_version }}
      height: ${{ steps.version.outputs.height }}
      proposal: ${{ steps.version.outputs.proposal }}
      checksum_darwin_amd64: ${{ steps.version.outputs.checksum_darwin_amd64 }}
      checksum_darwin_arm64: ${{ steps.version.outputs.checksum_darwin_arm64 }}
      checksum_linux_amd64: ${{ steps.version.outputs.checksum_linux_amd64 }}
      checksum_linux_arm64: ${{ steps.version.outputs.checksum_linux_arm64 }}
      #
      binaries_json_checksum: ${{ steps.checksum.outputs.binaries_json_checksum }}

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Prepare environment
        run: mkdir -p release

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release
          pattern: xiond-*
          merge-multiple: true

      - name: Download checksums
        uses: actions/download-artifact@v4
        with:
          path: release
          pattern: checksum.txt
          merge-multiple: true

      - name: Create binaries.json
        working-directory: release
        env:
          BASE_URL: https://github.com/burnt-labs/xion/releases/download
        run: |
          # Read checksums from checksum.txt
          DARWIN_AMD64_CHECKSUM=$(grep "xiond-darwin-amd64" checksum.txt | cut -d' ' -f1)
          DARWIN_ARM64_CHECKSUM=$(grep "xiond-darwin-arm64" checksum.txt | cut -d' ' -f1)
          LINUX_AMD64_CHECKSUM=$(grep "xiond-linux-amd64" checksum.txt | cut -d' ' -f1)
          LINUX_ARM64_CHECKSUM=$(grep "xiond-linux-arm64" checksum.txt | cut -d' ' -f1)

          # Create binaries.json with checksums
          jq -n --arg version "${{ github.ref_name }}" \
            --arg darwin_amd64_checksum "$DARWIN_AMD64_CHECKSUM" \
            --arg darwin_arm64_checksum "$DARWIN_ARM64_CHECKSUM" \
            --arg linux_amd64_checksum "$LINUX_AMD64_CHECKSUM" \
            --arg linux_arm64_checksum "$LINUX_ARM64_CHECKSUM" \
            '{
              "version": $version,
              "binaries": {
                "darwin/amd64": {
                  "url": $BASE_URL + "/" + $version + "/xiond_" + $version + "_darwin_amd64.tar.gz",
                  "checksum": $darwin_amd64_checksum
                },
                "darwin/arm64": {
                  "url": $BASE_URL + "/" + $version + "/xiond_" + $version + "_darwin_arm64.tar.gz",
                  "checksum": $darwin_arm64_checksum
                },
                "linux/amd64": {
                  "url": $BASE_URL + "/" + $version + "/xiond_" + $version + "_linux_amd64.tar.gz",
                  "checksum": $linux_amd64_checksum
                },
                "linux/arm64": {
                  "url": $BASE_URL + "/" + $version + "/xiond_" + $version + "_linux_arm64.tar.gz",
                  "checksum": $linux_arm64_checksum
                }
              }
            }' | tee binaries.json

      - name: Create checksum for binaries.json
        id: checksum
        working-directory: release
        run: |
          BINARIES_JSON_CHECKSUM=$(sha256sum binaries.json | cut -d' ' -f1)
          echo "binaries_json_checksum=$BINARIES_JSON_CHECKSUM" >> $GITHUB_OUTPUT
          echo "Created checksum for binaries.json: $BINARIES_JSON_CHECKSUM"

      - name: Create version.json
        working-directory: release
        run: |
          set -Eeuo pipefail
          upgrade_name=$(echo $GITHUB_REF_NAME | cut -d. -f1)
          jq -s '.[0] * (.[1] // {})' <(go mod edit -json | jq --arg name $upgrade_name '{
              name: $name,
              tag: "${{ github.ref_name }}",
              height: 0,
              proposal: 0,
              go_version: .Go,
              cosmos_sdk_version: (.Require[] | select(.Path == "github.com/cosmos/cosmos-sdk") | .Version),
              cosmwasm_enabled: (.Require[] | select(.Path == "github.com/CosmWasm/wasmd") != null),
              cosmwasm_version: (.Require[] | select(.Path == "github.com/CosmWasm/wasmd") | .Version),
              ibc_go_version: (.Require[] | select(.Path == "github.com/cosmos/ibc-go/v7") | .Version),
              consensus: {
                type: "cometbft",
                version: (.Require[] | select(.Path == "github.com/cometbft/cometbft") | .Version)
              }
            }') binaries.json | tee version.json

      - name: Extract version info
        working-directory: release
        run: |
          VERSION_JSON=$(cat version.json)
          echo "cosmos_sdk_version=$(echo $VERSION_JSON | jq -r '.cosmos_sdk_version')" >> $GITHUB_OUTPUT
          echo "go_version=$(echo $VERSION_JSON | jq -r '.go_version')" >> $GITHUB_OUTPUT
          echo "consensus_version=$(echo $VERSION_JSON | jq -r '.consensus.version')" >> $GITHUB_OUTPUT
          echo "cosmwasm_version=$(echo $VERSION_JSON | jq -r '.cosmwasm_version')" >> $GITHUB_OUTPUT
          echo "ibc_version=$(echo $VERSION_JSON | jq -r '.ibc_go_version')" >> $GITHUB_OUTPUT
          echo "height=$(echo $VERSION_JSON | jq -r '.height')" >> $GITHUB_OUTPUT
          echo "proposal=$(echo $VERSION_JSON | jq -r '.proposal')" >> $GITHUB_OUTPUT
          echo "checksum_darwin_amd64=$(echo $VERSION_JSON | jq -r '.binaries."darwin/amd64" | split("?checksum=sha256:")[1]')" >> $GITHUB_OUTPUT
          echo "checksum_darwin_arm64=$(echo $VERSION_JSON | jq -r '.binaries."darwin/arm64" | split("?checksum=sha256:")[1]')" >> $GITHUB_OUTPUT
          echo "checksum_linux_amd64=$(echo $VERSION_JSON | jq -r '.binaries."linux/amd64" | split("?checksum=sha256:")[1]')" >> $GITHUB_OUTPUT
          echo "checksum_linux_arm64=$(echo $VERSION_JSON | jq -r '.binaries."linux/arm64" | split("?checksum=sha256:")[1]')" >> $GITHUB_OUTPUT

      - name: Upload version.json files
        uses: actions/upload-artifact@v4
        with:
          name: version.json
          path: release/version.json
          retention-days: 3
          if-no-files-found: error

      - name: Upload binaries.json and its checksum
        uses: actions/upload-artifact@v4
        with:
          name: binaries.json
          path: |
            release/binaries.json
            release/binaries.json.sha256
          retention-days: 3
          if-no-files-found: error