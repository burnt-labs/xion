name: Build Release
# Run for new release tags only

on:
  workflow_call:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}
          pattern: xiond-*
          merge-multiple: true

      - name: Move artifacts
        run: |
          mkdir -p dist
          mv ${{ runner.temp }}/*/xiond* dist

      - name: Set Go Version
        run: sed -En 's/^go (.*)$/GO_VERSION=\1/p' go.mod >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      
      - name: Save GPG and RSA keys
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" > /home/runner/.gnupg/sign.asc
          echo "${{ secrets.PEM_PRIVATE_KEY }}" > /home/runner/.gnupg/sign.pem

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        env:
          FURY_TOKEN: ${{ secrets.FURY_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_KEY_ID: ${{ steps.import_gpg.outputs.keyid }}
          GPG_KEY_PATH: /home/runner/.gnupg/sign.asc
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GORELEASER_ACCESS_TOKEN: ${{ secrets.GORELEASER_ACCESS_TOKEN }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          NFPM_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          PEM_KEY_PATH: /home/runner/.gnupg/sign.pem
        with:
          distribution: goreleaser-pro
          version: "~> v2"
          args: release --config .goreleaser/release.yaml
