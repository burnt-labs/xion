// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package dkimv1

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type DkimPubKeysTable interface {
	Insert(ctx context.Context, dkimPubKeys *DkimPubKeys) error
	Update(ctx context.Context, dkimPubKeys *DkimPubKeys) error
	Save(ctx context.Context, dkimPubKeys *DkimPubKeys) error
	Delete(ctx context.Context, dkimPubKeys *DkimPubKeys) error
	Has(ctx context.Context, domain string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, domain string) (*DkimPubKeys, error)
	HasByPubKey(ctx context.Context, pub_key string) (found bool, err error)
	// GetByPubKey returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByPubKey(ctx context.Context, pub_key string) (*DkimPubKeys, error)
	List(ctx context.Context, prefixKey DkimPubKeysIndexKey, opts ...ormlist.Option) (DkimPubKeysIterator, error)
	ListRange(ctx context.Context, from, to DkimPubKeysIndexKey, opts ...ormlist.Option) (DkimPubKeysIterator, error)
	DeleteBy(ctx context.Context, prefixKey DkimPubKeysIndexKey) error
	DeleteRange(ctx context.Context, from, to DkimPubKeysIndexKey) error

	doNotImplement()
}

type DkimPubKeysIterator struct {
	ormtable.Iterator
}

func (i DkimPubKeysIterator) Value() (*DkimPubKeys, error) {
	var dkimPubKeys DkimPubKeys
	err := i.UnmarshalMessage(&dkimPubKeys)
	return &dkimPubKeys, err
}

type DkimPubKeysIndexKey interface {
	id() uint32
	values() []interface{}
	dkimPubKeysIndexKey()
}

// primary key starting index..
type DkimPubKeysPrimaryKey = DkimPubKeysDomainIndexKey

type DkimPubKeysDomainIndexKey struct {
	vs []interface{}
}

func (x DkimPubKeysDomainIndexKey) id() uint32            { return 0 }
func (x DkimPubKeysDomainIndexKey) values() []interface{} { return x.vs }
func (x DkimPubKeysDomainIndexKey) dkimPubKeysIndexKey()  {}

func (this DkimPubKeysDomainIndexKey) WithDomain(domain string) DkimPubKeysDomainIndexKey {
	this.vs = []interface{}{domain}
	return this
}

type DkimPubKeysPubKeyIndexKey struct {
	vs []interface{}
}

func (x DkimPubKeysPubKeyIndexKey) id() uint32            { return 1 }
func (x DkimPubKeysPubKeyIndexKey) values() []interface{} { return x.vs }
func (x DkimPubKeysPubKeyIndexKey) dkimPubKeysIndexKey()  {}

func (this DkimPubKeysPubKeyIndexKey) WithPubKey(pub_key string) DkimPubKeysPubKeyIndexKey {
	this.vs = []interface{}{pub_key}
	return this
}

type dkimPubKeysTable struct {
	table ormtable.Table
}

func (this dkimPubKeysTable) Insert(ctx context.Context, dkimPubKeys *DkimPubKeys) error {
	return this.table.Insert(ctx, dkimPubKeys)
}

func (this dkimPubKeysTable) Update(ctx context.Context, dkimPubKeys *DkimPubKeys) error {
	return this.table.Update(ctx, dkimPubKeys)
}

func (this dkimPubKeysTable) Save(ctx context.Context, dkimPubKeys *DkimPubKeys) error {
	return this.table.Save(ctx, dkimPubKeys)
}

func (this dkimPubKeysTable) Delete(ctx context.Context, dkimPubKeys *DkimPubKeys) error {
	return this.table.Delete(ctx, dkimPubKeys)
}

func (this dkimPubKeysTable) Has(ctx context.Context, domain string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, domain)
}

func (this dkimPubKeysTable) Get(ctx context.Context, domain string) (*DkimPubKeys, error) {
	var dkimPubKeys DkimPubKeys
	found, err := this.table.PrimaryKey().Get(ctx, &dkimPubKeys, domain)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &dkimPubKeys, nil
}

func (this dkimPubKeysTable) HasByPubKey(ctx context.Context, pub_key string) (found bool, err error) {
	return this.table.GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		pub_key,
	)
}

func (this dkimPubKeysTable) GetByPubKey(ctx context.Context, pub_key string) (*DkimPubKeys, error) {
	var dkimPubKeys DkimPubKeys
	found, err := this.table.GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &dkimPubKeys,
		pub_key,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &dkimPubKeys, nil
}

func (this dkimPubKeysTable) List(ctx context.Context, prefixKey DkimPubKeysIndexKey, opts ...ormlist.Option) (DkimPubKeysIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return DkimPubKeysIterator{it}, err
}

func (this dkimPubKeysTable) ListRange(ctx context.Context, from, to DkimPubKeysIndexKey, opts ...ormlist.Option) (DkimPubKeysIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return DkimPubKeysIterator{it}, err
}

func (this dkimPubKeysTable) DeleteBy(ctx context.Context, prefixKey DkimPubKeysIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this dkimPubKeysTable) DeleteRange(ctx context.Context, from, to DkimPubKeysIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this dkimPubKeysTable) doNotImplement() {}

var _ DkimPubKeysTable = dkimPubKeysTable{}

func NewDkimPubKeysTable(db ormtable.Schema) (DkimPubKeysTable, error) {
	table := db.GetTable(&DkimPubKeys{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&DkimPubKeys{}).ProtoReflect().Descriptor().FullName()))
	}
	return dkimPubKeysTable{table}, nil
}

type StateStore interface {
	DkimPubKeysTable() DkimPubKeysTable

	doNotImplement()
}

type stateStore struct {
	dkimPubKeys DkimPubKeysTable
}

func (x stateStore) DkimPubKeysTable() DkimPubKeysTable {
	return x.dkimPubKeys
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	dkimPubKeysTable, err := NewDkimPubKeysTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		dkimPubKeysTable,
	}, nil
}
