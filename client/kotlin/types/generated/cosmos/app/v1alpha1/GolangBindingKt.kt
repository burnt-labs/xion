//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/app/v1alpha1/config.proto

package cosmos.app.v1alpha1;

@kotlin.jvm.JvmName("-initializegolangBinding")
public inline fun golangBinding(block: cosmos.app.v1alpha1.GolangBindingKt.Dsl.() -> kotlin.Unit): cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding =
  cosmos.app.v1alpha1.GolangBindingKt.Dsl._create(cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding.newBuilder()).apply { block() }._build()
public object GolangBindingKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding = _builder.build()

    /**
     * <pre>
     * interface_type is the interface type which will be bound to a specific implementation type
     * </pre>
     *
     * <code>string interface_type = 1 [json_name = "interfaceType"];</code>
     */
    public var interfaceType: kotlin.String
      @JvmName("getInterfaceType")
      get() = _builder.getInterfaceType()
      @JvmName("setInterfaceType")
      set(value) {
        _builder.setInterfaceType(value)
      }
    /**
     * <pre>
     * interface_type is the interface type which will be bound to a specific implementation type
     * </pre>
     *
     * <code>string interface_type = 1 [json_name = "interfaceType"];</code>
     */
    public fun clearInterfaceType() {
      _builder.clearInterfaceType()
    }

    /**
     * <pre>
     * implementation is the implementing type which will be supplied when an input of type interface is requested
     * </pre>
     *
     * <code>string implementation = 2 [json_name = "implementation"];</code>
     */
    public var implementation: kotlin.String
      @JvmName("getImplementation")
      get() = _builder.getImplementation()
      @JvmName("setImplementation")
      set(value) {
        _builder.setImplementation(value)
      }
    /**
     * <pre>
     * implementation is the implementing type which will be supplied when an input of type interface is requested
     * </pre>
     *
     * <code>string implementation = 2 [json_name = "implementation"];</code>
     */
    public fun clearImplementation() {
      _builder.clearImplementation()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding.copy(block: cosmos.app.v1alpha1.GolangBindingKt.Dsl.() -> kotlin.Unit): cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding =
  cosmos.app.v1alpha1.GolangBindingKt.Dsl._create(this.toBuilder()).apply { block() }._build()

