//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/app/v1alpha1/config.proto

package cosmos.app.v1alpha1;

@kotlin.jvm.JvmName("-initializemoduleConfig")
public inline fun moduleConfig(block: cosmos.app.v1alpha1.ModuleConfigKt.Dsl.() -> kotlin.Unit): cosmos.app.v1alpha1.ConfigOuterClass.ModuleConfig =
  cosmos.app.v1alpha1.ModuleConfigKt.Dsl._create(cosmos.app.v1alpha1.ConfigOuterClass.ModuleConfig.newBuilder()).apply { block() }._build()
public object ModuleConfigKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.app.v1alpha1.ConfigOuterClass.ModuleConfig.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.app.v1alpha1.ConfigOuterClass.ModuleConfig.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.app.v1alpha1.ConfigOuterClass.ModuleConfig = _builder.build()

    /**
     * <pre>
     * name is the unique name of the module within the app. It should be a name
     * that persists between different versions of a module so that modules
     * can be smoothly upgraded to new versions.
     * For example, for the module cosmos.bank.module.v1.Module, we may chose
     * to simply name the module "bank" in the app. When we upgrade to
     * cosmos.bank.module.v2.Module, the app-specific name "bank" stays the same
     * and the framework knows that the v2 module should receive all the same state
     * that the v1 module had. Note: modules should provide info on which versions
     * they can migrate from in the ModuleDescriptor.can_migration_from field.
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <pre>
     * name is the unique name of the module within the app. It should be a name
     * that persists between different versions of a module so that modules
     * can be smoothly upgraded to new versions.
     * For example, for the module cosmos.bank.module.v1.Module, we may chose
     * to simply name the module "bank" in the app. When we upgrade to
     * cosmos.bank.module.v2.Module, the app-specific name "bank" stays the same
     * and the framework knows that the v2 module should receive all the same state
     * that the v1 module had. Note: modules should provide info on which versions
     * they can migrate from in the ModuleDescriptor.can_migration_from field.
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * <pre>
     * config is the config object for the module. Module config messages should
     * define a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension.
     * </pre>
     *
     * <code>.google.protobuf.Any config = 2 [json_name = "config"];</code>
     */
    public var config: com.google.protobuf.Any
      @JvmName("getConfig")
      get() = _builder.getConfig()
      @JvmName("setConfig")
      set(value) {
        _builder.setConfig(value)
      }
    /**
     * <pre>
     * config is the config object for the module. Module config messages should
     * define a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension.
     * </pre>
     *
     * <code>.google.protobuf.Any config = 2 [json_name = "config"];</code>
     */
    public fun clearConfig() {
      _builder.clearConfig()
    }
    /**
     * <pre>
     * config is the config object for the module. Module config messages should
     * define a ModuleDescriptor using the cosmos.app.v1alpha1.is_module extension.
     * </pre>
     *
     * <code>.google.protobuf.Any config = 2 [json_name = "config"];</code>
     * @return Whether the config field is set.
     */
    public fun hasConfig(): kotlin.Boolean {
      return _builder.hasConfig()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class GolangBindingsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * golang_bindings specifies explicit interface to implementation type bindings which
     * depinject uses to resolve interface inputs to provider functions.  The scope of this
     * field's configuration is module specific.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.GolangBinding golang_bindings = 3 [json_name = "golangBindings"];</code>
     */
     public val golangBindings: com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding, GolangBindingsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getGolangBindingsList()
      )
    /**
     * <pre>
     * golang_bindings specifies explicit interface to implementation type bindings which
     * depinject uses to resolve interface inputs to provider functions.  The scope of this
     * field's configuration is module specific.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.GolangBinding golang_bindings = 3 [json_name = "golangBindings"];</code>
     * @param value The golangBindings to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addGolangBindings")
    public fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding, GolangBindingsProxy>.add(value: cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding) {
      _builder.addGolangBindings(value)
    }
    /**
     * <pre>
     * golang_bindings specifies explicit interface to implementation type bindings which
     * depinject uses to resolve interface inputs to provider functions.  The scope of this
     * field's configuration is module specific.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.GolangBinding golang_bindings = 3 [json_name = "golangBindings"];</code>
     * @param value The golangBindings to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignGolangBindings")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding, GolangBindingsProxy>.plusAssign(value: cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding) {
      add(value)
    }
    /**
     * <pre>
     * golang_bindings specifies explicit interface to implementation type bindings which
     * depinject uses to resolve interface inputs to provider functions.  The scope of this
     * field's configuration is module specific.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.GolangBinding golang_bindings = 3 [json_name = "golangBindings"];</code>
     * @param values The golangBindings to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllGolangBindings")
    public fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding, GolangBindingsProxy>.addAll(values: kotlin.collections.Iterable<cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding>) {
      _builder.addAllGolangBindings(values)
    }
    /**
     * <pre>
     * golang_bindings specifies explicit interface to implementation type bindings which
     * depinject uses to resolve interface inputs to provider functions.  The scope of this
     * field's configuration is module specific.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.GolangBinding golang_bindings = 3 [json_name = "golangBindings"];</code>
     * @param values The golangBindings to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllGolangBindings")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding, GolangBindingsProxy>.plusAssign(values: kotlin.collections.Iterable<cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding>) {
      addAll(values)
    }
    /**
     * <pre>
     * golang_bindings specifies explicit interface to implementation type bindings which
     * depinject uses to resolve interface inputs to provider functions.  The scope of this
     * field's configuration is module specific.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.GolangBinding golang_bindings = 3 [json_name = "golangBindings"];</code>
     * @param index The index to set the value at.
     * @param value The golangBindings to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setGolangBindings")
    public operator fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding, GolangBindingsProxy>.set(index: kotlin.Int, value: cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding) {
      _builder.setGolangBindings(index, value)
    }
    /**
     * <pre>
     * golang_bindings specifies explicit interface to implementation type bindings which
     * depinject uses to resolve interface inputs to provider functions.  The scope of this
     * field's configuration is module specific.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.GolangBinding golang_bindings = 3 [json_name = "golangBindings"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearGolangBindings")
    public fun com.google.protobuf.kotlin.DslList<cosmos.app.v1alpha1.ConfigOuterClass.GolangBinding, GolangBindingsProxy>.clear() {
      _builder.clearGolangBindings()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.app.v1alpha1.ConfigOuterClass.ModuleConfig.copy(block: cosmos.app.v1alpha1.ModuleConfigKt.Dsl.() -> kotlin.Unit): cosmos.app.v1alpha1.ConfigOuterClass.ModuleConfig =
  cosmos.app.v1alpha1.ModuleConfigKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.app.v1alpha1.ConfigOuterClass.ModuleConfigOrBuilder.configOrNull: com.google.protobuf.Any?
  get() = if (hasConfig()) getConfig() else null

