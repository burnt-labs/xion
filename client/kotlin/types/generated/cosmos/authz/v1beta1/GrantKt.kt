//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/authz/v1beta1/authz.proto

package cosmos.authz.v1beta1;

@kotlin.jvm.JvmName("-initializegrant")
public inline fun grant(block: cosmos.authz.v1beta1.GrantKt.Dsl.() -> kotlin.Unit): cosmos.authz.v1beta1.Authz.Grant =
  cosmos.authz.v1beta1.GrantKt.Dsl._create(cosmos.authz.v1beta1.Authz.Grant.newBuilder()).apply { block() }._build()
public object GrantKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.authz.v1beta1.Authz.Grant.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.authz.v1beta1.Authz.Grant.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.authz.v1beta1.Authz.Grant = _builder.build()

    /**
     * <code>.google.protobuf.Any authorization = 1 [json_name = "authorization", (.cosmos_proto.accepts_interface) = "cosmos.authz.v1beta1.Authorization"];</code>
     */
    public var authorization: com.google.protobuf.Any
      @JvmName("getAuthorization")
      get() = _builder.getAuthorization()
      @JvmName("setAuthorization")
      set(value) {
        _builder.setAuthorization(value)
      }
    /**
     * <code>.google.protobuf.Any authorization = 1 [json_name = "authorization", (.cosmos_proto.accepts_interface) = "cosmos.authz.v1beta1.Authorization"];</code>
     */
    public fun clearAuthorization() {
      _builder.clearAuthorization()
    }
    /**
     * <code>.google.protobuf.Any authorization = 1 [json_name = "authorization", (.cosmos_proto.accepts_interface) = "cosmos.authz.v1beta1.Authorization"];</code>
     * @return Whether the authorization field is set.
     */
    public fun hasAuthorization(): kotlin.Boolean {
      return _builder.hasAuthorization()
    }

    /**
     * <pre>
     * time when the grant will expire and will be pruned. If null, then the grant
     * doesn't have a time expiration (other conditions  in `authorization`
     * may apply to invalidate the grant)
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.nullable) = true, (.gogoproto.stdtime) = true];</code>
     */
    public var expiration: com.google.protobuf.Timestamp
      @JvmName("getExpiration")
      get() = _builder.getExpiration()
      @JvmName("setExpiration")
      set(value) {
        _builder.setExpiration(value)
      }
    /**
     * <pre>
     * time when the grant will expire and will be pruned. If null, then the grant
     * doesn't have a time expiration (other conditions  in `authorization`
     * may apply to invalidate the grant)
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.nullable) = true, (.gogoproto.stdtime) = true];</code>
     */
    public fun clearExpiration() {
      _builder.clearExpiration()
    }
    /**
     * <pre>
     * time when the grant will expire and will be pruned. If null, then the grant
     * doesn't have a time expiration (other conditions  in `authorization`
     * may apply to invalidate the grant)
     * </pre>
     *
     * <code>.google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.nullable) = true, (.gogoproto.stdtime) = true];</code>
     * @return Whether the expiration field is set.
     */
    public fun hasExpiration(): kotlin.Boolean {
      return _builder.hasExpiration()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.authz.v1beta1.Authz.Grant.copy(block: cosmos.authz.v1beta1.GrantKt.Dsl.() -> kotlin.Unit): cosmos.authz.v1beta1.Authz.Grant =
  cosmos.authz.v1beta1.GrantKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.authz.v1beta1.Authz.GrantOrBuilder.authorizationOrNull: com.google.protobuf.Any?
  get() = if (hasAuthorization()) getAuthorization() else null

public val cosmos.authz.v1beta1.Authz.GrantOrBuilder.expirationOrNull: com.google.protobuf.Timestamp?
  get() = if (hasExpiration()) getExpiration() else null

