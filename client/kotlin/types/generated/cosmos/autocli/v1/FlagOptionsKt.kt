//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/autocli/v1/options.proto

package cosmos.autocli.v1;

@kotlin.jvm.JvmName("-initializeflagOptions")
public inline fun flagOptions(block: cosmos.autocli.v1.FlagOptionsKt.Dsl.() -> kotlin.Unit): cosmos.autocli.v1.Options.FlagOptions =
  cosmos.autocli.v1.FlagOptionsKt.Dsl._create(cosmos.autocli.v1.Options.FlagOptions.newBuilder()).apply { block() }._build()
public object FlagOptionsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.autocli.v1.Options.FlagOptions.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.autocli.v1.Options.FlagOptions.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.autocli.v1.Options.FlagOptions = _builder.build()

    /**
     * <pre>
     * name is an alternate name to use for the field flag.
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <pre>
     * name is an alternate name to use for the field flag.
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * <pre>
     * shorthand is a one-letter abbreviated flag.
     * </pre>
     *
     * <code>string shorthand = 2 [json_name = "shorthand"];</code>
     */
    public var shorthand: kotlin.String
      @JvmName("getShorthand")
      get() = _builder.getShorthand()
      @JvmName("setShorthand")
      set(value) {
        _builder.setShorthand(value)
      }
    /**
     * <pre>
     * shorthand is a one-letter abbreviated flag.
     * </pre>
     *
     * <code>string shorthand = 2 [json_name = "shorthand"];</code>
     */
    public fun clearShorthand() {
      _builder.clearShorthand()
    }

    /**
     * <pre>
     * usage is the help message.
     * </pre>
     *
     * <code>string usage = 3 [json_name = "usage"];</code>
     */
    public var usage: kotlin.String
      @JvmName("getUsage")
      get() = _builder.getUsage()
      @JvmName("setUsage")
      set(value) {
        _builder.setUsage(value)
      }
    /**
     * <pre>
     * usage is the help message.
     * </pre>
     *
     * <code>string usage = 3 [json_name = "usage"];</code>
     */
    public fun clearUsage() {
      _builder.clearUsage()
    }

    /**
     * <pre>
     * default_value is the default value as text.
     * </pre>
     *
     * <code>string default_value = 4 [json_name = "defaultValue"];</code>
     */
    public var defaultValue: kotlin.String
      @JvmName("getDefaultValue")
      get() = _builder.getDefaultValue()
      @JvmName("setDefaultValue")
      set(value) {
        _builder.setDefaultValue(value)
      }
    /**
     * <pre>
     * default_value is the default value as text.
     * </pre>
     *
     * <code>string default_value = 4 [json_name = "defaultValue"];</code>
     */
    public fun clearDefaultValue() {
      _builder.clearDefaultValue()
    }

    /**
     * <pre>
     * deprecated is the usage text to show if this flag is deprecated.
     * </pre>
     *
     * <code>string deprecated = 6 [json_name = "deprecated"];</code>
     */
    public var deprecated: kotlin.String
      @JvmName("getDeprecated")
      get() = _builder.getDeprecated()
      @JvmName("setDeprecated")
      set(value) {
        _builder.setDeprecated(value)
      }
    /**
     * <pre>
     * deprecated is the usage text to show if this flag is deprecated.
     * </pre>
     *
     * <code>string deprecated = 6 [json_name = "deprecated"];</code>
     */
    public fun clearDeprecated() {
      _builder.clearDeprecated()
    }

    /**
     * <pre>
     * shorthand_deprecated is the usage text to show if the shorthand of this flag is deprecated.
     * </pre>
     *
     * <code>string shorthand_deprecated = 7 [json_name = "shorthandDeprecated"];</code>
     */
    public var shorthandDeprecated: kotlin.String
      @JvmName("getShorthandDeprecated")
      get() = _builder.getShorthandDeprecated()
      @JvmName("setShorthandDeprecated")
      set(value) {
        _builder.setShorthandDeprecated(value)
      }
    /**
     * <pre>
     * shorthand_deprecated is the usage text to show if the shorthand of this flag is deprecated.
     * </pre>
     *
     * <code>string shorthand_deprecated = 7 [json_name = "shorthandDeprecated"];</code>
     */
    public fun clearShorthandDeprecated() {
      _builder.clearShorthandDeprecated()
    }

    /**
     * <pre>
     * hidden hides the flag from help/usage text
     * </pre>
     *
     * <code>bool hidden = 8 [json_name = "hidden"];</code>
     */
    public var hidden: kotlin.Boolean
      @JvmName("getHidden")
      get() = _builder.getHidden()
      @JvmName("setHidden")
      set(value) {
        _builder.setHidden(value)
      }
    /**
     * <pre>
     * hidden hides the flag from help/usage text
     * </pre>
     *
     * <code>bool hidden = 8 [json_name = "hidden"];</code>
     */
    public fun clearHidden() {
      _builder.clearHidden()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.autocli.v1.Options.FlagOptions.copy(block: cosmos.autocli.v1.FlagOptionsKt.Dsl.() -> kotlin.Unit): cosmos.autocli.v1.Options.FlagOptions =
  cosmos.autocli.v1.FlagOptionsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

