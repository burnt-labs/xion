//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/autocli/v1/options.proto

package cosmos.autocli.v1;

@kotlin.jvm.JvmName("-initializeserviceCommandDescriptor")
public inline fun serviceCommandDescriptor(block: cosmos.autocli.v1.ServiceCommandDescriptorKt.Dsl.() -> kotlin.Unit): cosmos.autocli.v1.Options.ServiceCommandDescriptor =
  cosmos.autocli.v1.ServiceCommandDescriptorKt.Dsl._create(cosmos.autocli.v1.Options.ServiceCommandDescriptor.newBuilder()).apply { block() }._build()
public object ServiceCommandDescriptorKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.autocli.v1.Options.ServiceCommandDescriptor.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.autocli.v1.Options.ServiceCommandDescriptor.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.autocli.v1.Options.ServiceCommandDescriptor = _builder.build()

    /**
     * <pre>
     * service is the fully qualified name of the protobuf service to build
     * the command from. It can be left empty if sub_commands are used instead
     * which may be the case if a module provides multiple tx and/or query services.
     * </pre>
     *
     * <code>string service = 1 [json_name = "service"];</code>
     */
    public var service: kotlin.String
      @JvmName("getService")
      get() = _builder.getService()
      @JvmName("setService")
      set(value) {
        _builder.setService(value)
      }
    /**
     * <pre>
     * service is the fully qualified name of the protobuf service to build
     * the command from. It can be left empty if sub_commands are used instead
     * which may be the case if a module provides multiple tx and/or query services.
     * </pre>
     *
     * <code>string service = 1 [json_name = "service"];</code>
     */
    public fun clearService() {
      _builder.clearService()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class RpcCommandOptionsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
     public val rpcCommandOptions: com.google.protobuf.kotlin.DslList<cosmos.autocli.v1.Options.RpcCommandOptions, RpcCommandOptionsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getRpcCommandOptionsList()
      )
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     * @param value The rpcCommandOptions to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addRpcCommandOptions")
    public fun com.google.protobuf.kotlin.DslList<cosmos.autocli.v1.Options.RpcCommandOptions, RpcCommandOptionsProxy>.add(value: cosmos.autocli.v1.Options.RpcCommandOptions) {
      _builder.addRpcCommandOptions(value)
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     * @param value The rpcCommandOptions to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignRpcCommandOptions")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.autocli.v1.Options.RpcCommandOptions, RpcCommandOptionsProxy>.plusAssign(value: cosmos.autocli.v1.Options.RpcCommandOptions) {
      add(value)
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     * @param values The rpcCommandOptions to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllRpcCommandOptions")
    public fun com.google.protobuf.kotlin.DslList<cosmos.autocli.v1.Options.RpcCommandOptions, RpcCommandOptionsProxy>.addAll(values: kotlin.collections.Iterable<cosmos.autocli.v1.Options.RpcCommandOptions>) {
      _builder.addAllRpcCommandOptions(values)
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     * @param values The rpcCommandOptions to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllRpcCommandOptions")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.autocli.v1.Options.RpcCommandOptions, RpcCommandOptionsProxy>.plusAssign(values: kotlin.collections.Iterable<cosmos.autocli.v1.Options.RpcCommandOptions>) {
      addAll(values)
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     * @param index The index to set the value at.
     * @param value The rpcCommandOptions to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setRpcCommandOptions")
    public operator fun com.google.protobuf.kotlin.DslList<cosmos.autocli.v1.Options.RpcCommandOptions, RpcCommandOptionsProxy>.set(index: kotlin.Int, value: cosmos.autocli.v1.Options.RpcCommandOptions) {
      _builder.setRpcCommandOptions(index, value)
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearRpcCommandOptions")
    public fun com.google.protobuf.kotlin.DslList<cosmos.autocli.v1.Options.RpcCommandOptions, RpcCommandOptionsProxy>.clear() {
      _builder.clearRpcCommandOptions()
    }


    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class SubCommandsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * sub_commands is a map of optional sub-commands for this command based on
     * different protobuf services. The map key is used as the name of the
     * sub-command.
     * </pre>
     *
     * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
     */
     public val subCommands: com.google.protobuf.kotlin.DslMap<kotlin.String, cosmos.autocli.v1.Options.ServiceCommandDescriptor, SubCommandsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getSubCommandsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getSubCommandsMap()
      )
    /**
     * <pre>
     * sub_commands is a map of optional sub-commands for this command based on
     * different protobuf services. The map key is used as the name of the
     * sub-command.
     * </pre>
     *
     * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
     */
    @JvmName("putSubCommands")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, cosmos.autocli.v1.Options.ServiceCommandDescriptor, SubCommandsProxy>
      .put(key: kotlin.String, value: cosmos.autocli.v1.Options.ServiceCommandDescriptor) {
         _builder.putSubCommands(key, value)
       }
    /**
     * <pre>
     * sub_commands is a map of optional sub-commands for this command based on
     * different protobuf services. The map key is used as the name of the
     * sub-command.
     * </pre>
     *
     * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setSubCommands")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, cosmos.autocli.v1.Options.ServiceCommandDescriptor, SubCommandsProxy>
      .set(key: kotlin.String, value: cosmos.autocli.v1.Options.ServiceCommandDescriptor) {
         put(key, value)
       }
    /**
     * <pre>
     * sub_commands is a map of optional sub-commands for this command based on
     * different protobuf services. The map key is used as the name of the
     * sub-command.
     * </pre>
     *
     * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeSubCommands")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, cosmos.autocli.v1.Options.ServiceCommandDescriptor, SubCommandsProxy>
      .remove(key: kotlin.String) {
         _builder.removeSubCommands(key)
       }
    /**
     * <pre>
     * sub_commands is a map of optional sub-commands for this command based on
     * different protobuf services. The map key is used as the name of the
     * sub-command.
     * </pre>
     *
     * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllSubCommands")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, cosmos.autocli.v1.Options.ServiceCommandDescriptor, SubCommandsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, cosmos.autocli.v1.Options.ServiceCommandDescriptor>) {
         _builder.putAllSubCommands(map)
       }
    /**
     * <pre>
     * sub_commands is a map of optional sub-commands for this command based on
     * different protobuf services. The map key is used as the name of the
     * sub-command.
     * </pre>
     *
     * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearSubCommands")
    public fun com.google.protobuf.kotlin.DslMap<kotlin.String, cosmos.autocli.v1.Options.ServiceCommandDescriptor, SubCommandsProxy>
      .clear() {
         _builder.clearSubCommands()
       }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.autocli.v1.Options.ServiceCommandDescriptor.copy(block: cosmos.autocli.v1.ServiceCommandDescriptorKt.Dsl.() -> kotlin.Unit): cosmos.autocli.v1.Options.ServiceCommandDescriptor =
  cosmos.autocli.v1.ServiceCommandDescriptorKt.Dsl._create(this.toBuilder()).apply { block() }._build()

