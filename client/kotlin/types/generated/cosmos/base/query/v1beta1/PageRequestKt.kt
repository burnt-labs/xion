//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/base/query/v1beta1/pagination.proto

package cosmos.base.query.v1beta1;

@kotlin.jvm.JvmName("-initializepageRequest")
public inline fun pageRequest(block: cosmos.base.query.v1beta1.PageRequestKt.Dsl.() -> kotlin.Unit): cosmos.base.query.v1beta1.Pagination.PageRequest =
  cosmos.base.query.v1beta1.PageRequestKt.Dsl._create(cosmos.base.query.v1beta1.Pagination.PageRequest.newBuilder()).apply { block() }._build()
public object PageRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.base.query.v1beta1.Pagination.PageRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.base.query.v1beta1.Pagination.PageRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.base.query.v1beta1.Pagination.PageRequest = _builder.build()

    /**
     * <pre>
     * key is a value returned in PageResponse.next_key to begin
     * querying the next page most efficiently. Only one of offset or key
     * should be set.
     * </pre>
     *
     * <code>bytes key = 1 [json_name = "key"];</code>
     */
    public var key: com.google.protobuf.ByteString
      @JvmName("getKey")
      get() = _builder.getKey()
      @JvmName("setKey")
      set(value) {
        _builder.setKey(value)
      }
    /**
     * <pre>
     * key is a value returned in PageResponse.next_key to begin
     * querying the next page most efficiently. Only one of offset or key
     * should be set.
     * </pre>
     *
     * <code>bytes key = 1 [json_name = "key"];</code>
     */
    public fun clearKey() {
      _builder.clearKey()
    }

    /**
     * <pre>
     * offset is a numeric offset that can be used when key is unavailable.
     * It is less efficient than using key. Only one of offset or key should
     * be set.
     * </pre>
     *
     * <code>uint64 offset = 2 [json_name = "offset"];</code>
     */
    public var offset: kotlin.Long
      @JvmName("getOffset")
      get() = _builder.getOffset()
      @JvmName("setOffset")
      set(value) {
        _builder.setOffset(value)
      }
    /**
     * <pre>
     * offset is a numeric offset that can be used when key is unavailable.
     * It is less efficient than using key. Only one of offset or key should
     * be set.
     * </pre>
     *
     * <code>uint64 offset = 2 [json_name = "offset"];</code>
     */
    public fun clearOffset() {
      _builder.clearOffset()
    }

    /**
     * <pre>
     * limit is the total number of results to be returned in the result page.
     * If left empty it will default to a value to be set by each app.
     * </pre>
     *
     * <code>uint64 limit = 3 [json_name = "limit"];</code>
     */
    public var limit: kotlin.Long
      @JvmName("getLimit")
      get() = _builder.getLimit()
      @JvmName("setLimit")
      set(value) {
        _builder.setLimit(value)
      }
    /**
     * <pre>
     * limit is the total number of results to be returned in the result page.
     * If left empty it will default to a value to be set by each app.
     * </pre>
     *
     * <code>uint64 limit = 3 [json_name = "limit"];</code>
     */
    public fun clearLimit() {
      _builder.clearLimit()
    }

    /**
     * <pre>
     * count_total is set to true  to indicate that the result set should include
     * a count of the total number of items available for pagination in UIs.
     * count_total is only respected when offset is used. It is ignored when key
     * is set.
     * </pre>
     *
     * <code>bool count_total = 4 [json_name = "countTotal"];</code>
     */
    public var countTotal: kotlin.Boolean
      @JvmName("getCountTotal")
      get() = _builder.getCountTotal()
      @JvmName("setCountTotal")
      set(value) {
        _builder.setCountTotal(value)
      }
    /**
     * <pre>
     * count_total is set to true  to indicate that the result set should include
     * a count of the total number of items available for pagination in UIs.
     * count_total is only respected when offset is used. It is ignored when key
     * is set.
     * </pre>
     *
     * <code>bool count_total = 4 [json_name = "countTotal"];</code>
     */
    public fun clearCountTotal() {
      _builder.clearCountTotal()
    }

    /**
     * <pre>
     * reverse is set to true if results are to be returned in the descending order.
     * Since: cosmos-sdk 0.43
     * </pre>
     *
     * <code>bool reverse = 5 [json_name = "reverse"];</code>
     */
    public var reverse: kotlin.Boolean
      @JvmName("getReverse")
      get() = _builder.getReverse()
      @JvmName("setReverse")
      set(value) {
        _builder.setReverse(value)
      }
    /**
     * <pre>
     * reverse is set to true if results are to be returned in the descending order.
     * Since: cosmos-sdk 0.43
     * </pre>
     *
     * <code>bool reverse = 5 [json_name = "reverse"];</code>
     */
    public fun clearReverse() {
      _builder.clearReverse()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.base.query.v1beta1.Pagination.PageRequest.copy(block: cosmos.base.query.v1beta1.PageRequestKt.Dsl.() -> kotlin.Unit): cosmos.base.query.v1beta1.Pagination.PageRequest =
  cosmos.base.query.v1beta1.PageRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

