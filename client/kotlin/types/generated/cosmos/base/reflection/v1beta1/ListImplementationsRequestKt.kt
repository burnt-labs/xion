//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/base/reflection/v1beta1/reflection.proto

package cosmos.base.reflection.v1beta1;

@kotlin.jvm.JvmName("-initializelistImplementationsRequest")
public inline fun listImplementationsRequest(block: cosmos.base.reflection.v1beta1.ListImplementationsRequestKt.Dsl.() -> kotlin.Unit): cosmos.base.reflection.v1beta1.Reflection.ListImplementationsRequest =
  cosmos.base.reflection.v1beta1.ListImplementationsRequestKt.Dsl._create(cosmos.base.reflection.v1beta1.Reflection.ListImplementationsRequest.newBuilder()).apply { block() }._build()
public object ListImplementationsRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.base.reflection.v1beta1.Reflection.ListImplementationsRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.base.reflection.v1beta1.Reflection.ListImplementationsRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.base.reflection.v1beta1.Reflection.ListImplementationsRequest = _builder.build()

    /**
     * <pre>
     * interface_name defines the interface to query the implementations for.
     * </pre>
     *
     * <code>string interface_name = 1 [json_name = "interfaceName"];</code>
     */
    public var interfaceName: kotlin.String
      @JvmName("getInterfaceName")
      get() = _builder.getInterfaceName()
      @JvmName("setInterfaceName")
      set(value) {
        _builder.setInterfaceName(value)
      }
    /**
     * <pre>
     * interface_name defines the interface to query the implementations for.
     * </pre>
     *
     * <code>string interface_name = 1 [json_name = "interfaceName"];</code>
     */
    public fun clearInterfaceName() {
      _builder.clearInterfaceName()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.base.reflection.v1beta1.Reflection.ListImplementationsRequest.copy(block: cosmos.base.reflection.v1beta1.ListImplementationsRequestKt.Dsl.() -> kotlin.Unit): cosmos.base.reflection.v1beta1.Reflection.ListImplementationsRequest =
  cosmos.base.reflection.v1beta1.ListImplementationsRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

