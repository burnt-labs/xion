//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/base/reflection/v2alpha1/reflection.proto

package cosmos.base.reflection.v2alpha1;

@kotlin.jvm.JvmName("-initializeconfigurationDescriptor")
public inline fun configurationDescriptor(block: cosmos.base.reflection.v2alpha1.ConfigurationDescriptorKt.Dsl.() -> kotlin.Unit): cosmos.base.reflection.v2alpha1.Reflection.ConfigurationDescriptor =
  cosmos.base.reflection.v2alpha1.ConfigurationDescriptorKt.Dsl._create(cosmos.base.reflection.v2alpha1.Reflection.ConfigurationDescriptor.newBuilder()).apply { block() }._build()
public object ConfigurationDescriptorKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.base.reflection.v2alpha1.Reflection.ConfigurationDescriptor.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.base.reflection.v2alpha1.Reflection.ConfigurationDescriptor.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.base.reflection.v2alpha1.Reflection.ConfigurationDescriptor = _builder.build()

    /**
     * <pre>
     * bech32_account_address_prefix is the account address prefix
     * </pre>
     *
     * <code>string bech32_account_address_prefix = 1 [json_name = "bech32AccountAddressPrefix"];</code>
     */
    public var bech32AccountAddressPrefix: kotlin.String
      @JvmName("getBech32AccountAddressPrefix")
      get() = _builder.getBech32AccountAddressPrefix()
      @JvmName("setBech32AccountAddressPrefix")
      set(value) {
        _builder.setBech32AccountAddressPrefix(value)
      }
    /**
     * <pre>
     * bech32_account_address_prefix is the account address prefix
     * </pre>
     *
     * <code>string bech32_account_address_prefix = 1 [json_name = "bech32AccountAddressPrefix"];</code>
     */
    public fun clearBech32AccountAddressPrefix() {
      _builder.clearBech32AccountAddressPrefix()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.base.reflection.v2alpha1.Reflection.ConfigurationDescriptor.copy(block: cosmos.base.reflection.v2alpha1.ConfigurationDescriptorKt.Dsl.() -> kotlin.Unit): cosmos.base.reflection.v2alpha1.Reflection.ConfigurationDescriptor =
  cosmos.base.reflection.v2alpha1.ConfigurationDescriptorKt.Dsl._create(this.toBuilder()).apply { block() }._build()

