//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/base/tendermint/v1beta1/types.proto

package cosmos.base.tendermint.v1beta1;

@kotlin.jvm.JvmName("-initializeblock")
public inline fun block(block: cosmos.base.tendermint.v1beta1.BlockKt.Dsl.() -> kotlin.Unit): cosmos.base.tendermint.v1beta1.Types.Block =
  cosmos.base.tendermint.v1beta1.BlockKt.Dsl._create(cosmos.base.tendermint.v1beta1.Types.Block.newBuilder()).apply { block() }._build()
public object BlockKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.base.tendermint.v1beta1.Types.Block.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.base.tendermint.v1beta1.Types.Block.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.base.tendermint.v1beta1.Types.Block = _builder.build()

    /**
     * <code>.cosmos.base.tendermint.v1beta1.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     */
    public var header: cosmos.base.tendermint.v1beta1.Types.Header
      @JvmName("getHeader")
      get() = _builder.getHeader()
      @JvmName("setHeader")
      set(value) {
        _builder.setHeader(value)
      }
    /**
     * <code>.cosmos.base.tendermint.v1beta1.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     */
    public fun clearHeader() {
      _builder.clearHeader()
    }
    /**
     * <code>.cosmos.base.tendermint.v1beta1.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     * @return Whether the header field is set.
     */
    public fun hasHeader(): kotlin.Boolean {
      return _builder.hasHeader()
    }

    /**
     * <code>.tendermint.types.Data data = 2 [json_name = "data", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     */
    public var data: tendermint.types.Types.Data
      @JvmName("getData")
      get() = _builder.getData()
      @JvmName("setData")
      set(value) {
        _builder.setData(value)
      }
    /**
     * <code>.tendermint.types.Data data = 2 [json_name = "data", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     */
    public fun clearData() {
      _builder.clearData()
    }
    /**
     * <code>.tendermint.types.Data data = 2 [json_name = "data", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     * @return Whether the data field is set.
     */
    public fun hasData(): kotlin.Boolean {
      return _builder.hasData()
    }

    /**
     * <code>.tendermint.types.EvidenceList evidence = 3 [json_name = "evidence", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     */
    public var evidence: tendermint.types.EvidenceOuterClass.EvidenceList
      @JvmName("getEvidence")
      get() = _builder.getEvidence()
      @JvmName("setEvidence")
      set(value) {
        _builder.setEvidence(value)
      }
    /**
     * <code>.tendermint.types.EvidenceList evidence = 3 [json_name = "evidence", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     */
    public fun clearEvidence() {
      _builder.clearEvidence()
    }
    /**
     * <code>.tendermint.types.EvidenceList evidence = 3 [json_name = "evidence", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     * @return Whether the evidence field is set.
     */
    public fun hasEvidence(): kotlin.Boolean {
      return _builder.hasEvidence()
    }

    /**
     * <code>.tendermint.types.Commit last_commit = 4 [json_name = "lastCommit"];</code>
     */
    public var lastCommit: tendermint.types.Types.Commit
      @JvmName("getLastCommit")
      get() = _builder.getLastCommit()
      @JvmName("setLastCommit")
      set(value) {
        _builder.setLastCommit(value)
      }
    /**
     * <code>.tendermint.types.Commit last_commit = 4 [json_name = "lastCommit"];</code>
     */
    public fun clearLastCommit() {
      _builder.clearLastCommit()
    }
    /**
     * <code>.tendermint.types.Commit last_commit = 4 [json_name = "lastCommit"];</code>
     * @return Whether the lastCommit field is set.
     */
    public fun hasLastCommit(): kotlin.Boolean {
      return _builder.hasLastCommit()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.base.tendermint.v1beta1.Types.Block.copy(block: cosmos.base.tendermint.v1beta1.BlockKt.Dsl.() -> kotlin.Unit): cosmos.base.tendermint.v1beta1.Types.Block =
  cosmos.base.tendermint.v1beta1.BlockKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.base.tendermint.v1beta1.Types.BlockOrBuilder.headerOrNull: cosmos.base.tendermint.v1beta1.Types.Header?
  get() = if (hasHeader()) getHeader() else null

public val cosmos.base.tendermint.v1beta1.Types.BlockOrBuilder.dataOrNull: tendermint.types.Types.Data?
  get() = if (hasData()) getData() else null

public val cosmos.base.tendermint.v1beta1.Types.BlockOrBuilder.evidenceOrNull: tendermint.types.EvidenceOuterClass.EvidenceList?
  get() = if (hasEvidence()) getEvidence() else null

public val cosmos.base.tendermint.v1beta1.Types.BlockOrBuilder.lastCommitOrNull: tendermint.types.Types.Commit?
  get() = if (hasLastCommit()) getLastCommit() else null

