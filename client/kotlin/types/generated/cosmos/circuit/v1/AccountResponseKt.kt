//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/circuit/v1/query.proto

package cosmos.circuit.v1;

@kotlin.jvm.JvmName("-initializeaccountResponse")
public inline fun accountResponse(block: cosmos.circuit.v1.AccountResponseKt.Dsl.() -> kotlin.Unit): cosmos.circuit.v1.QueryOuterClass.AccountResponse =
  cosmos.circuit.v1.AccountResponseKt.Dsl._create(cosmos.circuit.v1.QueryOuterClass.AccountResponse.newBuilder()).apply { block() }._build()
public object AccountResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.circuit.v1.QueryOuterClass.AccountResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.circuit.v1.QueryOuterClass.AccountResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.circuit.v1.QueryOuterClass.AccountResponse = _builder.build()

    /**
     * <code>.cosmos.circuit.v1.Permissions permission = 1 [json_name = "permission"];</code>
     */
    public var permission: cosmos.circuit.v1.Types.Permissions
      @JvmName("getPermission")
      get() = _builder.getPermission()
      @JvmName("setPermission")
      set(value) {
        _builder.setPermission(value)
      }
    /**
     * <code>.cosmos.circuit.v1.Permissions permission = 1 [json_name = "permission"];</code>
     */
    public fun clearPermission() {
      _builder.clearPermission()
    }
    /**
     * <code>.cosmos.circuit.v1.Permissions permission = 1 [json_name = "permission"];</code>
     * @return Whether the permission field is set.
     */
    public fun hasPermission(): kotlin.Boolean {
      return _builder.hasPermission()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.circuit.v1.QueryOuterClass.AccountResponse.copy(block: cosmos.circuit.v1.AccountResponseKt.Dsl.() -> kotlin.Unit): cosmos.circuit.v1.QueryOuterClass.AccountResponse =
  cosmos.circuit.v1.AccountResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.circuit.v1.QueryOuterClass.AccountResponseOrBuilder.permissionOrNull: cosmos.circuit.v1.Types.Permissions?
  get() = if (hasPermission()) getPermission() else null

