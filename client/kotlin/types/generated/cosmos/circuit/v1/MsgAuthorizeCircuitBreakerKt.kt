//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/circuit/v1/tx.proto

package cosmos.circuit.v1;

@kotlin.jvm.JvmName("-initializemsgAuthorizeCircuitBreaker")
public inline fun msgAuthorizeCircuitBreaker(block: cosmos.circuit.v1.MsgAuthorizeCircuitBreakerKt.Dsl.() -> kotlin.Unit): cosmos.circuit.v1.Tx.MsgAuthorizeCircuitBreaker =
  cosmos.circuit.v1.MsgAuthorizeCircuitBreakerKt.Dsl._create(cosmos.circuit.v1.Tx.MsgAuthorizeCircuitBreaker.newBuilder()).apply { block() }._build()
public object MsgAuthorizeCircuitBreakerKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.circuit.v1.Tx.MsgAuthorizeCircuitBreaker.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.circuit.v1.Tx.MsgAuthorizeCircuitBreaker.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.circuit.v1.Tx.MsgAuthorizeCircuitBreaker = _builder.build()

    /**
     * <pre>
     * granter is the granter of the circuit breaker permissions and must have
     * LEVEL_SUPER_ADMIN.
     * </pre>
     *
     * <code>string granter = 1 [json_name = "granter"];</code>
     */
    public var granter: kotlin.String
      @JvmName("getGranter")
      get() = _builder.getGranter()
      @JvmName("setGranter")
      set(value) {
        _builder.setGranter(value)
      }
    /**
     * <pre>
     * granter is the granter of the circuit breaker permissions and must have
     * LEVEL_SUPER_ADMIN.
     * </pre>
     *
     * <code>string granter = 1 [json_name = "granter"];</code>
     */
    public fun clearGranter() {
      _builder.clearGranter()
    }

    /**
     * <pre>
     * grantee is the account authorized with the provided permissions.
     * </pre>
     *
     * <code>string grantee = 2 [json_name = "grantee"];</code>
     */
    public var grantee: kotlin.String
      @JvmName("getGrantee")
      get() = _builder.getGrantee()
      @JvmName("setGrantee")
      set(value) {
        _builder.setGrantee(value)
      }
    /**
     * <pre>
     * grantee is the account authorized with the provided permissions.
     * </pre>
     *
     * <code>string grantee = 2 [json_name = "grantee"];</code>
     */
    public fun clearGrantee() {
      _builder.clearGrantee()
    }

    /**
     * <pre>
     * permissions are the circuit breaker permissions that the grantee receives.
     * These will overwrite any existing permissions. LEVEL_NONE_UNSPECIFIED can
     * be specified to revoke all permissions.
     * </pre>
     *
     * <code>.cosmos.circuit.v1.Permissions permissions = 3 [json_name = "permissions"];</code>
     */
    public var permissions: cosmos.circuit.v1.Types.Permissions
      @JvmName("getPermissions")
      get() = _builder.getPermissions()
      @JvmName("setPermissions")
      set(value) {
        _builder.setPermissions(value)
      }
    /**
     * <pre>
     * permissions are the circuit breaker permissions that the grantee receives.
     * These will overwrite any existing permissions. LEVEL_NONE_UNSPECIFIED can
     * be specified to revoke all permissions.
     * </pre>
     *
     * <code>.cosmos.circuit.v1.Permissions permissions = 3 [json_name = "permissions"];</code>
     */
    public fun clearPermissions() {
      _builder.clearPermissions()
    }
    /**
     * <pre>
     * permissions are the circuit breaker permissions that the grantee receives.
     * These will overwrite any existing permissions. LEVEL_NONE_UNSPECIFIED can
     * be specified to revoke all permissions.
     * </pre>
     *
     * <code>.cosmos.circuit.v1.Permissions permissions = 3 [json_name = "permissions"];</code>
     * @return Whether the permissions field is set.
     */
    public fun hasPermissions(): kotlin.Boolean {
      return _builder.hasPermissions()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.circuit.v1.Tx.MsgAuthorizeCircuitBreaker.copy(block: cosmos.circuit.v1.MsgAuthorizeCircuitBreakerKt.Dsl.() -> kotlin.Unit): cosmos.circuit.v1.Tx.MsgAuthorizeCircuitBreaker =
  cosmos.circuit.v1.MsgAuthorizeCircuitBreakerKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.circuit.v1.Tx.MsgAuthorizeCircuitBreakerOrBuilder.permissionsOrNull: cosmos.circuit.v1.Types.Permissions?
  get() = if (hasPermissions()) getPermissions() else null

