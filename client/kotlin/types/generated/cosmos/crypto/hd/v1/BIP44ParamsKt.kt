//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/crypto/hd/v1/hd.proto

package cosmos.crypto.hd.v1;

@kotlin.jvm.JvmName("-initializebIP44Params")
public inline fun bIP44Params(block: cosmos.crypto.hd.v1.BIP44ParamsKt.Dsl.() -> kotlin.Unit): cosmos.crypto.hd.v1.Hd.BIP44Params =
  cosmos.crypto.hd.v1.BIP44ParamsKt.Dsl._create(cosmos.crypto.hd.v1.Hd.BIP44Params.newBuilder()).apply { block() }._build()
public object BIP44ParamsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.crypto.hd.v1.Hd.BIP44Params.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.crypto.hd.v1.Hd.BIP44Params.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.crypto.hd.v1.Hd.BIP44Params = _builder.build()

    /**
     * <pre>
     * purpose is a constant set to 44' (or 0x8000002C) following the BIP43 recommendation
     * </pre>
     *
     * <code>uint32 purpose = 1 [json_name = "purpose"];</code>
     */
    public var purpose: kotlin.Int
      @JvmName("getPurpose")
      get() = _builder.getPurpose()
      @JvmName("setPurpose")
      set(value) {
        _builder.setPurpose(value)
      }
    /**
     * <pre>
     * purpose is a constant set to 44' (or 0x8000002C) following the BIP43 recommendation
     * </pre>
     *
     * <code>uint32 purpose = 1 [json_name = "purpose"];</code>
     */
    public fun clearPurpose() {
      _builder.clearPurpose()
    }

    /**
     * <pre>
     * coin_type is a constant that improves privacy
     * </pre>
     *
     * <code>uint32 coin_type = 2 [json_name = "coinType"];</code>
     */
    public var coinType: kotlin.Int
      @JvmName("getCoinType")
      get() = _builder.getCoinType()
      @JvmName("setCoinType")
      set(value) {
        _builder.setCoinType(value)
      }
    /**
     * <pre>
     * coin_type is a constant that improves privacy
     * </pre>
     *
     * <code>uint32 coin_type = 2 [json_name = "coinType"];</code>
     */
    public fun clearCoinType() {
      _builder.clearCoinType()
    }

    /**
     * <pre>
     * account splits the key space into independent user identities
     * </pre>
     *
     * <code>uint32 account = 3 [json_name = "account"];</code>
     */
    public var account: kotlin.Int
      @JvmName("getAccount")
      get() = _builder.getAccount()
      @JvmName("setAccount")
      set(value) {
        _builder.setAccount(value)
      }
    /**
     * <pre>
     * account splits the key space into independent user identities
     * </pre>
     *
     * <code>uint32 account = 3 [json_name = "account"];</code>
     */
    public fun clearAccount() {
      _builder.clearAccount()
    }

    /**
     * <pre>
     * change is a constant used for public derivation. Constant 0 is used for external chain and constant 1 for internal
     * chain.
     * </pre>
     *
     * <code>bool change = 4 [json_name = "change"];</code>
     */
    public var change: kotlin.Boolean
      @JvmName("getChange")
      get() = _builder.getChange()
      @JvmName("setChange")
      set(value) {
        _builder.setChange(value)
      }
    /**
     * <pre>
     * change is a constant used for public derivation. Constant 0 is used for external chain and constant 1 for internal
     * chain.
     * </pre>
     *
     * <code>bool change = 4 [json_name = "change"];</code>
     */
    public fun clearChange() {
      _builder.clearChange()
    }

    /**
     * <pre>
     * address_index is used as child index in BIP32 derivation
     * </pre>
     *
     * <code>uint32 address_index = 5 [json_name = "addressIndex"];</code>
     */
    public var addressIndex: kotlin.Int
      @JvmName("getAddressIndex")
      get() = _builder.getAddressIndex()
      @JvmName("setAddressIndex")
      set(value) {
        _builder.setAddressIndex(value)
      }
    /**
     * <pre>
     * address_index is used as child index in BIP32 derivation
     * </pre>
     *
     * <code>uint32 address_index = 5 [json_name = "addressIndex"];</code>
     */
    public fun clearAddressIndex() {
      _builder.clearAddressIndex()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.crypto.hd.v1.Hd.BIP44Params.copy(block: cosmos.crypto.hd.v1.BIP44ParamsKt.Dsl.() -> kotlin.Unit): cosmos.crypto.hd.v1.Hd.BIP44Params =
  cosmos.crypto.hd.v1.BIP44ParamsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

