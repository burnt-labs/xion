//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/group/v1/types.proto

package cosmos.group.v1;

@kotlin.jvm.JvmName("-initializedecisionPolicyWindows")
public inline fun decisionPolicyWindows(block: cosmos.group.v1.DecisionPolicyWindowsKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Types.DecisionPolicyWindows =
  cosmos.group.v1.DecisionPolicyWindowsKt.Dsl._create(cosmos.group.v1.Types.DecisionPolicyWindows.newBuilder()).apply { block() }._build()
public object DecisionPolicyWindowsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.group.v1.Types.DecisionPolicyWindows.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.group.v1.Types.DecisionPolicyWindows.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.group.v1.Types.DecisionPolicyWindows = _builder.build()

    /**
     * <pre>
     * voting_period is the duration from submission of a proposal to the end of voting period
     * Within this times votes can be submitted with MsgVote.
     * </pre>
     *
     * <code>.google.protobuf.Duration voting_period = 1 [json_name = "votingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];</code>
     */
    public var votingPeriod: com.google.protobuf.Duration
      @JvmName("getVotingPeriod")
      get() = _builder.getVotingPeriod()
      @JvmName("setVotingPeriod")
      set(value) {
        _builder.setVotingPeriod(value)
      }
    /**
     * <pre>
     * voting_period is the duration from submission of a proposal to the end of voting period
     * Within this times votes can be submitted with MsgVote.
     * </pre>
     *
     * <code>.google.protobuf.Duration voting_period = 1 [json_name = "votingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];</code>
     */
    public fun clearVotingPeriod() {
      _builder.clearVotingPeriod()
    }
    /**
     * <pre>
     * voting_period is the duration from submission of a proposal to the end of voting period
     * Within this times votes can be submitted with MsgVote.
     * </pre>
     *
     * <code>.google.protobuf.Duration voting_period = 1 [json_name = "votingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];</code>
     * @return Whether the votingPeriod field is set.
     */
    public fun hasVotingPeriod(): kotlin.Boolean {
      return _builder.hasVotingPeriod()
    }

    /**
     * <pre>
     * min_execution_period is the minimum duration after the proposal submission
     * where members can start sending MsgExec. This means that the window for
     * sending a MsgExec transaction is:
     * `[ submission + min_execution_period ; submission + voting_period + max_execution_period]`
     * where max_execution_period is a app-specific config, defined in the keeper.
     * If not set, min_execution_period will default to 0.
     * Please make sure to set a `min_execution_period` that is smaller than
     * `voting_period + max_execution_period`, or else the above execution window
     * is empty, meaning that all proposals created with this decision policy
     * won't be able to be executed.
     * </pre>
     *
     * <code>.google.protobuf.Duration min_execution_period = 2 [json_name = "minExecutionPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];</code>
     */
    public var minExecutionPeriod: com.google.protobuf.Duration
      @JvmName("getMinExecutionPeriod")
      get() = _builder.getMinExecutionPeriod()
      @JvmName("setMinExecutionPeriod")
      set(value) {
        _builder.setMinExecutionPeriod(value)
      }
    /**
     * <pre>
     * min_execution_period is the minimum duration after the proposal submission
     * where members can start sending MsgExec. This means that the window for
     * sending a MsgExec transaction is:
     * `[ submission + min_execution_period ; submission + voting_period + max_execution_period]`
     * where max_execution_period is a app-specific config, defined in the keeper.
     * If not set, min_execution_period will default to 0.
     * Please make sure to set a `min_execution_period` that is smaller than
     * `voting_period + max_execution_period`, or else the above execution window
     * is empty, meaning that all proposals created with this decision policy
     * won't be able to be executed.
     * </pre>
     *
     * <code>.google.protobuf.Duration min_execution_period = 2 [json_name = "minExecutionPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];</code>
     */
    public fun clearMinExecutionPeriod() {
      _builder.clearMinExecutionPeriod()
    }
    /**
     * <pre>
     * min_execution_period is the minimum duration after the proposal submission
     * where members can start sending MsgExec. This means that the window for
     * sending a MsgExec transaction is:
     * `[ submission + min_execution_period ; submission + voting_period + max_execution_period]`
     * where max_execution_period is a app-specific config, defined in the keeper.
     * If not set, min_execution_period will default to 0.
     * Please make sure to set a `min_execution_period` that is smaller than
     * `voting_period + max_execution_period`, or else the above execution window
     * is empty, meaning that all proposals created with this decision policy
     * won't be able to be executed.
     * </pre>
     *
     * <code>.google.protobuf.Duration min_execution_period = 2 [json_name = "minExecutionPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];</code>
     * @return Whether the minExecutionPeriod field is set.
     */
    public fun hasMinExecutionPeriod(): kotlin.Boolean {
      return _builder.hasMinExecutionPeriod()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.group.v1.Types.DecisionPolicyWindows.copy(block: cosmos.group.v1.DecisionPolicyWindowsKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Types.DecisionPolicyWindows =
  cosmos.group.v1.DecisionPolicyWindowsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.group.v1.Types.DecisionPolicyWindowsOrBuilder.votingPeriodOrNull: com.google.protobuf.Duration?
  get() = if (hasVotingPeriod()) getVotingPeriod() else null

public val cosmos.group.v1.Types.DecisionPolicyWindowsOrBuilder.minExecutionPeriodOrNull: com.google.protobuf.Duration?
  get() = if (hasMinExecutionPeriod()) getMinExecutionPeriod() else null

