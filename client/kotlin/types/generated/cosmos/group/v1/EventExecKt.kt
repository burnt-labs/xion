//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/group/v1/events.proto

package cosmos.group.v1;

@kotlin.jvm.JvmName("-initializeeventExec")
public inline fun eventExec(block: cosmos.group.v1.EventExecKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Events.EventExec =
  cosmos.group.v1.EventExecKt.Dsl._create(cosmos.group.v1.Events.EventExec.newBuilder()).apply { block() }._build()
public object EventExecKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.group.v1.Events.EventExec.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.group.v1.Events.EventExec.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.group.v1.Events.EventExec = _builder.build()

    /**
     * <pre>
     * proposal_id is the unique ID of the proposal.
     * </pre>
     *
     * <code>uint64 proposal_id = 1 [json_name = "proposalId"];</code>
     */
    public var proposalId: kotlin.Long
      @JvmName("getProposalId")
      get() = _builder.getProposalId()
      @JvmName("setProposalId")
      set(value) {
        _builder.setProposalId(value)
      }
    /**
     * <pre>
     * proposal_id is the unique ID of the proposal.
     * </pre>
     *
     * <code>uint64 proposal_id = 1 [json_name = "proposalId"];</code>
     */
    public fun clearProposalId() {
      _builder.clearProposalId()
    }

    /**
     * <pre>
     * result is the proposal execution result.
     * </pre>
     *
     * <code>.cosmos.group.v1.ProposalExecutorResult result = 2 [json_name = "result"];</code>
     */
    public var result: cosmos.group.v1.Types.ProposalExecutorResult
      @JvmName("getResult")
      get() = _builder.getResult()
      @JvmName("setResult")
      set(value) {
        _builder.setResult(value)
      }
    /**
     * <pre>
     * result is the proposal execution result.
     * </pre>
     *
     * <code>.cosmos.group.v1.ProposalExecutorResult result = 2 [json_name = "result"];</code>
     */
    public fun clearResult() {
      _builder.clearResult()
    }

    /**
     * <pre>
     * logs contains error logs in case the execution result is FAILURE.
     * </pre>
     *
     * <code>string logs = 3 [json_name = "logs"];</code>
     */
    public var logs: kotlin.String
      @JvmName("getLogs")
      get() = _builder.getLogs()
      @JvmName("setLogs")
      set(value) {
        _builder.setLogs(value)
      }
    /**
     * <pre>
     * logs contains error logs in case the execution result is FAILURE.
     * </pre>
     *
     * <code>string logs = 3 [json_name = "logs"];</code>
     */
    public fun clearLogs() {
      _builder.clearLogs()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.group.v1.Events.EventExec.copy(block: cosmos.group.v1.EventExecKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Events.EventExec =
  cosmos.group.v1.EventExecKt.Dsl._create(this.toBuilder()).apply { block() }._build()

