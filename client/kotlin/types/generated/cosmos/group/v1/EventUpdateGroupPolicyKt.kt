//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/group/v1/events.proto

package cosmos.group.v1;

@kotlin.jvm.JvmName("-initializeeventUpdateGroupPolicy")
public inline fun eventUpdateGroupPolicy(block: cosmos.group.v1.EventUpdateGroupPolicyKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Events.EventUpdateGroupPolicy =
  cosmos.group.v1.EventUpdateGroupPolicyKt.Dsl._create(cosmos.group.v1.Events.EventUpdateGroupPolicy.newBuilder()).apply { block() }._build()
public object EventUpdateGroupPolicyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.group.v1.Events.EventUpdateGroupPolicy.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.group.v1.Events.EventUpdateGroupPolicy.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.group.v1.Events.EventUpdateGroupPolicy = _builder.build()

    /**
     * <pre>
     * address is the account address of the group policy.
     * </pre>
     *
     * <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     */
    public var address: kotlin.String
      @JvmName("getAddress")
      get() = _builder.getAddress()
      @JvmName("setAddress")
      set(value) {
        _builder.setAddress(value)
      }
    /**
     * <pre>
     * address is the account address of the group policy.
     * </pre>
     *
     * <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     */
    public fun clearAddress() {
      _builder.clearAddress()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.group.v1.Events.EventUpdateGroupPolicy.copy(block: cosmos.group.v1.EventUpdateGroupPolicyKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Events.EventUpdateGroupPolicy =
  cosmos.group.v1.EventUpdateGroupPolicyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

