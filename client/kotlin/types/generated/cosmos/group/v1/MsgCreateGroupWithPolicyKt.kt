//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/group/v1/tx.proto

package cosmos.group.v1;

@kotlin.jvm.JvmName("-initializemsgCreateGroupWithPolicy")
public inline fun msgCreateGroupWithPolicy(block: cosmos.group.v1.MsgCreateGroupWithPolicyKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Tx.MsgCreateGroupWithPolicy =
  cosmos.group.v1.MsgCreateGroupWithPolicyKt.Dsl._create(cosmos.group.v1.Tx.MsgCreateGroupWithPolicy.newBuilder()).apply { block() }._build()
public object MsgCreateGroupWithPolicyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.group.v1.Tx.MsgCreateGroupWithPolicy.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.group.v1.Tx.MsgCreateGroupWithPolicy.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.group.v1.Tx.MsgCreateGroupWithPolicy = _builder.build()

    /**
     * <pre>
     * admin is the account address of the group and group policy admin.
     * </pre>
     *
     * <code>string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     */
    public var admin: kotlin.String
      @JvmName("getAdmin")
      get() = _builder.getAdmin()
      @JvmName("setAdmin")
      set(value) {
        _builder.setAdmin(value)
      }
    /**
     * <pre>
     * admin is the account address of the group and group policy admin.
     * </pre>
     *
     * <code>string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     */
    public fun clearAdmin() {
      _builder.clearAdmin()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class MembersProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * members defines the group members.
     * </pre>
     *
     * <code>repeated .cosmos.group.v1.MemberRequest members = 2 [json_name = "members", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     */
     public val members: com.google.protobuf.kotlin.DslList<cosmos.group.v1.Types.MemberRequest, MembersProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getMembersList()
      )
    /**
     * <pre>
     * members defines the group members.
     * </pre>
     *
     * <code>repeated .cosmos.group.v1.MemberRequest members = 2 [json_name = "members", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     * @param value The members to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addMembers")
    public fun com.google.protobuf.kotlin.DslList<cosmos.group.v1.Types.MemberRequest, MembersProxy>.add(value: cosmos.group.v1.Types.MemberRequest) {
      _builder.addMembers(value)
    }
    /**
     * <pre>
     * members defines the group members.
     * </pre>
     *
     * <code>repeated .cosmos.group.v1.MemberRequest members = 2 [json_name = "members", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     * @param value The members to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignMembers")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.group.v1.Types.MemberRequest, MembersProxy>.plusAssign(value: cosmos.group.v1.Types.MemberRequest) {
      add(value)
    }
    /**
     * <pre>
     * members defines the group members.
     * </pre>
     *
     * <code>repeated .cosmos.group.v1.MemberRequest members = 2 [json_name = "members", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     * @param values The members to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllMembers")
    public fun com.google.protobuf.kotlin.DslList<cosmos.group.v1.Types.MemberRequest, MembersProxy>.addAll(values: kotlin.collections.Iterable<cosmos.group.v1.Types.MemberRequest>) {
      _builder.addAllMembers(values)
    }
    /**
     * <pre>
     * members defines the group members.
     * </pre>
     *
     * <code>repeated .cosmos.group.v1.MemberRequest members = 2 [json_name = "members", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     * @param values The members to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllMembers")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.group.v1.Types.MemberRequest, MembersProxy>.plusAssign(values: kotlin.collections.Iterable<cosmos.group.v1.Types.MemberRequest>) {
      addAll(values)
    }
    /**
     * <pre>
     * members defines the group members.
     * </pre>
     *
     * <code>repeated .cosmos.group.v1.MemberRequest members = 2 [json_name = "members", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     * @param index The index to set the value at.
     * @param value The members to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setMembers")
    public operator fun com.google.protobuf.kotlin.DslList<cosmos.group.v1.Types.MemberRequest, MembersProxy>.set(index: kotlin.Int, value: cosmos.group.v1.Types.MemberRequest) {
      _builder.setMembers(index, value)
    }
    /**
     * <pre>
     * members defines the group members.
     * </pre>
     *
     * <code>repeated .cosmos.group.v1.MemberRequest members = 2 [json_name = "members", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearMembers")
    public fun com.google.protobuf.kotlin.DslList<cosmos.group.v1.Types.MemberRequest, MembersProxy>.clear() {
      _builder.clearMembers()
    }


    /**
     * <pre>
     * group_metadata is any arbitrary metadata attached to the group.
     * </pre>
     *
     * <code>string group_metadata = 3 [json_name = "groupMetadata"];</code>
     */
    public var groupMetadata: kotlin.String
      @JvmName("getGroupMetadata")
      get() = _builder.getGroupMetadata()
      @JvmName("setGroupMetadata")
      set(value) {
        _builder.setGroupMetadata(value)
      }
    /**
     * <pre>
     * group_metadata is any arbitrary metadata attached to the group.
     * </pre>
     *
     * <code>string group_metadata = 3 [json_name = "groupMetadata"];</code>
     */
    public fun clearGroupMetadata() {
      _builder.clearGroupMetadata()
    }

    /**
     * <pre>
     * group_policy_metadata is any arbitrary metadata attached to the group policy.
     * </pre>
     *
     * <code>string group_policy_metadata = 4 [json_name = "groupPolicyMetadata"];</code>
     */
    public var groupPolicyMetadata: kotlin.String
      @JvmName("getGroupPolicyMetadata")
      get() = _builder.getGroupPolicyMetadata()
      @JvmName("setGroupPolicyMetadata")
      set(value) {
        _builder.setGroupPolicyMetadata(value)
      }
    /**
     * <pre>
     * group_policy_metadata is any arbitrary metadata attached to the group policy.
     * </pre>
     *
     * <code>string group_policy_metadata = 4 [json_name = "groupPolicyMetadata"];</code>
     */
    public fun clearGroupPolicyMetadata() {
      _builder.clearGroupPolicyMetadata()
    }

    /**
     * <pre>
     * group_policy_as_admin is a boolean field, if set to true, the group policy account address will be used as group
     * and group policy admin.
     * </pre>
     *
     * <code>bool group_policy_as_admin = 5 [json_name = "groupPolicyAsAdmin"];</code>
     */
    public var groupPolicyAsAdmin: kotlin.Boolean
      @JvmName("getGroupPolicyAsAdmin")
      get() = _builder.getGroupPolicyAsAdmin()
      @JvmName("setGroupPolicyAsAdmin")
      set(value) {
        _builder.setGroupPolicyAsAdmin(value)
      }
    /**
     * <pre>
     * group_policy_as_admin is a boolean field, if set to true, the group policy account address will be used as group
     * and group policy admin.
     * </pre>
     *
     * <code>bool group_policy_as_admin = 5 [json_name = "groupPolicyAsAdmin"];</code>
     */
    public fun clearGroupPolicyAsAdmin() {
      _builder.clearGroupPolicyAsAdmin()
    }

    /**
     * <pre>
     * decision_policy specifies the group policy's decision policy.
     * </pre>
     *
     * <code>.google.protobuf.Any decision_policy = 6 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];</code>
     */
    public var decisionPolicy: com.google.protobuf.Any
      @JvmName("getDecisionPolicy")
      get() = _builder.getDecisionPolicy()
      @JvmName("setDecisionPolicy")
      set(value) {
        _builder.setDecisionPolicy(value)
      }
    /**
     * <pre>
     * decision_policy specifies the group policy's decision policy.
     * </pre>
     *
     * <code>.google.protobuf.Any decision_policy = 6 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];</code>
     */
    public fun clearDecisionPolicy() {
      _builder.clearDecisionPolicy()
    }
    /**
     * <pre>
     * decision_policy specifies the group policy's decision policy.
     * </pre>
     *
     * <code>.google.protobuf.Any decision_policy = 6 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];</code>
     * @return Whether the decisionPolicy field is set.
     */
    public fun hasDecisionPolicy(): kotlin.Boolean {
      return _builder.hasDecisionPolicy()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.group.v1.Tx.MsgCreateGroupWithPolicy.copy(block: cosmos.group.v1.MsgCreateGroupWithPolicyKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Tx.MsgCreateGroupWithPolicy =
  cosmos.group.v1.MsgCreateGroupWithPolicyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.group.v1.Tx.MsgCreateGroupWithPolicyOrBuilder.decisionPolicyOrNull: com.google.protobuf.Any?
  get() = if (hasDecisionPolicy()) getDecisionPolicy() else null

