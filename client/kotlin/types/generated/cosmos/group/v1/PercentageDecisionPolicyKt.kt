//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/group/v1/types.proto

package cosmos.group.v1;

@kotlin.jvm.JvmName("-initializepercentageDecisionPolicy")
public inline fun percentageDecisionPolicy(block: cosmos.group.v1.PercentageDecisionPolicyKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Types.PercentageDecisionPolicy =
  cosmos.group.v1.PercentageDecisionPolicyKt.Dsl._create(cosmos.group.v1.Types.PercentageDecisionPolicy.newBuilder()).apply { block() }._build()
public object PercentageDecisionPolicyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.group.v1.Types.PercentageDecisionPolicy.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.group.v1.Types.PercentageDecisionPolicy.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.group.v1.Types.PercentageDecisionPolicy = _builder.build()

    /**
     * <pre>
     * percentage is the minimum percentage of the weighted sum of `YES` votes must
     * meet for a proposal to succeed.
     * </pre>
     *
     * <code>string percentage = 1 [json_name = "percentage"];</code>
     */
    public var percentage: kotlin.String
      @JvmName("getPercentage")
      get() = _builder.getPercentage()
      @JvmName("setPercentage")
      set(value) {
        _builder.setPercentage(value)
      }
    /**
     * <pre>
     * percentage is the minimum percentage of the weighted sum of `YES` votes must
     * meet for a proposal to succeed.
     * </pre>
     *
     * <code>string percentage = 1 [json_name = "percentage"];</code>
     */
    public fun clearPercentage() {
      _builder.clearPercentage()
    }

    /**
     * <pre>
     * windows defines the different windows for voting and execution.
     * </pre>
     *
     * <code>.cosmos.group.v1.DecisionPolicyWindows windows = 2 [json_name = "windows"];</code>
     */
    public var windows: cosmos.group.v1.Types.DecisionPolicyWindows
      @JvmName("getWindows")
      get() = _builder.getWindows()
      @JvmName("setWindows")
      set(value) {
        _builder.setWindows(value)
      }
    /**
     * <pre>
     * windows defines the different windows for voting and execution.
     * </pre>
     *
     * <code>.cosmos.group.v1.DecisionPolicyWindows windows = 2 [json_name = "windows"];</code>
     */
    public fun clearWindows() {
      _builder.clearWindows()
    }
    /**
     * <pre>
     * windows defines the different windows for voting and execution.
     * </pre>
     *
     * <code>.cosmos.group.v1.DecisionPolicyWindows windows = 2 [json_name = "windows"];</code>
     * @return Whether the windows field is set.
     */
    public fun hasWindows(): kotlin.Boolean {
      return _builder.hasWindows()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.group.v1.Types.PercentageDecisionPolicy.copy(block: cosmos.group.v1.PercentageDecisionPolicyKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.Types.PercentageDecisionPolicy =
  cosmos.group.v1.PercentageDecisionPolicyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.group.v1.Types.PercentageDecisionPolicyOrBuilder.windowsOrNull: cosmos.group.v1.Types.DecisionPolicyWindows?
  get() = if (hasWindows()) getWindows() else null

