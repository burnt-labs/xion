//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/group/v1/query.proto

package cosmos.group.v1;

@kotlin.jvm.JvmName("-initializequeryVoteByProposalVoterResponse")
public inline fun queryVoteByProposalVoterResponse(block: cosmos.group.v1.QueryVoteByProposalVoterResponseKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.QueryOuterClass.QueryVoteByProposalVoterResponse =
  cosmos.group.v1.QueryVoteByProposalVoterResponseKt.Dsl._create(cosmos.group.v1.QueryOuterClass.QueryVoteByProposalVoterResponse.newBuilder()).apply { block() }._build()
public object QueryVoteByProposalVoterResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.group.v1.QueryOuterClass.QueryVoteByProposalVoterResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.group.v1.QueryOuterClass.QueryVoteByProposalVoterResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.group.v1.QueryOuterClass.QueryVoteByProposalVoterResponse = _builder.build()

    /**
     * <pre>
     * vote is the vote with given proposal_id and voter.
     * </pre>
     *
     * <code>.cosmos.group.v1.Vote vote = 1 [json_name = "vote"];</code>
     */
    public var vote: cosmos.group.v1.Types.Vote
      @JvmName("getVote")
      get() = _builder.getVote()
      @JvmName("setVote")
      set(value) {
        _builder.setVote(value)
      }
    /**
     * <pre>
     * vote is the vote with given proposal_id and voter.
     * </pre>
     *
     * <code>.cosmos.group.v1.Vote vote = 1 [json_name = "vote"];</code>
     */
    public fun clearVote() {
      _builder.clearVote()
    }
    /**
     * <pre>
     * vote is the vote with given proposal_id and voter.
     * </pre>
     *
     * <code>.cosmos.group.v1.Vote vote = 1 [json_name = "vote"];</code>
     * @return Whether the vote field is set.
     */
    public fun hasVote(): kotlin.Boolean {
      return _builder.hasVote()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.group.v1.QueryOuterClass.QueryVoteByProposalVoterResponse.copy(block: cosmos.group.v1.QueryVoteByProposalVoterResponseKt.Dsl.() -> kotlin.Unit): cosmos.group.v1.QueryOuterClass.QueryVoteByProposalVoterResponse =
  cosmos.group.v1.QueryVoteByProposalVoterResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.group.v1.QueryOuterClass.QueryVoteByProposalVoterResponseOrBuilder.voteOrNull: cosmos.group.v1.Types.Vote?
  get() = if (hasVote()) getVote() else null

