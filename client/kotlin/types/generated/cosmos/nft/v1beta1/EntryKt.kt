//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/nft/v1beta1/genesis.proto

package cosmos.nft.v1beta1;

@kotlin.jvm.JvmName("-initializeentry")
public inline fun entry(block: cosmos.nft.v1beta1.EntryKt.Dsl.() -> kotlin.Unit): cosmos.nft.v1beta1.Genesis.Entry =
  cosmos.nft.v1beta1.EntryKt.Dsl._create(cosmos.nft.v1beta1.Genesis.Entry.newBuilder()).apply { block() }._build()
public object EntryKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.nft.v1beta1.Genesis.Entry.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.nft.v1beta1.Genesis.Entry.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.nft.v1beta1.Genesis.Entry = _builder.build()

    /**
     * <pre>
     * owner is the owner address of the following nft
     * </pre>
     *
     * <code>string owner = 1 [json_name = "owner"];</code>
     */
    public var owner: kotlin.String
      @JvmName("getOwner")
      get() = _builder.getOwner()
      @JvmName("setOwner")
      set(value) {
        _builder.setOwner(value)
      }
    /**
     * <pre>
     * owner is the owner address of the following nft
     * </pre>
     *
     * <code>string owner = 1 [json_name = "owner"];</code>
     */
    public fun clearOwner() {
      _builder.clearOwner()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class NftsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * nfts is a group of nfts of the same owner
     * </pre>
     *
     * <code>repeated .cosmos.nft.v1beta1.NFT nfts = 2 [json_name = "nfts"];</code>
     */
     public val nfts: com.google.protobuf.kotlin.DslList<cosmos.nft.v1beta1.Nft.NFT, NftsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getNftsList()
      )
    /**
     * <pre>
     * nfts is a group of nfts of the same owner
     * </pre>
     *
     * <code>repeated .cosmos.nft.v1beta1.NFT nfts = 2 [json_name = "nfts"];</code>
     * @param value The nfts to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addNfts")
    public fun com.google.protobuf.kotlin.DslList<cosmos.nft.v1beta1.Nft.NFT, NftsProxy>.add(value: cosmos.nft.v1beta1.Nft.NFT) {
      _builder.addNfts(value)
    }
    /**
     * <pre>
     * nfts is a group of nfts of the same owner
     * </pre>
     *
     * <code>repeated .cosmos.nft.v1beta1.NFT nfts = 2 [json_name = "nfts"];</code>
     * @param value The nfts to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignNfts")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.nft.v1beta1.Nft.NFT, NftsProxy>.plusAssign(value: cosmos.nft.v1beta1.Nft.NFT) {
      add(value)
    }
    /**
     * <pre>
     * nfts is a group of nfts of the same owner
     * </pre>
     *
     * <code>repeated .cosmos.nft.v1beta1.NFT nfts = 2 [json_name = "nfts"];</code>
     * @param values The nfts to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllNfts")
    public fun com.google.protobuf.kotlin.DslList<cosmos.nft.v1beta1.Nft.NFT, NftsProxy>.addAll(values: kotlin.collections.Iterable<cosmos.nft.v1beta1.Nft.NFT>) {
      _builder.addAllNfts(values)
    }
    /**
     * <pre>
     * nfts is a group of nfts of the same owner
     * </pre>
     *
     * <code>repeated .cosmos.nft.v1beta1.NFT nfts = 2 [json_name = "nfts"];</code>
     * @param values The nfts to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllNfts")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.nft.v1beta1.Nft.NFT, NftsProxy>.plusAssign(values: kotlin.collections.Iterable<cosmos.nft.v1beta1.Nft.NFT>) {
      addAll(values)
    }
    /**
     * <pre>
     * nfts is a group of nfts of the same owner
     * </pre>
     *
     * <code>repeated .cosmos.nft.v1beta1.NFT nfts = 2 [json_name = "nfts"];</code>
     * @param index The index to set the value at.
     * @param value The nfts to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setNfts")
    public operator fun com.google.protobuf.kotlin.DslList<cosmos.nft.v1beta1.Nft.NFT, NftsProxy>.set(index: kotlin.Int, value: cosmos.nft.v1beta1.Nft.NFT) {
      _builder.setNfts(index, value)
    }
    /**
     * <pre>
     * nfts is a group of nfts of the same owner
     * </pre>
     *
     * <code>repeated .cosmos.nft.v1beta1.NFT nfts = 2 [json_name = "nfts"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearNfts")
    public fun com.google.protobuf.kotlin.DslList<cosmos.nft.v1beta1.Nft.NFT, NftsProxy>.clear() {
      _builder.clearNfts()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.nft.v1beta1.Genesis.Entry.copy(block: cosmos.nft.v1beta1.EntryKt.Dsl.() -> kotlin.Unit): cosmos.nft.v1beta1.Genesis.Entry =
  cosmos.nft.v1beta1.EntryKt.Dsl._create(this.toBuilder()).apply { block() }._build()

