//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/nft/v1beta1/nft.proto

package cosmos.nft.v1beta1;

@kotlin.jvm.JvmName("-initializenFT")
public inline fun nFT(block: cosmos.nft.v1beta1.NFTKt.Dsl.() -> kotlin.Unit): cosmos.nft.v1beta1.Nft.NFT =
  cosmos.nft.v1beta1.NFTKt.Dsl._create(cosmos.nft.v1beta1.Nft.NFT.newBuilder()).apply { block() }._build()
public object NFTKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.nft.v1beta1.Nft.NFT.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.nft.v1beta1.Nft.NFT.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.nft.v1beta1.Nft.NFT = _builder.build()

    /**
     * <pre>
     * class_id associated with the NFT, similar to the contract address of ERC721
     * </pre>
     *
     * <code>string class_id = 1 [json_name = "classId"];</code>
     */
    public var classId: kotlin.String
      @JvmName("getClassId")
      get() = _builder.getClassId()
      @JvmName("setClassId")
      set(value) {
        _builder.setClassId(value)
      }
    /**
     * <pre>
     * class_id associated with the NFT, similar to the contract address of ERC721
     * </pre>
     *
     * <code>string class_id = 1 [json_name = "classId"];</code>
     */
    public fun clearClassId() {
      _builder.clearClassId()
    }

    /**
     * <pre>
     * id is a unique identifier of the NFT
     * </pre>
     *
     * <code>string id = 2 [json_name = "id"];</code>
     */
    public var id: kotlin.String
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <pre>
     * id is a unique identifier of the NFT
     * </pre>
     *
     * <code>string id = 2 [json_name = "id"];</code>
     */
    public fun clearId() {
      _builder.clearId()
    }

    /**
     * <pre>
     * uri for the NFT metadata stored off chain
     * </pre>
     *
     * <code>string uri = 3 [json_name = "uri"];</code>
     */
    public var uri: kotlin.String
      @JvmName("getUri")
      get() = _builder.getUri()
      @JvmName("setUri")
      set(value) {
        _builder.setUri(value)
      }
    /**
     * <pre>
     * uri for the NFT metadata stored off chain
     * </pre>
     *
     * <code>string uri = 3 [json_name = "uri"];</code>
     */
    public fun clearUri() {
      _builder.clearUri()
    }

    /**
     * <pre>
     * uri_hash is a hash of the document pointed by uri
     * </pre>
     *
     * <code>string uri_hash = 4 [json_name = "uriHash"];</code>
     */
    public var uriHash: kotlin.String
      @JvmName("getUriHash")
      get() = _builder.getUriHash()
      @JvmName("setUriHash")
      set(value) {
        _builder.setUriHash(value)
      }
    /**
     * <pre>
     * uri_hash is a hash of the document pointed by uri
     * </pre>
     *
     * <code>string uri_hash = 4 [json_name = "uriHash"];</code>
     */
    public fun clearUriHash() {
      _builder.clearUriHash()
    }

    /**
     * <pre>
     * data is an app specific data of the NFT. Optional
     * </pre>
     *
     * <code>.google.protobuf.Any data = 10 [json_name = "data"];</code>
     */
    public var data: com.google.protobuf.Any
      @JvmName("getData")
      get() = _builder.getData()
      @JvmName("setData")
      set(value) {
        _builder.setData(value)
      }
    /**
     * <pre>
     * data is an app specific data of the NFT. Optional
     * </pre>
     *
     * <code>.google.protobuf.Any data = 10 [json_name = "data"];</code>
     */
    public fun clearData() {
      _builder.clearData()
    }
    /**
     * <pre>
     * data is an app specific data of the NFT. Optional
     * </pre>
     *
     * <code>.google.protobuf.Any data = 10 [json_name = "data"];</code>
     * @return Whether the data field is set.
     */
    public fun hasData(): kotlin.Boolean {
      return _builder.hasData()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.nft.v1beta1.Nft.NFT.copy(block: cosmos.nft.v1beta1.NFTKt.Dsl.() -> kotlin.Unit): cosmos.nft.v1beta1.Nft.NFT =
  cosmos.nft.v1beta1.NFTKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.nft.v1beta1.Nft.NFTOrBuilder.dataOrNull: com.google.protobuf.Any?
  get() = if (hasData()) getData() else null

