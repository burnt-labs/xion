//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/nft/v1beta1/query.proto

package cosmos.nft.v1beta1;

@kotlin.jvm.JvmName("-initializequeryBalanceResponse")
public inline fun queryBalanceResponse(block: cosmos.nft.v1beta1.QueryBalanceResponseKt.Dsl.() -> kotlin.Unit): cosmos.nft.v1beta1.QueryOuterClass.QueryBalanceResponse =
  cosmos.nft.v1beta1.QueryBalanceResponseKt.Dsl._create(cosmos.nft.v1beta1.QueryOuterClass.QueryBalanceResponse.newBuilder()).apply { block() }._build()
public object QueryBalanceResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.nft.v1beta1.QueryOuterClass.QueryBalanceResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.nft.v1beta1.QueryOuterClass.QueryBalanceResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.nft.v1beta1.QueryOuterClass.QueryBalanceResponse = _builder.build()

    /**
     * <pre>
     * amount is the number of all NFTs of a given class owned by the owner
     * </pre>
     *
     * <code>uint64 amount = 1 [json_name = "amount"];</code>
     */
    public var amount: kotlin.Long
      @JvmName("getAmount")
      get() = _builder.getAmount()
      @JvmName("setAmount")
      set(value) {
        _builder.setAmount(value)
      }
    /**
     * <pre>
     * amount is the number of all NFTs of a given class owned by the owner
     * </pre>
     *
     * <code>uint64 amount = 1 [json_name = "amount"];</code>
     */
    public fun clearAmount() {
      _builder.clearAmount()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.nft.v1beta1.QueryOuterClass.QueryBalanceResponse.copy(block: cosmos.nft.v1beta1.QueryBalanceResponseKt.Dsl.() -> kotlin.Unit): cosmos.nft.v1beta1.QueryOuterClass.QueryBalanceResponse =
  cosmos.nft.v1beta1.QueryBalanceResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

