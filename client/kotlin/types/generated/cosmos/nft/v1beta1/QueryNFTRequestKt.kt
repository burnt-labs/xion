//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/nft/v1beta1/query.proto

package cosmos.nft.v1beta1;

@kotlin.jvm.JvmName("-initializequeryNFTRequest")
public inline fun queryNFTRequest(block: cosmos.nft.v1beta1.QueryNFTRequestKt.Dsl.() -> kotlin.Unit): cosmos.nft.v1beta1.QueryOuterClass.QueryNFTRequest =
  cosmos.nft.v1beta1.QueryNFTRequestKt.Dsl._create(cosmos.nft.v1beta1.QueryOuterClass.QueryNFTRequest.newBuilder()).apply { block() }._build()
public object QueryNFTRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.nft.v1beta1.QueryOuterClass.QueryNFTRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.nft.v1beta1.QueryOuterClass.QueryNFTRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.nft.v1beta1.QueryOuterClass.QueryNFTRequest = _builder.build()

    /**
     * <pre>
     * class_id associated with the nft
     * </pre>
     *
     * <code>string class_id = 1 [json_name = "classId"];</code>
     */
    public var classId: kotlin.String
      @JvmName("getClassId")
      get() = _builder.getClassId()
      @JvmName("setClassId")
      set(value) {
        _builder.setClassId(value)
      }
    /**
     * <pre>
     * class_id associated with the nft
     * </pre>
     *
     * <code>string class_id = 1 [json_name = "classId"];</code>
     */
    public fun clearClassId() {
      _builder.clearClassId()
    }

    /**
     * <pre>
     * id is a unique identifier of the NFT
     * </pre>
     *
     * <code>string id = 2 [json_name = "id"];</code>
     */
    public var id: kotlin.String
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <pre>
     * id is a unique identifier of the NFT
     * </pre>
     *
     * <code>string id = 2 [json_name = "id"];</code>
     */
    public fun clearId() {
      _builder.clearId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.nft.v1beta1.QueryOuterClass.QueryNFTRequest.copy(block: cosmos.nft.v1beta1.QueryNFTRequestKt.Dsl.() -> kotlin.Unit): cosmos.nft.v1beta1.QueryOuterClass.QueryNFTRequest =
  cosmos.nft.v1beta1.QueryNFTRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

