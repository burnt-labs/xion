//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/tx/config/v1/config.proto

package cosmos.tx.config.v1;

@kotlin.jvm.JvmName("-initializeconfig")
public inline fun config(block: cosmos.tx.config.v1.ConfigKt.Dsl.() -> kotlin.Unit): cosmos.tx.config.v1.ConfigOuterClass.Config =
  cosmos.tx.config.v1.ConfigKt.Dsl._create(cosmos.tx.config.v1.ConfigOuterClass.Config.newBuilder()).apply { block() }._build()
public object ConfigKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.tx.config.v1.ConfigOuterClass.Config.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.tx.config.v1.ConfigOuterClass.Config.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.tx.config.v1.ConfigOuterClass.Config = _builder.build()

    /**
     * <pre>
     * skip_ante_handler defines whether the ante handler registration should be skipped in case an app wants to override
     * this functionality.
     * </pre>
     *
     * <code>bool skip_ante_handler = 1 [json_name = "skipAnteHandler"];</code>
     */
    public var skipAnteHandler: kotlin.Boolean
      @JvmName("getSkipAnteHandler")
      get() = _builder.getSkipAnteHandler()
      @JvmName("setSkipAnteHandler")
      set(value) {
        _builder.setSkipAnteHandler(value)
      }
    /**
     * <pre>
     * skip_ante_handler defines whether the ante handler registration should be skipped in case an app wants to override
     * this functionality.
     * </pre>
     *
     * <code>bool skip_ante_handler = 1 [json_name = "skipAnteHandler"];</code>
     */
    public fun clearSkipAnteHandler() {
      _builder.clearSkipAnteHandler()
    }

    /**
     * <pre>
     * skip_post_handler defines whether the post handler registration should be skipped in case an app wants to override
     * this functionality.
     * </pre>
     *
     * <code>bool skip_post_handler = 2 [json_name = "skipPostHandler"];</code>
     */
    public var skipPostHandler: kotlin.Boolean
      @JvmName("getSkipPostHandler")
      get() = _builder.getSkipPostHandler()
      @JvmName("setSkipPostHandler")
      set(value) {
        _builder.setSkipPostHandler(value)
      }
    /**
     * <pre>
     * skip_post_handler defines whether the post handler registration should be skipped in case an app wants to override
     * this functionality.
     * </pre>
     *
     * <code>bool skip_post_handler = 2 [json_name = "skipPostHandler"];</code>
     */
    public fun clearSkipPostHandler() {
      _builder.clearSkipPostHandler()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.tx.config.v1.ConfigOuterClass.Config.copy(block: cosmos.tx.config.v1.ConfigKt.Dsl.() -> kotlin.Unit): cosmos.tx.config.v1.ConfigOuterClass.Config =
  cosmos.tx.config.v1.ConfigKt.Dsl._create(this.toBuilder()).apply { block() }._build()

