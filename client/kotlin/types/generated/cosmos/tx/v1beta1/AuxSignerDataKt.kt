//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/tx/v1beta1/tx.proto

package cosmos.tx.v1beta1;

@kotlin.jvm.JvmName("-initializeauxSignerData")
public inline fun auxSignerData(block: cosmos.tx.v1beta1.AuxSignerDataKt.Dsl.() -> kotlin.Unit): cosmos.tx.v1beta1.TxOuterClass.AuxSignerData =
  cosmos.tx.v1beta1.AuxSignerDataKt.Dsl._create(cosmos.tx.v1beta1.TxOuterClass.AuxSignerData.newBuilder()).apply { block() }._build()
public object AuxSignerDataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.tx.v1beta1.TxOuterClass.AuxSignerData.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.tx.v1beta1.TxOuterClass.AuxSignerData.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.tx.v1beta1.TxOuterClass.AuxSignerData = _builder.build()

    /**
     * <pre>
     * address is the bech32-encoded address of the auxiliary signer. If using
     * AuxSignerData across different chains, the bech32 prefix of the target
     * chain (where the final transaction is broadcasted) should be used.
     * </pre>
     *
     * <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     */
    public var address: kotlin.String
      @JvmName("getAddress")
      get() = _builder.getAddress()
      @JvmName("setAddress")
      set(value) {
        _builder.setAddress(value)
      }
    /**
     * <pre>
     * address is the bech32-encoded address of the auxiliary signer. If using
     * AuxSignerData across different chains, the bech32 prefix of the target
     * chain (where the final transaction is broadcasted) should be used.
     * </pre>
     *
     * <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     */
    public fun clearAddress() {
      _builder.clearAddress()
    }

    /**
     * <pre>
     * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
     * signs. Note: we use the same sign doc even if we're signing with
     * LEGACY_AMINO_JSON.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
     */
    public var signDoc: cosmos.tx.v1beta1.TxOuterClass.SignDocDirectAux
      @JvmName("getSignDoc")
      get() = _builder.getSignDoc()
      @JvmName("setSignDoc")
      set(value) {
        _builder.setSignDoc(value)
      }
    /**
     * <pre>
     * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
     * signs. Note: we use the same sign doc even if we're signing with
     * LEGACY_AMINO_JSON.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
     */
    public fun clearSignDoc() {
      _builder.clearSignDoc()
    }
    /**
     * <pre>
     * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
     * signs. Note: we use the same sign doc even if we're signing with
     * LEGACY_AMINO_JSON.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
     * @return Whether the signDoc field is set.
     */
    public fun hasSignDoc(): kotlin.Boolean {
      return _builder.hasSignDoc()
    }

    /**
     * <pre>
     * mode is the signing mode of the single signer.
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];</code>
     */
    public var mode: cosmos.tx.signing.v1beta1.Signing.SignMode
      @JvmName("getMode")
      get() = _builder.getMode()
      @JvmName("setMode")
      set(value) {
        _builder.setMode(value)
      }
    /**
     * <pre>
     * mode is the signing mode of the single signer.
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];</code>
     */
    public fun clearMode() {
      _builder.clearMode()
    }

    /**
     * <pre>
     * sig is the signature of the sign doc.
     * </pre>
     *
     * <code>bytes sig = 4 [json_name = "sig"];</code>
     */
    public var sig: com.google.protobuf.ByteString
      @JvmName("getSig")
      get() = _builder.getSig()
      @JvmName("setSig")
      set(value) {
        _builder.setSig(value)
      }
    /**
     * <pre>
     * sig is the signature of the sign doc.
     * </pre>
     *
     * <code>bytes sig = 4 [json_name = "sig"];</code>
     */
    public fun clearSig() {
      _builder.clearSig()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.tx.v1beta1.TxOuterClass.AuxSignerData.copy(block: cosmos.tx.v1beta1.AuxSignerDataKt.Dsl.() -> kotlin.Unit): cosmos.tx.v1beta1.TxOuterClass.AuxSignerData =
  cosmos.tx.v1beta1.AuxSignerDataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.tx.v1beta1.TxOuterClass.AuxSignerDataOrBuilder.signDocOrNull: cosmos.tx.v1beta1.TxOuterClass.SignDocDirectAux?
  get() = if (hasSignDoc()) getSignDoc() else null

