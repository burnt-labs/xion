//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/tx/v1beta1/tx.proto

package cosmos.tx.v1beta1;

@kotlin.jvm.JvmName("-initializemodeInfo")
public inline fun modeInfo(block: cosmos.tx.v1beta1.ModeInfoKt.Dsl.() -> kotlin.Unit): cosmos.tx.v1beta1.TxOuterClass.ModeInfo =
  cosmos.tx.v1beta1.ModeInfoKt.Dsl._create(cosmos.tx.v1beta1.TxOuterClass.ModeInfo.newBuilder()).apply { block() }._build()
public object ModeInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.tx.v1beta1.TxOuterClass.ModeInfo = _builder.build()

    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];</code>
     */
    public var single: cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Single
      @JvmName("getSingle")
      get() = _builder.getSingle()
      @JvmName("setSingle")
      set(value) {
        _builder.setSingle(value)
      }
    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];</code>
     */
    public fun clearSingle() {
      _builder.clearSingle()
    }
    /**
     * <pre>
     * single represents a single signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];</code>
     * @return Whether the single field is set.
     */
    public fun hasSingle(): kotlin.Boolean {
      return _builder.hasSingle()
    }

    /**
     * <pre>
     * multi represents a nested multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];</code>
     */
    public var multi: cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Multi
      @JvmName("getMulti")
      get() = _builder.getMulti()
      @JvmName("setMulti")
      set(value) {
        _builder.setMulti(value)
      }
    /**
     * <pre>
     * multi represents a nested multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];</code>
     */
    public fun clearMulti() {
      _builder.clearMulti()
    }
    /**
     * <pre>
     * multi represents a nested multisig signer
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];</code>
     * @return Whether the multi field is set.
     */
    public fun hasMulti(): kotlin.Boolean {
      return _builder.hasMulti()
    }
    public val sumCase: cosmos.tx.v1beta1.TxOuterClass.ModeInfo.SumCase
      @JvmName("getSumCase")
      get() = _builder.getSumCase()

    public fun clearSum() {
      _builder.clearSum()
    }
  }
  @kotlin.jvm.JvmName("-initializesingle")
  public inline fun single(block: cosmos.tx.v1beta1.ModeInfoKt.SingleKt.Dsl.() -> kotlin.Unit): cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Single =
    cosmos.tx.v1beta1.ModeInfoKt.SingleKt.Dsl._create(cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Single.newBuilder()).apply { block() }._build()
  public object SingleKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Single.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Single.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Single = _builder.build()

      /**
       * <pre>
       * mode is the signing mode of the single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
       */
      public var mode: cosmos.tx.signing.v1beta1.Signing.SignMode
        @JvmName("getMode")
        get() = _builder.getMode()
        @JvmName("setMode")
        set(value) {
          _builder.setMode(value)
        }
      /**
       * <pre>
       * mode is the signing mode of the single signer
       * </pre>
       *
       * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];</code>
       */
      public fun clearMode() {
        _builder.clearMode()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializemulti")
  public inline fun multi(block: cosmos.tx.v1beta1.ModeInfoKt.MultiKt.Dsl.() -> kotlin.Unit): cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Multi =
    cosmos.tx.v1beta1.ModeInfoKt.MultiKt.Dsl._create(cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Multi.newBuilder()).apply { block() }._build()
  public object MultiKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Multi.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Multi.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Multi = _builder.build()

      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       */
      public var bitarray: cosmos.crypto.multisig.v1beta1.Multisig.CompactBitArray
        @JvmName("getBitarray")
        get() = _builder.getBitarray()
        @JvmName("setBitarray")
        set(value) {
          _builder.setBitarray(value)
        }
      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       */
      public fun clearBitarray() {
        _builder.clearBitarray()
      }
      /**
       * <pre>
       * bitarray specifies which keys within the multisig are signing
       * </pre>
       *
       * <code>.cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];</code>
       * @return Whether the bitarray field is set.
       */
      public fun hasBitarray(): kotlin.Boolean {
        return _builder.hasBitarray()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      public class ModeInfosProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
       public val modeInfos: com.google.protobuf.kotlin.DslList<cosmos.tx.v1beta1.TxOuterClass.ModeInfo, ModeInfosProxy>
        @kotlin.jvm.JvmSynthetic
        get() = com.google.protobuf.kotlin.DslList(
          _builder.getModeInfosList()
        )
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       * @param value The modeInfos to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addModeInfos")
      public fun com.google.protobuf.kotlin.DslList<cosmos.tx.v1beta1.TxOuterClass.ModeInfo, ModeInfosProxy>.add(value: cosmos.tx.v1beta1.TxOuterClass.ModeInfo) {
        _builder.addModeInfos(value)
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       * @param value The modeInfos to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignModeInfos")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.tx.v1beta1.TxOuterClass.ModeInfo, ModeInfosProxy>.plusAssign(value: cosmos.tx.v1beta1.TxOuterClass.ModeInfo) {
        add(value)
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       * @param values The modeInfos to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("addAllModeInfos")
      public fun com.google.protobuf.kotlin.DslList<cosmos.tx.v1beta1.TxOuterClass.ModeInfo, ModeInfosProxy>.addAll(values: kotlin.collections.Iterable<cosmos.tx.v1beta1.TxOuterClass.ModeInfo>) {
        _builder.addAllModeInfos(values)
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       * @param values The modeInfos to add.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("plusAssignAllModeInfos")
      @Suppress("NOTHING_TO_INLINE")
      public inline operator fun com.google.protobuf.kotlin.DslList<cosmos.tx.v1beta1.TxOuterClass.ModeInfo, ModeInfosProxy>.plusAssign(values: kotlin.collections.Iterable<cosmos.tx.v1beta1.TxOuterClass.ModeInfo>) {
        addAll(values)
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       * @param index The index to set the value at.
       * @param value The modeInfos to set.
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("setModeInfos")
      public operator fun com.google.protobuf.kotlin.DslList<cosmos.tx.v1beta1.TxOuterClass.ModeInfo, ModeInfosProxy>.set(index: kotlin.Int, value: cosmos.tx.v1beta1.TxOuterClass.ModeInfo) {
        _builder.setModeInfos(index, value)
      }
      /**
       * <pre>
       * mode_infos is the corresponding modes of the signers of the multisig
       * which could include nested multisig public keys
       * </pre>
       *
       * <code>repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];</code>
       */
      @kotlin.jvm.JvmSynthetic
      @kotlin.jvm.JvmName("clearModeInfos")
      public fun com.google.protobuf.kotlin.DslList<cosmos.tx.v1beta1.TxOuterClass.ModeInfo, ModeInfosProxy>.clear() {
        _builder.clearModeInfos()
      }

    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.tx.v1beta1.TxOuterClass.ModeInfo.copy(block: cosmos.tx.v1beta1.ModeInfoKt.Dsl.() -> kotlin.Unit): cosmos.tx.v1beta1.TxOuterClass.ModeInfo =
  cosmos.tx.v1beta1.ModeInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Single.copy(block: cosmos.tx.v1beta1.ModeInfoKt.SingleKt.Dsl.() -> kotlin.Unit): cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Single =
  cosmos.tx.v1beta1.ModeInfoKt.SingleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Multi.copy(block: cosmos.tx.v1beta1.ModeInfoKt.MultiKt.Dsl.() -> kotlin.Unit): cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Multi =
  cosmos.tx.v1beta1.ModeInfoKt.MultiKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.tx.v1beta1.TxOuterClass.ModeInfo.MultiOrBuilder.bitarrayOrNull: cosmos.crypto.multisig.v1beta1.Multisig.CompactBitArray?
  get() = if (hasBitarray()) getBitarray() else null

public val cosmos.tx.v1beta1.TxOuterClass.ModeInfoOrBuilder.singleOrNull: cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Single?
  get() = if (hasSingle()) getSingle() else null

public val cosmos.tx.v1beta1.TxOuterClass.ModeInfoOrBuilder.multiOrNull: cosmos.tx.v1beta1.TxOuterClass.ModeInfo.Multi?
  get() = if (hasMulti()) getMulti() else null

