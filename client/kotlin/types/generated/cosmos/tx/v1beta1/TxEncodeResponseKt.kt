//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/tx/v1beta1/service.proto

package cosmos.tx.v1beta1;

@kotlin.jvm.JvmName("-initializetxEncodeResponse")
public inline fun txEncodeResponse(block: cosmos.tx.v1beta1.TxEncodeResponseKt.Dsl.() -> kotlin.Unit): cosmos.tx.v1beta1.ServiceOuterClass.TxEncodeResponse =
  cosmos.tx.v1beta1.TxEncodeResponseKt.Dsl._create(cosmos.tx.v1beta1.ServiceOuterClass.TxEncodeResponse.newBuilder()).apply { block() }._build()
public object TxEncodeResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.tx.v1beta1.ServiceOuterClass.TxEncodeResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.tx.v1beta1.ServiceOuterClass.TxEncodeResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.tx.v1beta1.ServiceOuterClass.TxEncodeResponse = _builder.build()

    /**
     * <pre>
     * tx_bytes is the encoded transaction bytes.
     * </pre>
     *
     * <code>bytes tx_bytes = 1 [json_name = "txBytes"];</code>
     */
    public var txBytes: com.google.protobuf.ByteString
      @JvmName("getTxBytes")
      get() = _builder.getTxBytes()
      @JvmName("setTxBytes")
      set(value) {
        _builder.setTxBytes(value)
      }
    /**
     * <pre>
     * tx_bytes is the encoded transaction bytes.
     * </pre>
     *
     * <code>bytes tx_bytes = 1 [json_name = "txBytes"];</code>
     */
    public fun clearTxBytes() {
      _builder.clearTxBytes()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.tx.v1beta1.ServiceOuterClass.TxEncodeResponse.copy(block: cosmos.tx.v1beta1.TxEncodeResponseKt.Dsl.() -> kotlin.Unit): cosmos.tx.v1beta1.ServiceOuterClass.TxEncodeResponse =
  cosmos.tx.v1beta1.TxEncodeResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

