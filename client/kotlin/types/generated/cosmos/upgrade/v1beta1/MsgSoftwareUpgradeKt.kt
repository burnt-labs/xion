//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/upgrade/v1beta1/tx.proto

package cosmos.upgrade.v1beta1;

@kotlin.jvm.JvmName("-initializemsgSoftwareUpgrade")
public inline fun msgSoftwareUpgrade(block: cosmos.upgrade.v1beta1.MsgSoftwareUpgradeKt.Dsl.() -> kotlin.Unit): cosmos.upgrade.v1beta1.Tx.MsgSoftwareUpgrade =
  cosmos.upgrade.v1beta1.MsgSoftwareUpgradeKt.Dsl._create(cosmos.upgrade.v1beta1.Tx.MsgSoftwareUpgrade.newBuilder()).apply { block() }._build()
public object MsgSoftwareUpgradeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.upgrade.v1beta1.Tx.MsgSoftwareUpgrade.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.upgrade.v1beta1.Tx.MsgSoftwareUpgrade.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.upgrade.v1beta1.Tx.MsgSoftwareUpgrade = _builder.build()

    /**
     * <pre>
     * authority is the address that controls the module (defaults to x/gov unless overwritten).
     * </pre>
     *
     * <code>string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     */
    public var authority: kotlin.String
      @JvmName("getAuthority")
      get() = _builder.getAuthority()
      @JvmName("setAuthority")
      set(value) {
        _builder.setAuthority(value)
      }
    /**
     * <pre>
     * authority is the address that controls the module (defaults to x/gov unless overwritten).
     * </pre>
     *
     * <code>string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     */
    public fun clearAuthority() {
      _builder.clearAuthority()
    }

    /**
     * <pre>
     * plan is the upgrade plan.
     * </pre>
     *
     * <code>.cosmos.upgrade.v1beta1.Plan plan = 2 [json_name = "plan", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     */
    public var plan: cosmos.upgrade.v1beta1.Upgrade.Plan
      @JvmName("getPlan")
      get() = _builder.getPlan()
      @JvmName("setPlan")
      set(value) {
        _builder.setPlan(value)
      }
    /**
     * <pre>
     * plan is the upgrade plan.
     * </pre>
     *
     * <code>.cosmos.upgrade.v1beta1.Plan plan = 2 [json_name = "plan", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     */
    public fun clearPlan() {
      _builder.clearPlan()
    }
    /**
     * <pre>
     * plan is the upgrade plan.
     * </pre>
     *
     * <code>.cosmos.upgrade.v1beta1.Plan plan = 2 [json_name = "plan", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     * @return Whether the plan field is set.
     */
    public fun hasPlan(): kotlin.Boolean {
      return _builder.hasPlan()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.upgrade.v1beta1.Tx.MsgSoftwareUpgrade.copy(block: cosmos.upgrade.v1beta1.MsgSoftwareUpgradeKt.Dsl.() -> kotlin.Unit): cosmos.upgrade.v1beta1.Tx.MsgSoftwareUpgrade =
  cosmos.upgrade.v1beta1.MsgSoftwareUpgradeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.upgrade.v1beta1.Tx.MsgSoftwareUpgradeOrBuilder.planOrNull: cosmos.upgrade.v1beta1.Upgrade.Plan?
  get() = if (hasPlan()) getPlan() else null

