//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/upgrade/v1beta1/query.proto

package cosmos.upgrade.v1beta1;

@kotlin.jvm.JvmName("-initializequeryCurrentPlanResponse")
public inline fun queryCurrentPlanResponse(block: cosmos.upgrade.v1beta1.QueryCurrentPlanResponseKt.Dsl.() -> kotlin.Unit): cosmos.upgrade.v1beta1.QueryOuterClass.QueryCurrentPlanResponse =
  cosmos.upgrade.v1beta1.QueryCurrentPlanResponseKt.Dsl._create(cosmos.upgrade.v1beta1.QueryOuterClass.QueryCurrentPlanResponse.newBuilder()).apply { block() }._build()
public object QueryCurrentPlanResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.upgrade.v1beta1.QueryOuterClass.QueryCurrentPlanResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.upgrade.v1beta1.QueryOuterClass.QueryCurrentPlanResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.upgrade.v1beta1.QueryOuterClass.QueryCurrentPlanResponse = _builder.build()

    /**
     * <pre>
     * plan is the current upgrade plan.
     * </pre>
     *
     * <code>.cosmos.upgrade.v1beta1.Plan plan = 1 [json_name = "plan"];</code>
     */
    public var plan: cosmos.upgrade.v1beta1.Upgrade.Plan
      @JvmName("getPlan")
      get() = _builder.getPlan()
      @JvmName("setPlan")
      set(value) {
        _builder.setPlan(value)
      }
    /**
     * <pre>
     * plan is the current upgrade plan.
     * </pre>
     *
     * <code>.cosmos.upgrade.v1beta1.Plan plan = 1 [json_name = "plan"];</code>
     */
    public fun clearPlan() {
      _builder.clearPlan()
    }
    /**
     * <pre>
     * plan is the current upgrade plan.
     * </pre>
     *
     * <code>.cosmos.upgrade.v1beta1.Plan plan = 1 [json_name = "plan"];</code>
     * @return Whether the plan field is set.
     */
    public fun hasPlan(): kotlin.Boolean {
      return _builder.hasPlan()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.upgrade.v1beta1.QueryOuterClass.QueryCurrentPlanResponse.copy(block: cosmos.upgrade.v1beta1.QueryCurrentPlanResponseKt.Dsl.() -> kotlin.Unit): cosmos.upgrade.v1beta1.QueryOuterClass.QueryCurrentPlanResponse =
  cosmos.upgrade.v1beta1.QueryCurrentPlanResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.upgrade.v1beta1.QueryOuterClass.QueryCurrentPlanResponseOrBuilder.planOrNull: cosmos.upgrade.v1beta1.Upgrade.Plan?
  get() = if (hasPlan()) getPlan() else null

