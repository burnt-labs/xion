//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmos/vesting/v1beta1/vesting.proto

package cosmos.vesting.v1beta1;

@kotlin.jvm.JvmName("-initializepermanentLockedAccount")
public inline fun permanentLockedAccount(block: cosmos.vesting.v1beta1.PermanentLockedAccountKt.Dsl.() -> kotlin.Unit): cosmos.vesting.v1beta1.Vesting.PermanentLockedAccount =
  cosmos.vesting.v1beta1.PermanentLockedAccountKt.Dsl._create(cosmos.vesting.v1beta1.Vesting.PermanentLockedAccount.newBuilder()).apply { block() }._build()
public object PermanentLockedAccountKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmos.vesting.v1beta1.Vesting.PermanentLockedAccount.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmos.vesting.v1beta1.Vesting.PermanentLockedAccount.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmos.vesting.v1beta1.Vesting.PermanentLockedAccount = _builder.build()

    /**
     * <code>.cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];</code>
     */
    public var baseVestingAccount: cosmos.vesting.v1beta1.Vesting.BaseVestingAccount
      @JvmName("getBaseVestingAccount")
      get() = _builder.getBaseVestingAccount()
      @JvmName("setBaseVestingAccount")
      set(value) {
        _builder.setBaseVestingAccount(value)
      }
    /**
     * <code>.cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];</code>
     */
    public fun clearBaseVestingAccount() {
      _builder.clearBaseVestingAccount()
    }
    /**
     * <code>.cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];</code>
     * @return Whether the baseVestingAccount field is set.
     */
    public fun hasBaseVestingAccount(): kotlin.Boolean {
      return _builder.hasBaseVestingAccount()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmos.vesting.v1beta1.Vesting.PermanentLockedAccount.copy(block: cosmos.vesting.v1beta1.PermanentLockedAccountKt.Dsl.() -> kotlin.Unit): cosmos.vesting.v1beta1.Vesting.PermanentLockedAccount =
  cosmos.vesting.v1beta1.PermanentLockedAccountKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmos.vesting.v1beta1.Vesting.PermanentLockedAccountOrBuilder.baseVestingAccountOrNull: cosmos.vesting.v1beta1.Vesting.BaseVestingAccount?
  get() = if (hasBaseVestingAccount()) getBaseVestingAccount() else null

