//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmwasm/wasm/v1/proposal_legacy.proto

package cosmwasm.wasm.v1;

@kotlin.jvm.JvmName("-initializeaccessConfigUpdate")
public inline fun accessConfigUpdate(block: cosmwasm.wasm.v1.AccessConfigUpdateKt.Dsl.() -> kotlin.Unit): cosmwasm.wasm.v1.ProposalLegacy.AccessConfigUpdate =
  cosmwasm.wasm.v1.AccessConfigUpdateKt.Dsl._create(cosmwasm.wasm.v1.ProposalLegacy.AccessConfigUpdate.newBuilder()).apply { block() }._build()
public object AccessConfigUpdateKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmwasm.wasm.v1.ProposalLegacy.AccessConfigUpdate.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmwasm.wasm.v1.ProposalLegacy.AccessConfigUpdate.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmwasm.wasm.v1.ProposalLegacy.AccessConfigUpdate = _builder.build()

    /**
     * <pre>
     * CodeID is the reference to the stored WASM code to be updated
     * </pre>
     *
     * <code>uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];</code>
     */
    public var codeId: kotlin.Long
      @JvmName("getCodeId")
      get() = _builder.getCodeId()
      @JvmName("setCodeId")
      set(value) {
        _builder.setCodeId(value)
      }
    /**
     * <pre>
     * CodeID is the reference to the stored WASM code to be updated
     * </pre>
     *
     * <code>uint64 code_id = 1 [json_name = "codeId", (.gogoproto.customname) = "CodeID"];</code>
     */
    public fun clearCodeId() {
      _builder.clearCodeId()
    }

    /**
     * <pre>
     * InstantiatePermission to apply to the set of code ids
     * </pre>
     *
     * <code>.cosmwasm.wasm.v1.AccessConfig instantiate_permission = 2 [json_name = "instantiatePermission", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     */
    public var instantiatePermission: cosmwasm.wasm.v1.Types.AccessConfig
      @JvmName("getInstantiatePermission")
      get() = _builder.getInstantiatePermission()
      @JvmName("setInstantiatePermission")
      set(value) {
        _builder.setInstantiatePermission(value)
      }
    /**
     * <pre>
     * InstantiatePermission to apply to the set of code ids
     * </pre>
     *
     * <code>.cosmwasm.wasm.v1.AccessConfig instantiate_permission = 2 [json_name = "instantiatePermission", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     */
    public fun clearInstantiatePermission() {
      _builder.clearInstantiatePermission()
    }
    /**
     * <pre>
     * InstantiatePermission to apply to the set of code ids
     * </pre>
     *
     * <code>.cosmwasm.wasm.v1.AccessConfig instantiate_permission = 2 [json_name = "instantiatePermission", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];</code>
     * @return Whether the instantiatePermission field is set.
     */
    public fun hasInstantiatePermission(): kotlin.Boolean {
      return _builder.hasInstantiatePermission()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmwasm.wasm.v1.ProposalLegacy.AccessConfigUpdate.copy(block: cosmwasm.wasm.v1.AccessConfigUpdateKt.Dsl.() -> kotlin.Unit): cosmwasm.wasm.v1.ProposalLegacy.AccessConfigUpdate =
  cosmwasm.wasm.v1.AccessConfigUpdateKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmwasm.wasm.v1.ProposalLegacy.AccessConfigUpdateOrBuilder.instantiatePermissionOrNull: cosmwasm.wasm.v1.Types.AccessConfig?
  get() = if (hasInstantiatePermission()) getInstantiatePermission() else null

