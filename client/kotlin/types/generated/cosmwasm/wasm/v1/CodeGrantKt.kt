//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmwasm/wasm/v1/authz.proto

package cosmwasm.wasm.v1;

@kotlin.jvm.JvmName("-initializecodeGrant")
public inline fun codeGrant(block: cosmwasm.wasm.v1.CodeGrantKt.Dsl.() -> kotlin.Unit): cosmwasm.wasm.v1.Authz.CodeGrant =
  cosmwasm.wasm.v1.CodeGrantKt.Dsl._create(cosmwasm.wasm.v1.Authz.CodeGrant.newBuilder()).apply { block() }._build()
public object CodeGrantKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmwasm.wasm.v1.Authz.CodeGrant.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmwasm.wasm.v1.Authz.CodeGrant.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmwasm.wasm.v1.Authz.CodeGrant = _builder.build()

    /**
     * <pre>
     * CodeHash is the unique identifier created by wasmvm
     * Wildcard "*" is used to specify any kind of grant.
     * </pre>
     *
     * <code>bytes code_hash = 1 [json_name = "codeHash"];</code>
     */
    public var codeHash: com.google.protobuf.ByteString
      @JvmName("getCodeHash")
      get() = _builder.getCodeHash()
      @JvmName("setCodeHash")
      set(value) {
        _builder.setCodeHash(value)
      }
    /**
     * <pre>
     * CodeHash is the unique identifier created by wasmvm
     * Wildcard "*" is used to specify any kind of grant.
     * </pre>
     *
     * <code>bytes code_hash = 1 [json_name = "codeHash"];</code>
     */
    public fun clearCodeHash() {
      _builder.clearCodeHash()
    }

    /**
     * <pre>
     * InstantiatePermission is the superset access control to apply
     * on contract creation.
     * Optional
     * </pre>
     *
     * <code>.cosmwasm.wasm.v1.AccessConfig instantiate_permission = 2 [json_name = "instantiatePermission"];</code>
     */
    public var instantiatePermission: cosmwasm.wasm.v1.Types.AccessConfig
      @JvmName("getInstantiatePermission")
      get() = _builder.getInstantiatePermission()
      @JvmName("setInstantiatePermission")
      set(value) {
        _builder.setInstantiatePermission(value)
      }
    /**
     * <pre>
     * InstantiatePermission is the superset access control to apply
     * on contract creation.
     * Optional
     * </pre>
     *
     * <code>.cosmwasm.wasm.v1.AccessConfig instantiate_permission = 2 [json_name = "instantiatePermission"];</code>
     */
    public fun clearInstantiatePermission() {
      _builder.clearInstantiatePermission()
    }
    /**
     * <pre>
     * InstantiatePermission is the superset access control to apply
     * on contract creation.
     * Optional
     * </pre>
     *
     * <code>.cosmwasm.wasm.v1.AccessConfig instantiate_permission = 2 [json_name = "instantiatePermission"];</code>
     * @return Whether the instantiatePermission field is set.
     */
    public fun hasInstantiatePermission(): kotlin.Boolean {
      return _builder.hasInstantiatePermission()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmwasm.wasm.v1.Authz.CodeGrant.copy(block: cosmwasm.wasm.v1.CodeGrantKt.Dsl.() -> kotlin.Unit): cosmwasm.wasm.v1.Authz.CodeGrant =
  cosmwasm.wasm.v1.CodeGrantKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmwasm.wasm.v1.Authz.CodeGrantOrBuilder.instantiatePermissionOrNull: cosmwasm.wasm.v1.Types.AccessConfig?
  get() = if (hasInstantiatePermission()) getInstantiatePermission() else null

