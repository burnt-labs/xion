//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmwasm/wasm/v1/tx.proto

package cosmwasm.wasm.v1;

@kotlin.jvm.JvmName("-initializemsgStoreAndMigrateContract")
public inline fun msgStoreAndMigrateContract(block: cosmwasm.wasm.v1.MsgStoreAndMigrateContractKt.Dsl.() -> kotlin.Unit): cosmwasm.wasm.v1.Tx.MsgStoreAndMigrateContract =
  cosmwasm.wasm.v1.MsgStoreAndMigrateContractKt.Dsl._create(cosmwasm.wasm.v1.Tx.MsgStoreAndMigrateContract.newBuilder()).apply { block() }._build()
public object MsgStoreAndMigrateContractKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmwasm.wasm.v1.Tx.MsgStoreAndMigrateContract.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmwasm.wasm.v1.Tx.MsgStoreAndMigrateContract.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmwasm.wasm.v1.Tx.MsgStoreAndMigrateContract = _builder.build()

    /**
     * <pre>
     * Authority is the address of the governance account.
     * </pre>
     *
     * <code>string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     */
    public var authority: kotlin.String
      @JvmName("getAuthority")
      get() = _builder.getAuthority()
      @JvmName("setAuthority")
      set(value) {
        _builder.setAuthority(value)
      }
    /**
     * <pre>
     * Authority is the address of the governance account.
     * </pre>
     *
     * <code>string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     */
    public fun clearAuthority() {
      _builder.clearAuthority()
    }

    /**
     * <pre>
     * WASMByteCode can be raw or gzip compressed
     * </pre>
     *
     * <code>bytes wasm_byte_code = 2 [json_name = "wasmByteCode", (.gogoproto.customname) = "WASMByteCode"];</code>
     */
    public var wasmByteCode: com.google.protobuf.ByteString
      @JvmName("getWasmByteCode")
      get() = _builder.getWasmByteCode()
      @JvmName("setWasmByteCode")
      set(value) {
        _builder.setWasmByteCode(value)
      }
    /**
     * <pre>
     * WASMByteCode can be raw or gzip compressed
     * </pre>
     *
     * <code>bytes wasm_byte_code = 2 [json_name = "wasmByteCode", (.gogoproto.customname) = "WASMByteCode"];</code>
     */
    public fun clearWasmByteCode() {
      _builder.clearWasmByteCode()
    }

    /**
     * <pre>
     * InstantiatePermission to apply on contract creation, optional
     * </pre>
     *
     * <code>.cosmwasm.wasm.v1.AccessConfig instantiate_permission = 3 [json_name = "instantiatePermission"];</code>
     */
    public var instantiatePermission: cosmwasm.wasm.v1.Types.AccessConfig
      @JvmName("getInstantiatePermission")
      get() = _builder.getInstantiatePermission()
      @JvmName("setInstantiatePermission")
      set(value) {
        _builder.setInstantiatePermission(value)
      }
    /**
     * <pre>
     * InstantiatePermission to apply on contract creation, optional
     * </pre>
     *
     * <code>.cosmwasm.wasm.v1.AccessConfig instantiate_permission = 3 [json_name = "instantiatePermission"];</code>
     */
    public fun clearInstantiatePermission() {
      _builder.clearInstantiatePermission()
    }
    /**
     * <pre>
     * InstantiatePermission to apply on contract creation, optional
     * </pre>
     *
     * <code>.cosmwasm.wasm.v1.AccessConfig instantiate_permission = 3 [json_name = "instantiatePermission"];</code>
     * @return Whether the instantiatePermission field is set.
     */
    public fun hasInstantiatePermission(): kotlin.Boolean {
      return _builder.hasInstantiatePermission()
    }

    /**
     * <pre>
     * Contract is the address of the smart contract
     * </pre>
     *
     * <code>string contract = 4 [json_name = "contract"];</code>
     */
    public var contract: kotlin.String
      @JvmName("getContract")
      get() = _builder.getContract()
      @JvmName("setContract")
      set(value) {
        _builder.setContract(value)
      }
    /**
     * <pre>
     * Contract is the address of the smart contract
     * </pre>
     *
     * <code>string contract = 4 [json_name = "contract"];</code>
     */
    public fun clearContract() {
      _builder.clearContract()
    }

    /**
     * <pre>
     * Msg json encoded message to be passed to the contract on migration
     * </pre>
     *
     * <code>bytes msg = 5 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage", (.amino.encoding) = "inline_json"];</code>
     */
    public var msg: com.google.protobuf.ByteString
      @JvmName("getMsg")
      get() = _builder.getMsg()
      @JvmName("setMsg")
      set(value) {
        _builder.setMsg(value)
      }
    /**
     * <pre>
     * Msg json encoded message to be passed to the contract on migration
     * </pre>
     *
     * <code>bytes msg = 5 [json_name = "msg", (.gogoproto.casttype) = "RawContractMessage", (.amino.encoding) = "inline_json"];</code>
     */
    public fun clearMsg() {
      _builder.clearMsg()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmwasm.wasm.v1.Tx.MsgStoreAndMigrateContract.copy(block: cosmwasm.wasm.v1.MsgStoreAndMigrateContractKt.Dsl.() -> kotlin.Unit): cosmwasm.wasm.v1.Tx.MsgStoreAndMigrateContract =
  cosmwasm.wasm.v1.MsgStoreAndMigrateContractKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmwasm.wasm.v1.Tx.MsgStoreAndMigrateContractOrBuilder.instantiatePermissionOrNull: cosmwasm.wasm.v1.Types.AccessConfig?
  get() = if (hasInstantiatePermission()) getInstantiatePermission() else null

