//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmwasm/wasm/v1/tx.proto

package cosmwasm.wasm.v1;

@kotlin.jvm.JvmName("-initializemsgStoreCode")
public inline fun msgStoreCode(block: cosmwasm.wasm.v1.MsgStoreCodeKt.Dsl.() -> kotlin.Unit): cosmwasm.wasm.v1.Tx.MsgStoreCode =
  cosmwasm.wasm.v1.MsgStoreCodeKt.Dsl._create(cosmwasm.wasm.v1.Tx.MsgStoreCode.newBuilder()).apply { block() }._build()
public object MsgStoreCodeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmwasm.wasm.v1.Tx.MsgStoreCode.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmwasm.wasm.v1.Tx.MsgStoreCode.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmwasm.wasm.v1.Tx.MsgStoreCode = _builder.build()

    /**
     * <pre>
     * Sender is the actor that signed the messages
     * </pre>
     *
     * <code>string sender = 1 [json_name = "sender", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     */
    public var sender: kotlin.String
      @JvmName("getSender")
      get() = _builder.getSender()
      @JvmName("setSender")
      set(value) {
        _builder.setSender(value)
      }
    /**
     * <pre>
     * Sender is the actor that signed the messages
     * </pre>
     *
     * <code>string sender = 1 [json_name = "sender", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     */
    public fun clearSender() {
      _builder.clearSender()
    }

    /**
     * <pre>
     * WASMByteCode can be raw or gzip compressed
     * </pre>
     *
     * <code>bytes wasm_byte_code = 2 [json_name = "wasmByteCode", (.gogoproto.customname) = "WASMByteCode"];</code>
     */
    public var wasmByteCode: com.google.protobuf.ByteString
      @JvmName("getWasmByteCode")
      get() = _builder.getWasmByteCode()
      @JvmName("setWasmByteCode")
      set(value) {
        _builder.setWasmByteCode(value)
      }
    /**
     * <pre>
     * WASMByteCode can be raw or gzip compressed
     * </pre>
     *
     * <code>bytes wasm_byte_code = 2 [json_name = "wasmByteCode", (.gogoproto.customname) = "WASMByteCode"];</code>
     */
    public fun clearWasmByteCode() {
      _builder.clearWasmByteCode()
    }

    /**
     * <pre>
     * InstantiatePermission access control to apply on contract creation,
     * optional
     * </pre>
     *
     * <code>.cosmwasm.wasm.v1.AccessConfig instantiate_permission = 5 [json_name = "instantiatePermission"];</code>
     */
    public var instantiatePermission: cosmwasm.wasm.v1.Types.AccessConfig
      @JvmName("getInstantiatePermission")
      get() = _builder.getInstantiatePermission()
      @JvmName("setInstantiatePermission")
      set(value) {
        _builder.setInstantiatePermission(value)
      }
    /**
     * <pre>
     * InstantiatePermission access control to apply on contract creation,
     * optional
     * </pre>
     *
     * <code>.cosmwasm.wasm.v1.AccessConfig instantiate_permission = 5 [json_name = "instantiatePermission"];</code>
     */
    public fun clearInstantiatePermission() {
      _builder.clearInstantiatePermission()
    }
    /**
     * <pre>
     * InstantiatePermission access control to apply on contract creation,
     * optional
     * </pre>
     *
     * <code>.cosmwasm.wasm.v1.AccessConfig instantiate_permission = 5 [json_name = "instantiatePermission"];</code>
     * @return Whether the instantiatePermission field is set.
     */
    public fun hasInstantiatePermission(): kotlin.Boolean {
      return _builder.hasInstantiatePermission()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmwasm.wasm.v1.Tx.MsgStoreCode.copy(block: cosmwasm.wasm.v1.MsgStoreCodeKt.Dsl.() -> kotlin.Unit): cosmwasm.wasm.v1.Tx.MsgStoreCode =
  cosmwasm.wasm.v1.MsgStoreCodeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmwasm.wasm.v1.Tx.MsgStoreCodeOrBuilder.instantiatePermissionOrNull: cosmwasm.wasm.v1.Types.AccessConfig?
  get() = if (hasInstantiatePermission()) getInstantiatePermission() else null

