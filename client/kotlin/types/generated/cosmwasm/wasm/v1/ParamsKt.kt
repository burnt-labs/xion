//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: cosmwasm/wasm/v1/types.proto

package cosmwasm.wasm.v1;

@kotlin.jvm.JvmName("-initializeparams")
public inline fun params(block: cosmwasm.wasm.v1.ParamsKt.Dsl.() -> kotlin.Unit): cosmwasm.wasm.v1.Types.Params =
  cosmwasm.wasm.v1.ParamsKt.Dsl._create(cosmwasm.wasm.v1.Types.Params.newBuilder()).apply { block() }._build()
public object ParamsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: cosmwasm.wasm.v1.Types.Params.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: cosmwasm.wasm.v1.Types.Params.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): cosmwasm.wasm.v1.Types.Params = _builder.build()

    /**
     * <code>.cosmwasm.wasm.v1.AccessConfig code_upload_access = 1 [json_name = "codeUploadAccess", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"code_upload_access&#92;"", (.amino.dont_omitempty) = true];</code>
     */
    public var codeUploadAccess: cosmwasm.wasm.v1.Types.AccessConfig
      @JvmName("getCodeUploadAccess")
      get() = _builder.getCodeUploadAccess()
      @JvmName("setCodeUploadAccess")
      set(value) {
        _builder.setCodeUploadAccess(value)
      }
    /**
     * <code>.cosmwasm.wasm.v1.AccessConfig code_upload_access = 1 [json_name = "codeUploadAccess", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"code_upload_access&#92;"", (.amino.dont_omitempty) = true];</code>
     */
    public fun clearCodeUploadAccess() {
      _builder.clearCodeUploadAccess()
    }
    /**
     * <code>.cosmwasm.wasm.v1.AccessConfig code_upload_access = 1 [json_name = "codeUploadAccess", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"code_upload_access&#92;"", (.amino.dont_omitempty) = true];</code>
     * @return Whether the codeUploadAccess field is set.
     */
    public fun hasCodeUploadAccess(): kotlin.Boolean {
      return _builder.hasCodeUploadAccess()
    }

    /**
     * <code>.cosmwasm.wasm.v1.AccessType instantiate_default_permission = 2 [json_name = "instantiateDefaultPermission", (.gogoproto.moretags) = "yaml:&#92;"instantiate_default_permission&#92;""];</code>
     */
    public var instantiateDefaultPermission: cosmwasm.wasm.v1.Types.AccessType
      @JvmName("getInstantiateDefaultPermission")
      get() = _builder.getInstantiateDefaultPermission()
      @JvmName("setInstantiateDefaultPermission")
      set(value) {
        _builder.setInstantiateDefaultPermission(value)
      }
    /**
     * <code>.cosmwasm.wasm.v1.AccessType instantiate_default_permission = 2 [json_name = "instantiateDefaultPermission", (.gogoproto.moretags) = "yaml:&#92;"instantiate_default_permission&#92;""];</code>
     */
    public fun clearInstantiateDefaultPermission() {
      _builder.clearInstantiateDefaultPermission()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun cosmwasm.wasm.v1.Types.Params.copy(block: cosmwasm.wasm.v1.ParamsKt.Dsl.() -> kotlin.Unit): cosmwasm.wasm.v1.Types.Params =
  cosmwasm.wasm.v1.ParamsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val cosmwasm.wasm.v1.Types.ParamsOrBuilder.codeUploadAccessOrNull: cosmwasm.wasm.v1.Types.AccessConfig?
  get() = if (hasCodeUploadAccess()) getCodeUploadAccess() else null

