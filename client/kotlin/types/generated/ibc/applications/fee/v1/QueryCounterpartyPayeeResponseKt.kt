//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: ibc/applications/fee/v1/query.proto

package ibc.applications.fee.v1;

@kotlin.jvm.JvmName("-initializequeryCounterpartyPayeeResponse")
public inline fun queryCounterpartyPayeeResponse(block: ibc.applications.fee.v1.QueryCounterpartyPayeeResponseKt.Dsl.() -> kotlin.Unit): ibc.applications.fee.v1.QueryOuterClass.QueryCounterpartyPayeeResponse =
  ibc.applications.fee.v1.QueryCounterpartyPayeeResponseKt.Dsl._create(ibc.applications.fee.v1.QueryOuterClass.QueryCounterpartyPayeeResponse.newBuilder()).apply { block() }._build()
public object QueryCounterpartyPayeeResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ibc.applications.fee.v1.QueryOuterClass.QueryCounterpartyPayeeResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ibc.applications.fee.v1.QueryOuterClass.QueryCounterpartyPayeeResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ibc.applications.fee.v1.QueryOuterClass.QueryCounterpartyPayeeResponse = _builder.build()

    /**
     * <pre>
     * the counterparty payee address used to compensate forward relaying
     * </pre>
     *
     * <code>string counterparty_payee = 1 [json_name = "counterpartyPayee"];</code>
     */
    public var counterpartyPayee: kotlin.String
      @JvmName("getCounterpartyPayee")
      get() = _builder.getCounterpartyPayee()
      @JvmName("setCounterpartyPayee")
      set(value) {
        _builder.setCounterpartyPayee(value)
      }
    /**
     * <pre>
     * the counterparty payee address used to compensate forward relaying
     * </pre>
     *
     * <code>string counterparty_payee = 1 [json_name = "counterpartyPayee"];</code>
     */
    public fun clearCounterpartyPayee() {
      _builder.clearCounterpartyPayee()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ibc.applications.fee.v1.QueryOuterClass.QueryCounterpartyPayeeResponse.copy(block: ibc.applications.fee.v1.QueryCounterpartyPayeeResponseKt.Dsl.() -> kotlin.Unit): ibc.applications.fee.v1.QueryOuterClass.QueryCounterpartyPayeeResponse =
  ibc.applications.fee.v1.QueryCounterpartyPayeeResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

