//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: ibc/core/connection/v1/connection.proto

package ibc.core.connection.v1;

@kotlin.jvm.JvmName("-initializecounterparty")
public inline fun counterparty(block: ibc.core.connection.v1.CounterpartyKt.Dsl.() -> kotlin.Unit): ibc.core.connection.v1.Connection.Counterparty =
  ibc.core.connection.v1.CounterpartyKt.Dsl._create(ibc.core.connection.v1.Connection.Counterparty.newBuilder()).apply { block() }._build()
public object CounterpartyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ibc.core.connection.v1.Connection.Counterparty.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ibc.core.connection.v1.Connection.Counterparty.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ibc.core.connection.v1.Connection.Counterparty = _builder.build()

    /**
     * <pre>
     * identifies the client on the counterparty chain associated with a given
     * connection.
     * </pre>
     *
     * <code>string client_id = 1 [json_name = "clientId"];</code>
     */
    public var clientId: kotlin.String
      @JvmName("getClientId")
      get() = _builder.getClientId()
      @JvmName("setClientId")
      set(value) {
        _builder.setClientId(value)
      }
    /**
     * <pre>
     * identifies the client on the counterparty chain associated with a given
     * connection.
     * </pre>
     *
     * <code>string client_id = 1 [json_name = "clientId"];</code>
     */
    public fun clearClientId() {
      _builder.clearClientId()
    }

    /**
     * <pre>
     * identifies the connection end on the counterparty chain associated with a
     * given connection.
     * </pre>
     *
     * <code>string connection_id = 2 [json_name = "connectionId"];</code>
     */
    public var connectionId: kotlin.String
      @JvmName("getConnectionId")
      get() = _builder.getConnectionId()
      @JvmName("setConnectionId")
      set(value) {
        _builder.setConnectionId(value)
      }
    /**
     * <pre>
     * identifies the connection end on the counterparty chain associated with a
     * given connection.
     * </pre>
     *
     * <code>string connection_id = 2 [json_name = "connectionId"];</code>
     */
    public fun clearConnectionId() {
      _builder.clearConnectionId()
    }

    /**
     * <pre>
     * commitment merkle prefix of the counterparty chain.
     * </pre>
     *
     * <code>.ibc.core.commitment.v1.MerklePrefix prefix = 3 [json_name = "prefix", (.gogoproto.nullable) = false];</code>
     */
    public var prefix: ibc.core.commitment.v1.Commitment.MerklePrefix
      @JvmName("getPrefix")
      get() = _builder.getPrefix()
      @JvmName("setPrefix")
      set(value) {
        _builder.setPrefix(value)
      }
    /**
     * <pre>
     * commitment merkle prefix of the counterparty chain.
     * </pre>
     *
     * <code>.ibc.core.commitment.v1.MerklePrefix prefix = 3 [json_name = "prefix", (.gogoproto.nullable) = false];</code>
     */
    public fun clearPrefix() {
      _builder.clearPrefix()
    }
    /**
     * <pre>
     * commitment merkle prefix of the counterparty chain.
     * </pre>
     *
     * <code>.ibc.core.commitment.v1.MerklePrefix prefix = 3 [json_name = "prefix", (.gogoproto.nullable) = false];</code>
     * @return Whether the prefix field is set.
     */
    public fun hasPrefix(): kotlin.Boolean {
      return _builder.hasPrefix()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ibc.core.connection.v1.Connection.Counterparty.copy(block: ibc.core.connection.v1.CounterpartyKt.Dsl.() -> kotlin.Unit): ibc.core.connection.v1.Connection.Counterparty =
  ibc.core.connection.v1.CounterpartyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val ibc.core.connection.v1.Connection.CounterpartyOrBuilder.prefixOrNull: ibc.core.commitment.v1.Commitment.MerklePrefix?
  get() = if (hasPrefix()) getPrefix() else null

