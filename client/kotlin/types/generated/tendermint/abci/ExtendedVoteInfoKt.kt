//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: tendermint/abci/types.proto

package tendermint.abci;

@kotlin.jvm.JvmName("-initializeextendedVoteInfo")
public inline fun extendedVoteInfo(block: tendermint.abci.ExtendedVoteInfoKt.Dsl.() -> kotlin.Unit): tendermint.abci.Types.ExtendedVoteInfo =
  tendermint.abci.ExtendedVoteInfoKt.Dsl._create(tendermint.abci.Types.ExtendedVoteInfo.newBuilder()).apply { block() }._build()
public object ExtendedVoteInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: tendermint.abci.Types.ExtendedVoteInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tendermint.abci.Types.ExtendedVoteInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tendermint.abci.Types.ExtendedVoteInfo = _builder.build()

    /**
     * <pre>
     * The validator that sent the vote.
     * </pre>
     *
     * <code>.tendermint.abci.Validator validator = 1 [json_name = "validator", (.gogoproto.nullable) = false];</code>
     */
    public var validator: tendermint.abci.Types.Validator
      @JvmName("getValidator")
      get() = _builder.getValidator()
      @JvmName("setValidator")
      set(value) {
        _builder.setValidator(value)
      }
    /**
     * <pre>
     * The validator that sent the vote.
     * </pre>
     *
     * <code>.tendermint.abci.Validator validator = 1 [json_name = "validator", (.gogoproto.nullable) = false];</code>
     */
    public fun clearValidator() {
      _builder.clearValidator()
    }
    /**
     * <pre>
     * The validator that sent the vote.
     * </pre>
     *
     * <code>.tendermint.abci.Validator validator = 1 [json_name = "validator", (.gogoproto.nullable) = false];</code>
     * @return Whether the validator field is set.
     */
    public fun hasValidator(): kotlin.Boolean {
      return _builder.hasValidator()
    }

    /**
     * <pre>
     * Non-deterministic extension provided by the sending validator's application.
     * </pre>
     *
     * <code>bytes vote_extension = 3 [json_name = "voteExtension"];</code>
     */
    public var voteExtension: com.google.protobuf.ByteString
      @JvmName("getVoteExtension")
      get() = _builder.getVoteExtension()
      @JvmName("setVoteExtension")
      set(value) {
        _builder.setVoteExtension(value)
      }
    /**
     * <pre>
     * Non-deterministic extension provided by the sending validator's application.
     * </pre>
     *
     * <code>bytes vote_extension = 3 [json_name = "voteExtension"];</code>
     */
    public fun clearVoteExtension() {
      _builder.clearVoteExtension()
    }

    /**
     * <pre>
     * Vote extension signature created by CometBFT
     * </pre>
     *
     * <code>bytes extension_signature = 4 [json_name = "extensionSignature"];</code>
     */
    public var extensionSignature: com.google.protobuf.ByteString
      @JvmName("getExtensionSignature")
      get() = _builder.getExtensionSignature()
      @JvmName("setExtensionSignature")
      set(value) {
        _builder.setExtensionSignature(value)
      }
    /**
     * <pre>
     * Vote extension signature created by CometBFT
     * </pre>
     *
     * <code>bytes extension_signature = 4 [json_name = "extensionSignature"];</code>
     */
    public fun clearExtensionSignature() {
      _builder.clearExtensionSignature()
    }

    /**
     * <pre>
     * block_id_flag indicates whether the validator voted for a block, nil, or did not vote at all
     * </pre>
     *
     * <code>.tendermint.types.BlockIDFlag block_id_flag = 5 [json_name = "blockIdFlag"];</code>
     */
    public var blockIdFlag: tendermint.types.ValidatorOuterClass.BlockIDFlag
      @JvmName("getBlockIdFlag")
      get() = _builder.getBlockIdFlag()
      @JvmName("setBlockIdFlag")
      set(value) {
        _builder.setBlockIdFlag(value)
      }
    /**
     * <pre>
     * block_id_flag indicates whether the validator voted for a block, nil, or did not vote at all
     * </pre>
     *
     * <code>.tendermint.types.BlockIDFlag block_id_flag = 5 [json_name = "blockIdFlag"];</code>
     */
    public fun clearBlockIdFlag() {
      _builder.clearBlockIdFlag()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun tendermint.abci.Types.ExtendedVoteInfo.copy(block: tendermint.abci.ExtendedVoteInfoKt.Dsl.() -> kotlin.Unit): tendermint.abci.Types.ExtendedVoteInfo =
  tendermint.abci.ExtendedVoteInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val tendermint.abci.Types.ExtendedVoteInfoOrBuilder.validatorOrNull: tendermint.abci.Types.Validator?
  get() = if (hasValidator()) getValidator() else null

