//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: tendermint/abci/types.proto

package tendermint.abci;

@kotlin.jvm.JvmName("-initializeresponseVerifyVoteExtension")
public inline fun responseVerifyVoteExtension(block: tendermint.abci.ResponseVerifyVoteExtensionKt.Dsl.() -> kotlin.Unit): tendermint.abci.Types.ResponseVerifyVoteExtension =
  tendermint.abci.ResponseVerifyVoteExtensionKt.Dsl._create(tendermint.abci.Types.ResponseVerifyVoteExtension.newBuilder()).apply { block() }._build()
public object ResponseVerifyVoteExtensionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: tendermint.abci.Types.ResponseVerifyVoteExtension.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tendermint.abci.Types.ResponseVerifyVoteExtension.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tendermint.abci.Types.ResponseVerifyVoteExtension = _builder.build()

    /**
     * <code>.tendermint.abci.ResponseVerifyVoteExtension.VerifyStatus status = 1 [json_name = "status"];</code>
     */
    public var status: tendermint.abci.Types.ResponseVerifyVoteExtension.VerifyStatus
      @JvmName("getStatus")
      get() = _builder.getStatus()
      @JvmName("setStatus")
      set(value) {
        _builder.setStatus(value)
      }
    /**
     * <code>.tendermint.abci.ResponseVerifyVoteExtension.VerifyStatus status = 1 [json_name = "status"];</code>
     */
    public fun clearStatus() {
      _builder.clearStatus()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun tendermint.abci.Types.ResponseVerifyVoteExtension.copy(block: tendermint.abci.ResponseVerifyVoteExtensionKt.Dsl.() -> kotlin.Unit): tendermint.abci.Types.ResponseVerifyVoteExtension =
  tendermint.abci.ResponseVerifyVoteExtensionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

