//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: tendermint/types/types.proto

package tendermint.types;

@kotlin.jvm.JvmName("-initializeblockMeta")
public inline fun blockMeta(block: tendermint.types.BlockMetaKt.Dsl.() -> kotlin.Unit): tendermint.types.Types.BlockMeta =
  tendermint.types.BlockMetaKt.Dsl._create(tendermint.types.Types.BlockMeta.newBuilder()).apply { block() }._build()
public object BlockMetaKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: tendermint.types.Types.BlockMeta.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tendermint.types.Types.BlockMeta.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tendermint.types.Types.BlockMeta = _builder.build()

    /**
     * <code>.tendermint.types.BlockID block_id = 1 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];</code>
     */
    public var blockId: tendermint.types.Types.BlockID
      @JvmName("getBlockId")
      get() = _builder.getBlockId()
      @JvmName("setBlockId")
      set(value) {
        _builder.setBlockId(value)
      }
    /**
     * <code>.tendermint.types.BlockID block_id = 1 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];</code>
     */
    public fun clearBlockId() {
      _builder.clearBlockId()
    }
    /**
     * <code>.tendermint.types.BlockID block_id = 1 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];</code>
     * @return Whether the blockId field is set.
     */
    public fun hasBlockId(): kotlin.Boolean {
      return _builder.hasBlockId()
    }

    /**
     * <code>int64 block_size = 2 [json_name = "blockSize"];</code>
     */
    public var blockSize: kotlin.Long
      @JvmName("getBlockSize")
      get() = _builder.getBlockSize()
      @JvmName("setBlockSize")
      set(value) {
        _builder.setBlockSize(value)
      }
    /**
     * <code>int64 block_size = 2 [json_name = "blockSize"];</code>
     */
    public fun clearBlockSize() {
      _builder.clearBlockSize()
    }

    /**
     * <code>.tendermint.types.Header header = 3 [json_name = "header", (.gogoproto.nullable) = false];</code>
     */
    public var header: tendermint.types.Types.Header
      @JvmName("getHeader")
      get() = _builder.getHeader()
      @JvmName("setHeader")
      set(value) {
        _builder.setHeader(value)
      }
    /**
     * <code>.tendermint.types.Header header = 3 [json_name = "header", (.gogoproto.nullable) = false];</code>
     */
    public fun clearHeader() {
      _builder.clearHeader()
    }
    /**
     * <code>.tendermint.types.Header header = 3 [json_name = "header", (.gogoproto.nullable) = false];</code>
     * @return Whether the header field is set.
     */
    public fun hasHeader(): kotlin.Boolean {
      return _builder.hasHeader()
    }

    /**
     * <code>int64 num_txs = 4 [json_name = "numTxs"];</code>
     */
    public var numTxs: kotlin.Long
      @JvmName("getNumTxs")
      get() = _builder.getNumTxs()
      @JvmName("setNumTxs")
      set(value) {
        _builder.setNumTxs(value)
      }
    /**
     * <code>int64 num_txs = 4 [json_name = "numTxs"];</code>
     */
    public fun clearNumTxs() {
      _builder.clearNumTxs()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun tendermint.types.Types.BlockMeta.copy(block: tendermint.types.BlockMetaKt.Dsl.() -> kotlin.Unit): tendermint.types.Types.BlockMeta =
  tendermint.types.BlockMetaKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val tendermint.types.Types.BlockMetaOrBuilder.blockIdOrNull: tendermint.types.Types.BlockID?
  get() = if (hasBlockId()) getBlockId() else null

public val tendermint.types.Types.BlockMetaOrBuilder.headerOrNull: tendermint.types.Types.Header?
  get() = if (hasHeader()) getHeader() else null

