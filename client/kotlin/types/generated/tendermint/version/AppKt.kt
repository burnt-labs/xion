//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: tendermint/version/types.proto

package tendermint.version;

@kotlin.jvm.JvmName("-initializeapp")
public inline fun app(block: tendermint.version.AppKt.Dsl.() -> kotlin.Unit): tendermint.version.Types.App =
  tendermint.version.AppKt.Dsl._create(tendermint.version.Types.App.newBuilder()).apply { block() }._build()
public object AppKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: tendermint.version.Types.App.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: tendermint.version.Types.App.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): tendermint.version.Types.App = _builder.build()

    /**
     * <code>uint64 protocol = 1 [json_name = "protocol"];</code>
     */
    public var protocol: kotlin.Long
      @JvmName("getProtocol")
      get() = _builder.getProtocol()
      @JvmName("setProtocol")
      set(value) {
        _builder.setProtocol(value)
      }
    /**
     * <code>uint64 protocol = 1 [json_name = "protocol"];</code>
     */
    public fun clearProtocol() {
      _builder.clearProtocol()
    }

    /**
     * <code>string software = 2 [json_name = "software"];</code>
     */
    public var software: kotlin.String
      @JvmName("getSoftware")
      get() = _builder.getSoftware()
      @JvmName("setSoftware")
      set(value) {
        _builder.setSoftware(value)
      }
    /**
     * <code>string software = 2 [json_name = "software"];</code>
     */
    public fun clearSoftware() {
      _builder.clearSoftware()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun tendermint.version.Types.App.copy(block: tendermint.version.AppKt.Dsl.() -> kotlin.Unit): tendermint.version.Types.App =
  tendermint.version.AppKt.Dsl._create(this.toBuilder()).apply { block() }._build()

