//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: xion/v1/query.proto

package xion.v1;

@kotlin.jvm.JvmName("-initializequeryPlatformPercentageResponse")
public inline fun queryPlatformPercentageResponse(block: xion.v1.QueryPlatformPercentageResponseKt.Dsl.() -> kotlin.Unit): xion.v1.QueryOuterClass.QueryPlatformPercentageResponse =
  xion.v1.QueryPlatformPercentageResponseKt.Dsl._create(xion.v1.QueryOuterClass.QueryPlatformPercentageResponse.newBuilder()).apply { block() }._build()
public object QueryPlatformPercentageResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: xion.v1.QueryOuterClass.QueryPlatformPercentageResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: xion.v1.QueryOuterClass.QueryPlatformPercentageResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): xion.v1.QueryOuterClass.QueryPlatformPercentageResponse = _builder.build()

    /**
     * <code>uint64 platform_percentage = 1 [json_name = "platformPercentage"];</code>
     */
    public var platformPercentage: kotlin.Long
      @JvmName("getPlatformPercentage")
      get() = _builder.getPlatformPercentage()
      @JvmName("setPlatformPercentage")
      set(value) {
        _builder.setPlatformPercentage(value)
      }
    /**
     * <code>uint64 platform_percentage = 1 [json_name = "platformPercentage"];</code>
     */
    public fun clearPlatformPercentage() {
      _builder.clearPlatformPercentage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun xion.v1.QueryOuterClass.QueryPlatformPercentageResponse.copy(block: xion.v1.QueryPlatformPercentageResponseKt.Dsl.() -> kotlin.Unit): xion.v1.QueryOuterClass.QueryPlatformPercentageResponse =
  xion.v1.QueryPlatformPercentageResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

