// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/app/runtime/v1alpha1/module.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Module is the config object for the runtime module.
struct Cosmos_App_Runtime_V1alpha1_Module: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// app_name is the name of the app.
  var appName: String = String()

  /// begin_blockers specifies the module names of begin blockers
  /// to call in the order in which they should be called. If this is left empty
  /// no begin blocker will be registered.
  var beginBlockers: [String] = []

  /// end_blockers specifies the module names of the end blockers
  /// to call in the order in which they should be called. If this is left empty
  /// no end blocker will be registered.
  var endBlockers: [String] = []

  /// init_genesis specifies the module names of init genesis functions
  /// to call in the order in which they should be called. If this is left empty
  /// no init genesis function will be registered.
  var initGenesis: [String] = []

  /// export_genesis specifies the order in which to export module genesis data.
  /// If this is left empty, the init_genesis order will be used for export genesis
  /// if it is specified.
  var exportGenesis: [String] = []

  /// override_store_keys is an optional list of overrides for the module store keys
  /// to be used in keeper construction.
  var overrideStoreKeys: [Cosmos_App_Runtime_V1alpha1_StoreKeyConfig] = []

  /// order_migrations defines the order in which module migrations are performed.
  /// If this is left empty, it uses the default migration order.
  /// https://pkg.go.dev/github.com/cosmos/cosmos-sdk@v0.47.0-alpha2/types/module#DefaultMigrationsOrder
  var orderMigrations: [String] = []

  /// precommiters specifies the module names of the precommiters
  /// to call in the order in which they should be called. If this is left empty
  /// no precommit function will be registered.
  var precommiters: [String] = []

  /// prepare_check_staters specifies the module names of the prepare_check_staters
  /// to call in the order in which they should be called. If this is left empty
  /// no preparecheckstate function will be registered.
  var prepareCheckStaters: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// StoreKeyConfig may be supplied to override the default module store key, which
/// is the module name.
struct Cosmos_App_Runtime_V1alpha1_StoreKeyConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// name of the module to override the store key of
  var moduleName: String = String()

  /// the kv store key to use instead of the module name.
  var kvStoreKey: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.app.runtime.v1alpha1"

extension Cosmos_App_Runtime_V1alpha1_Module: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Module"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_name"),
    2: .standard(proto: "begin_blockers"),
    3: .standard(proto: "end_blockers"),
    4: .standard(proto: "init_genesis"),
    5: .standard(proto: "export_genesis"),
    6: .standard(proto: "override_store_keys"),
    7: .standard(proto: "order_migrations"),
    8: .same(proto: "precommiters"),
    9: .standard(proto: "prepare_check_staters"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.appName) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.beginBlockers) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.endBlockers) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.initGenesis) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.exportGenesis) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.overrideStoreKeys) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.orderMigrations) }()
      case 8: try { try decoder.decodeRepeatedStringField(value: &self.precommiters) }()
      case 9: try { try decoder.decodeRepeatedStringField(value: &self.prepareCheckStaters) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appName.isEmpty {
      try visitor.visitSingularStringField(value: self.appName, fieldNumber: 1)
    }
    if !self.beginBlockers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.beginBlockers, fieldNumber: 2)
    }
    if !self.endBlockers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.endBlockers, fieldNumber: 3)
    }
    if !self.initGenesis.isEmpty {
      try visitor.visitRepeatedStringField(value: self.initGenesis, fieldNumber: 4)
    }
    if !self.exportGenesis.isEmpty {
      try visitor.visitRepeatedStringField(value: self.exportGenesis, fieldNumber: 5)
    }
    if !self.overrideStoreKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.overrideStoreKeys, fieldNumber: 6)
    }
    if !self.orderMigrations.isEmpty {
      try visitor.visitRepeatedStringField(value: self.orderMigrations, fieldNumber: 7)
    }
    if !self.precommiters.isEmpty {
      try visitor.visitRepeatedStringField(value: self.precommiters, fieldNumber: 8)
    }
    if !self.prepareCheckStaters.isEmpty {
      try visitor.visitRepeatedStringField(value: self.prepareCheckStaters, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_App_Runtime_V1alpha1_Module, rhs: Cosmos_App_Runtime_V1alpha1_Module) -> Bool {
    if lhs.appName != rhs.appName {return false}
    if lhs.beginBlockers != rhs.beginBlockers {return false}
    if lhs.endBlockers != rhs.endBlockers {return false}
    if lhs.initGenesis != rhs.initGenesis {return false}
    if lhs.exportGenesis != rhs.exportGenesis {return false}
    if lhs.overrideStoreKeys != rhs.overrideStoreKeys {return false}
    if lhs.orderMigrations != rhs.orderMigrations {return false}
    if lhs.precommiters != rhs.precommiters {return false}
    if lhs.prepareCheckStaters != rhs.prepareCheckStaters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_App_Runtime_V1alpha1_StoreKeyConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StoreKeyConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "module_name"),
    2: .standard(proto: "kv_store_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.moduleName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.kvStoreKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.moduleName.isEmpty {
      try visitor.visitSingularStringField(value: self.moduleName, fieldNumber: 1)
    }
    if !self.kvStoreKey.isEmpty {
      try visitor.visitSingularStringField(value: self.kvStoreKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_App_Runtime_V1alpha1_StoreKeyConfig, rhs: Cosmos_App_Runtime_V1alpha1_StoreKeyConfig) -> Bool {
    if lhs.moduleName != rhs.moduleName {return false}
    if lhs.kvStoreKey != rhs.kvStoreKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
