// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/authz/v1beta1/event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Since: cosmos-sdk 0.43

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// EventGrant is emitted on Msg/Grant
struct Cosmos_Authz_V1beta1_EventGrant: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Msg type URL for which an autorization is granted
  var msgTypeURL: String = String()

  /// Granter account address
  var granter: String = String()

  /// Grantee account address
  var grantee: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventRevoke is emitted on Msg/Revoke
struct Cosmos_Authz_V1beta1_EventRevoke: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Msg type URL for which an autorization is revoked
  var msgTypeURL: String = String()

  /// Granter account address
  var granter: String = String()

  /// Grantee account address
  var grantee: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.authz.v1beta1"

extension Cosmos_Authz_V1beta1_EventGrant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventGrant"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "msg_type_url"),
    3: .same(proto: "granter"),
    4: .same(proto: "grantee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.msgTypeURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.granter) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.grantee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.msgTypeURL.isEmpty {
      try visitor.visitSingularStringField(value: self.msgTypeURL, fieldNumber: 2)
    }
    if !self.granter.isEmpty {
      try visitor.visitSingularStringField(value: self.granter, fieldNumber: 3)
    }
    if !self.grantee.isEmpty {
      try visitor.visitSingularStringField(value: self.grantee, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Authz_V1beta1_EventGrant, rhs: Cosmos_Authz_V1beta1_EventGrant) -> Bool {
    if lhs.msgTypeURL != rhs.msgTypeURL {return false}
    if lhs.granter != rhs.granter {return false}
    if lhs.grantee != rhs.grantee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Authz_V1beta1_EventRevoke: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventRevoke"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "msg_type_url"),
    3: .same(proto: "granter"),
    4: .same(proto: "grantee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.msgTypeURL) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.granter) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.grantee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.msgTypeURL.isEmpty {
      try visitor.visitSingularStringField(value: self.msgTypeURL, fieldNumber: 2)
    }
    if !self.granter.isEmpty {
      try visitor.visitSingularStringField(value: self.granter, fieldNumber: 3)
    }
    if !self.grantee.isEmpty {
      try visitor.visitSingularStringField(value: self.grantee, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Authz_V1beta1_EventRevoke, rhs: Cosmos_Authz_V1beta1_EventRevoke) -> Bool {
    if lhs.msgTypeURL != rhs.msgTypeURL {return false}
    if lhs.granter != rhs.granter {return false}
    if lhs.grantee != rhs.grantee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
