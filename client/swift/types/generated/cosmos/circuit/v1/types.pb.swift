// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/circuit/v1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Permissions are the permissions that an account has to trip
/// or reset the circuit breaker.
struct Cosmos_Circuit_V1_Permissions: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// level is the level of permissions granted to this account.
  var level: Cosmos_Circuit_V1_Permissions.Level = .noneUnspecified

  /// limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type
  /// URLs that the account can trip. It is an error to use limit_type_urls with
  /// a level other than LEVEL_SOME_MSGS.
  var limitTypeUrls: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Level is the permission level.
  enum Level: SwiftProtobuf.Enum, Swift.CaseIterable {
    typealias RawValue = Int

    /// LEVEL_NONE_UNSPECIFIED indicates that the account will have no circuit
    /// breaker permissions.
    case noneUnspecified // = 0

    /// LEVEL_SOME_MSGS indicates that the account will have permission to
    /// trip or reset the circuit breaker for some Msg type URLs. If this level
    /// is chosen, a non-empty list of Msg type URLs must be provided in
    /// limit_type_urls.
    case someMsgs // = 1

    /// LEVEL_ALL_MSGS indicates that the account can trip or reset the circuit
    /// breaker for Msg's of all type URLs.
    case allMsgs // = 2

    /// LEVEL_SUPER_ADMIN indicates that the account can take all circuit breaker
    /// actions and can grant permissions to other accounts.
    case superAdmin // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .noneUnspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .noneUnspecified
      case 1: self = .someMsgs
      case 2: self = .allMsgs
      case 3: self = .superAdmin
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .noneUnspecified: return 0
      case .someMsgs: return 1
      case .allMsgs: return 2
      case .superAdmin: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static let allCases: [Cosmos_Circuit_V1_Permissions.Level] = [
      .noneUnspecified,
      .someMsgs,
      .allMsgs,
      .superAdmin,
    ]

  }

  init() {}
}

/// GenesisAccountPermissions is the account permissions for the circuit breaker in genesis
struct Cosmos_Circuit_V1_GenesisAccountPermissions: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var permissions: Cosmos_Circuit_V1_Permissions {
    get {return _permissions ?? Cosmos_Circuit_V1_Permissions()}
    set {_permissions = newValue}
  }
  /// Returns true if `permissions` has been explicitly set.
  var hasPermissions: Bool {return self._permissions != nil}
  /// Clears the value of `permissions`. Subsequent reads from it will return its default value.
  mutating func clearPermissions() {self._permissions = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _permissions: Cosmos_Circuit_V1_Permissions? = nil
}

/// GenesisState is the state that must be provided at genesis.
struct Cosmos_Circuit_V1_GenesisState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var accountPermissions: [Cosmos_Circuit_V1_GenesisAccountPermissions] = []

  var disabledTypeUrls: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.circuit.v1"

extension Cosmos_Circuit_V1_Permissions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Permissions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "level"),
    2: .standard(proto: "limit_type_urls"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.level) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.limitTypeUrls) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.level != .noneUnspecified {
      try visitor.visitSingularEnumField(value: self.level, fieldNumber: 1)
    }
    if !self.limitTypeUrls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.limitTypeUrls, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Circuit_V1_Permissions, rhs: Cosmos_Circuit_V1_Permissions) -> Bool {
    if lhs.level != rhs.level {return false}
    if lhs.limitTypeUrls != rhs.limitTypeUrls {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Circuit_V1_Permissions.Level: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LEVEL_NONE_UNSPECIFIED"),
    1: .same(proto: "LEVEL_SOME_MSGS"),
    2: .same(proto: "LEVEL_ALL_MSGS"),
    3: .same(proto: "LEVEL_SUPER_ADMIN"),
  ]
}

extension Cosmos_Circuit_V1_GenesisAccountPermissions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisAccountPermissions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "permissions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._permissions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    try { if let v = self._permissions {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Circuit_V1_GenesisAccountPermissions, rhs: Cosmos_Circuit_V1_GenesisAccountPermissions) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs._permissions != rhs._permissions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Circuit_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_permissions"),
    2: .standard(proto: "disabled_type_urls"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.accountPermissions) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.disabledTypeUrls) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.accountPermissions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.accountPermissions, fieldNumber: 1)
    }
    if !self.disabledTypeUrls.isEmpty {
      try visitor.visitRepeatedStringField(value: self.disabledTypeUrls, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Circuit_V1_GenesisState, rhs: Cosmos_Circuit_V1_GenesisState) -> Bool {
    if lhs.accountPermissions != rhs.accountPermissions {return false}
    if lhs.disabledTypeUrls != rhs.disabledTypeUrls {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
