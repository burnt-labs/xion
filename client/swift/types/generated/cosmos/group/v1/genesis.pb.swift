// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/group/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Since: cosmos-sdk 0.46

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the group module's genesis state.
struct Cosmos_Group_V1_GenesisState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// group_seq is the group table orm.Sequence,
  /// it is used to get the next group ID.
  var groupSeq: UInt64 = 0

  /// groups is the list of groups info.
  var groups: [Cosmos_Group_V1_GroupInfo] = []

  /// group_members is the list of groups members.
  var groupMembers: [Cosmos_Group_V1_GroupMember] = []

  /// group_policy_seq is the group policy table orm.Sequence,
  /// it is used to generate the next group policy account address.
  var groupPolicySeq: UInt64 = 0

  /// group_policies is the list of group policies info.
  var groupPolicies: [Cosmos_Group_V1_GroupPolicyInfo] = []

  /// proposal_seq is the proposal table orm.Sequence,
  /// it is used to get the next proposal ID.
  var proposalSeq: UInt64 = 0

  /// proposals is the list of proposals.
  var proposals: [Cosmos_Group_V1_Proposal] = []

  /// votes is the list of votes.
  var votes: [Cosmos_Group_V1_Vote] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.group.v1"

extension Cosmos_Group_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "group_seq"),
    2: .same(proto: "groups"),
    3: .standard(proto: "group_members"),
    4: .standard(proto: "group_policy_seq"),
    5: .standard(proto: "group_policies"),
    6: .standard(proto: "proposal_seq"),
    7: .same(proto: "proposals"),
    8: .same(proto: "votes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.groupSeq) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.groups) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.groupMembers) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.groupPolicySeq) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.groupPolicies) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.proposalSeq) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.proposals) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.votes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.groupSeq != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupSeq, fieldNumber: 1)
    }
    if !self.groups.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groups, fieldNumber: 2)
    }
    if !self.groupMembers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groupMembers, fieldNumber: 3)
    }
    if self.groupPolicySeq != 0 {
      try visitor.visitSingularUInt64Field(value: self.groupPolicySeq, fieldNumber: 4)
    }
    if !self.groupPolicies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groupPolicies, fieldNumber: 5)
    }
    if self.proposalSeq != 0 {
      try visitor.visitSingularUInt64Field(value: self.proposalSeq, fieldNumber: 6)
    }
    if !self.proposals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.proposals, fieldNumber: 7)
    }
    if !self.votes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.votes, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Group_V1_GenesisState, rhs: Cosmos_Group_V1_GenesisState) -> Bool {
    if lhs.groupSeq != rhs.groupSeq {return false}
    if lhs.groups != rhs.groups {return false}
    if lhs.groupMembers != rhs.groupMembers {return false}
    if lhs.groupPolicySeq != rhs.groupPolicySeq {return false}
    if lhs.groupPolicies != rhs.groupPolicies {return false}
    if lhs.proposalSeq != rhs.proposalSeq {return false}
    if lhs.proposals != rhs.proposals {return false}
    if lhs.votes != rhs.votes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
