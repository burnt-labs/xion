// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/orm/query/v1alpha1/query.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GetRequest is the Query/Get request type.
struct Cosmos_Orm_Query_V1alpha1_GetRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// message_name is the fully-qualified message name of the ORM table being queried.
  var messageName: String = String()

  /// index is the index fields expression used in orm definitions. If it
  /// is empty, the table's primary key is assumed. If it is non-empty, it must
  /// refer to an unique index.
  var index: String = String()

  /// values are the values of the fields corresponding to the requested index.
  /// There must be as many values provided as there are fields in the index and
  /// these values must correspond to the index field types.
  var values: [Cosmos_Orm_Query_V1alpha1_IndexValue] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// GetResponse is the Query/Get response type.
struct Cosmos_Orm_Query_V1alpha1_GetResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// result is the result of the get query. If no value is found, the gRPC
  /// status code NOT_FOUND will be returned.
  var result: SwiftProtobuf.Google_Protobuf_Any {
    get {return _result ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _result: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// ListRequest is the Query/List request type.
struct Cosmos_Orm_Query_V1alpha1_ListRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// message_name is the fully-qualified message name of the ORM table being queried.
  var messageName: String = String()

  /// index is the index fields expression used in orm definitions. If it
  /// is empty, the table's primary key is assumed.
  var index: String = String()

  /// query is the query expression corresponding to the provided index. If
  /// neither prefix nor range is specified, the query will list all the fields
  /// in the index.
  var query: Cosmos_Orm_Query_V1alpha1_ListRequest.OneOf_Query? = nil

  /// prefix defines a prefix query.
  var prefix: Cosmos_Orm_Query_V1alpha1_ListRequest.Prefix {
    get {
      if case .prefix(let v)? = query {return v}
      return Cosmos_Orm_Query_V1alpha1_ListRequest.Prefix()
    }
    set {query = .prefix(newValue)}
  }

  /// range defines a range query.
  var range: Cosmos_Orm_Query_V1alpha1_ListRequest.Range {
    get {
      if case .range(let v)? = query {return v}
      return Cosmos_Orm_Query_V1alpha1_ListRequest.Range()
    }
    set {query = .range(newValue)}
  }

  /// pagination is the pagination request.
  var pagination: Cosmos_Base_Query_V1beta1_PageRequest {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageRequest()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// query is the query expression corresponding to the provided index. If
  /// neither prefix nor range is specified, the query will list all the fields
  /// in the index.
  enum OneOf_Query: Equatable, Sendable {
    /// prefix defines a prefix query.
    case prefix(Cosmos_Orm_Query_V1alpha1_ListRequest.Prefix)
    /// range defines a range query.
    case range(Cosmos_Orm_Query_V1alpha1_ListRequest.Range)

  }

  /// Prefix specifies the arguments to a prefix query.
  struct Prefix: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// values specifies the index values for the prefix query.
    /// It is valid to special a partial prefix with fewer values than
    /// the number of fields in the index.
    var values: [Cosmos_Orm_Query_V1alpha1_IndexValue] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  /// Range specifies the arguments to a range query.
  struct Range: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// start specifies the starting index values for the range query.
    /// It is valid to provide fewer values than the number of fields in the
    /// index.
    var start: [Cosmos_Orm_Query_V1alpha1_IndexValue] = []

    /// end specifies the inclusive ending index values for the range query.
    /// It is valid to provide fewer values than the number of fields in the
    /// index.
    var end: [Cosmos_Orm_Query_V1alpha1_IndexValue] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageRequest? = nil
}

/// ListResponse is the Query/List response type.
struct Cosmos_Orm_Query_V1alpha1_ListResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// results are the results of the query.
  var results: [SwiftProtobuf.Google_Protobuf_Any] = []

  /// pagination is the pagination response.
  var pagination: Cosmos_Base_Query_V1beta1_PageResponse {
    get {return _pagination ?? Cosmos_Base_Query_V1beta1_PageResponse()}
    set {_pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return self._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {self._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pagination: Cosmos_Base_Query_V1beta1_PageResponse? = nil
}

/// IndexValue represents the value of a field in an ORM index expression.
struct Cosmos_Orm_Query_V1alpha1_IndexValue: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// value specifies the index value
  var value: Cosmos_Orm_Query_V1alpha1_IndexValue.OneOf_Value? = nil

  /// uint specifies a value for an uint32, fixed32, uint64, or fixed64
  /// index field.
  var uint: UInt64 {
    get {
      if case .uint(let v)? = value {return v}
      return 0
    }
    set {value = .uint(newValue)}
  }

  /// int64 specifies a value for an int32, sfixed32, int64, or sfixed64
  /// index field.
  var int: Int64 {
    get {
      if case .int(let v)? = value {return v}
      return 0
    }
    set {value = .int(newValue)}
  }

  /// str specifies a value for a string index field.
  var str: String {
    get {
      if case .str(let v)? = value {return v}
      return String()
    }
    set {value = .str(newValue)}
  }

  /// bytes specifies a value for a bytes index field.
  var bytes: Data {
    get {
      if case .bytes(let v)? = value {return v}
      return Data()
    }
    set {value = .bytes(newValue)}
  }

  /// enum specifies a value for an enum index field.
  var `enum`: String {
    get {
      if case .enum(let v)? = value {return v}
      return String()
    }
    set {value = .enum(newValue)}
  }

  /// bool specifies a value for a bool index field.
  var bool: Bool {
    get {
      if case .bool(let v)? = value {return v}
      return false
    }
    set {value = .bool(newValue)}
  }

  /// timestamp specifies a value for a timestamp index field.
  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {
      if case .timestamp(let v)? = value {return v}
      return SwiftProtobuf.Google_Protobuf_Timestamp()
    }
    set {value = .timestamp(newValue)}
  }

  /// duration specifies a value for a duration index field.
  var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {
      if case .duration(let v)? = value {return v}
      return SwiftProtobuf.Google_Protobuf_Duration()
    }
    set {value = .duration(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// value specifies the index value
  enum OneOf_Value: Equatable, @unchecked Sendable {
    /// uint specifies a value for an uint32, fixed32, uint64, or fixed64
    /// index field.
    case uint(UInt64)
    /// int64 specifies a value for an int32, sfixed32, int64, or sfixed64
    /// index field.
    case int(Int64)
    /// str specifies a value for a string index field.
    case str(String)
    /// bytes specifies a value for a bytes index field.
    case bytes(Data)
    /// enum specifies a value for an enum index field.
    case `enum`(String)
    /// bool specifies a value for a bool index field.
    case bool(Bool)
    /// timestamp specifies a value for a timestamp index field.
    case timestamp(SwiftProtobuf.Google_Protobuf_Timestamp)
    /// duration specifies a value for a duration index field.
    case duration(SwiftProtobuf.Google_Protobuf_Duration)

  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.orm.query.v1alpha1"

extension Cosmos_Orm_Query_V1alpha1_GetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_name"),
    2: .same(proto: "index"),
    3: .same(proto: "values"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.messageName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.index) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.values) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messageName.isEmpty {
      try visitor.visitSingularStringField(value: self.messageName, fieldNumber: 1)
    }
    if !self.index.isEmpty {
      try visitor.visitSingularStringField(value: self.index, fieldNumber: 2)
    }
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Orm_Query_V1alpha1_GetRequest, rhs: Cosmos_Orm_Query_V1alpha1_GetRequest) -> Bool {
    if lhs.messageName != rhs.messageName {return false}
    if lhs.index != rhs.index {return false}
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Orm_Query_V1alpha1_GetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._result) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._result {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Orm_Query_V1alpha1_GetResponse, rhs: Cosmos_Orm_Query_V1alpha1_GetResponse) -> Bool {
    if lhs._result != rhs._result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Orm_Query_V1alpha1_ListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_name"),
    2: .same(proto: "index"),
    3: .same(proto: "prefix"),
    4: .same(proto: "range"),
    5: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.messageName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.index) }()
      case 3: try {
        var v: Cosmos_Orm_Query_V1alpha1_ListRequest.Prefix?
        var hadOneofValue = false
        if let current = self.query {
          hadOneofValue = true
          if case .prefix(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.query = .prefix(v)
        }
      }()
      case 4: try {
        var v: Cosmos_Orm_Query_V1alpha1_ListRequest.Range?
        var hadOneofValue = false
        if let current = self.query {
          hadOneofValue = true
          if case .range(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.query = .range(v)
        }
      }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.messageName.isEmpty {
      try visitor.visitSingularStringField(value: self.messageName, fieldNumber: 1)
    }
    if !self.index.isEmpty {
      try visitor.visitSingularStringField(value: self.index, fieldNumber: 2)
    }
    switch self.query {
    case .prefix?: try {
      guard case .prefix(let v)? = self.query else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .range?: try {
      guard case .range(let v)? = self.query else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Orm_Query_V1alpha1_ListRequest, rhs: Cosmos_Orm_Query_V1alpha1_ListRequest) -> Bool {
    if lhs.messageName != rhs.messageName {return false}
    if lhs.index != rhs.index {return false}
    if lhs.query != rhs.query {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Orm_Query_V1alpha1_ListRequest.Prefix: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Cosmos_Orm_Query_V1alpha1_ListRequest.protoMessageName + ".Prefix"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.values) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Orm_Query_V1alpha1_ListRequest.Prefix, rhs: Cosmos_Orm_Query_V1alpha1_ListRequest.Prefix) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Orm_Query_V1alpha1_ListRequest.Range: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Cosmos_Orm_Query_V1alpha1_ListRequest.protoMessageName + ".Range"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "end"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.start) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.end) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.start.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.start, fieldNumber: 1)
    }
    if !self.end.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.end, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Orm_Query_V1alpha1_ListRequest.Range, rhs: Cosmos_Orm_Query_V1alpha1_ListRequest.Range) -> Bool {
    if lhs.start != rhs.start {return false}
    if lhs.end != rhs.end {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Orm_Query_V1alpha1_ListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "results"),
    5: .same(proto: "pagination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.results) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._pagination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.results.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.results, fieldNumber: 1)
    }
    try { if let v = self._pagination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Orm_Query_V1alpha1_ListResponse, rhs: Cosmos_Orm_Query_V1alpha1_ListResponse) -> Bool {
    if lhs.results != rhs.results {return false}
    if lhs._pagination != rhs._pagination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Orm_Query_V1alpha1_IndexValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IndexValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uint"),
    2: .same(proto: "int"),
    3: .same(proto: "str"),
    4: .same(proto: "bytes"),
    5: .same(proto: "enum"),
    6: .same(proto: "bool"),
    7: .same(proto: "timestamp"),
    8: .same(proto: "duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: UInt64?
        try decoder.decodeSingularUInt64Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .uint(v)
        }
      }()
      case 2: try {
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .int(v)
        }
      }()
      case 3: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .str(v)
        }
      }()
      case 4: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .bytes(v)
        }
      }()
      case 5: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .enum(v)
        }
      }()
      case 6: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.value != nil {try decoder.handleConflictingOneOf()}
          self.value = .bool(v)
        }
      }()
      case 7: try {
        var v: SwiftProtobuf.Google_Protobuf_Timestamp?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .timestamp(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .timestamp(v)
        }
      }()
      case 8: try {
        var v: SwiftProtobuf.Google_Protobuf_Duration?
        var hadOneofValue = false
        if let current = self.value {
          hadOneofValue = true
          if case .duration(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.value = .duration(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.value {
    case .uint?: try {
      guard case .uint(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }()
    case .int?: try {
      guard case .int(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    }()
    case .str?: try {
      guard case .str(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }()
    case .bytes?: try {
      guard case .bytes(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    }()
    case .enum?: try {
      guard case .enum(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }()
    case .bool?: try {
      guard case .bool(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }()
    case .timestamp?: try {
      guard case .timestamp(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .duration?: try {
      guard case .duration(let v)? = self.value else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Orm_Query_V1alpha1_IndexValue, rhs: Cosmos_Orm_Query_V1alpha1_IndexValue) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
