// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/staking/v1beta1/staking.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// BondStatus is the status of a validator.
enum Cosmos_Staking_V1beta1_BondStatus: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// UNSPECIFIED defines an invalid validator status.
  case unspecified // = 0

  /// UNBONDED defines a validator that is not bonded.
  case unbonded // = 1

  /// UNBONDING defines a validator that is unbonding.
  case unbonding // = 2

  /// BONDED defines a validator that is bonded.
  case bonded // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .unbonded
    case 2: self = .unbonding
    case 3: self = .bonded
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .unbonded: return 1
    case .unbonding: return 2
    case .bonded: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Cosmos_Staking_V1beta1_BondStatus] = [
    .unspecified,
    .unbonded,
    .unbonding,
    .bonded,
  ]

}

/// Infraction indicates the infraction a validator commited.
enum Cosmos_Staking_V1beta1_Infraction: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// UNSPECIFIED defines an empty infraction.
  case unspecified // = 0

  /// DOUBLE_SIGN defines a validator that double-signs a block.
  case doubleSign // = 1

  /// DOWNTIME defines a validator that missed signing too many blocks.
  case downtime // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .doubleSign
    case 2: self = .downtime
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .doubleSign: return 1
    case .downtime: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Cosmos_Staking_V1beta1_Infraction] = [
    .unspecified,
    .doubleSign,
    .downtime,
  ]

}

/// HistoricalInfo contains header and validator information for a given block.
/// It is stored as part of staking module's state, which persists the `n` most
/// recent HistoricalInfo
/// (`n` is set by the staking module's `historical_entries` parameter).
struct Cosmos_Staking_V1beta1_HistoricalInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: Tendermint_Types_Header {
    get {return _header ?? Tendermint_Types_Header()}
    set {_header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return self._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {self._header = nil}

  var valset: [Cosmos_Staking_V1beta1_Validator] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _header: Tendermint_Types_Header? = nil
}

/// CommissionRates defines the initial commission rates to be used for creating
/// a validator.
struct Cosmos_Staking_V1beta1_CommissionRates: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// rate is the commission rate charged to delegators, as a fraction.
  var rate: String = String()

  /// max_rate defines the maximum commission rate which validator can ever charge, as a fraction.
  var maxRate: String = String()

  /// max_change_rate defines the maximum daily increase of the validator commission, as a fraction.
  var maxChangeRate: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Commission defines commission parameters for a given validator.
struct Cosmos_Staking_V1beta1_Commission: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// commission_rates defines the initial commission rates to be used for creating a validator.
  var commissionRates: Cosmos_Staking_V1beta1_CommissionRates {
    get {return _commissionRates ?? Cosmos_Staking_V1beta1_CommissionRates()}
    set {_commissionRates = newValue}
  }
  /// Returns true if `commissionRates` has been explicitly set.
  var hasCommissionRates: Bool {return self._commissionRates != nil}
  /// Clears the value of `commissionRates`. Subsequent reads from it will return its default value.
  mutating func clearCommissionRates() {self._commissionRates = nil}

  /// update_time is the last time the commission rate was changed.
  var updateTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updateTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updateTime = newValue}
  }
  /// Returns true if `updateTime` has been explicitly set.
  var hasUpdateTime: Bool {return self._updateTime != nil}
  /// Clears the value of `updateTime`. Subsequent reads from it will return its default value.
  mutating func clearUpdateTime() {self._updateTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _commissionRates: Cosmos_Staking_V1beta1_CommissionRates? = nil
  fileprivate var _updateTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Description defines a validator description.
struct Cosmos_Staking_V1beta1_Description: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// moniker defines a human-readable name for the validator.
  var moniker: String = String()

  /// identity defines an optional identity signature (ex. UPort or Keybase).
  var identity: String = String()

  /// website defines an optional website link.
  var website: String = String()

  /// security_contact defines an optional email for security contact.
  var securityContact: String = String()

  /// details define other optional details.
  var details: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Validator defines a validator, together with the total amount of the
/// Validator's bond shares and their exchange rate to coins. Slashing results in
/// a decrease in the exchange rate, allowing correct calculation of future
/// undelegations without iterating over delegators. When coins are delegated to
/// this validator, the validator is credited with a delegation whose number of
/// bond shares is based on the amount of coins delegated divided by the current
/// exchange rate. Voting power can be calculated as total bonded shares
/// multiplied by exchange rate.
struct Cosmos_Staking_V1beta1_Validator: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// operator_address defines the address of the validator's operator; bech encoded in JSON.
  var operatorAddress: String {
    get {return _storage._operatorAddress}
    set {_uniqueStorage()._operatorAddress = newValue}
  }

  /// consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.
  var consensusPubkey: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._consensusPubkey ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._consensusPubkey = newValue}
  }
  /// Returns true if `consensusPubkey` has been explicitly set.
  var hasConsensusPubkey: Bool {return _storage._consensusPubkey != nil}
  /// Clears the value of `consensusPubkey`. Subsequent reads from it will return its default value.
  mutating func clearConsensusPubkey() {_uniqueStorage()._consensusPubkey = nil}

  /// jailed defined whether the validator has been jailed from bonded status or not.
  var jailed: Bool {
    get {return _storage._jailed}
    set {_uniqueStorage()._jailed = newValue}
  }

  /// status is the validator status (bonded/unbonding/unbonded).
  var status: Cosmos_Staking_V1beta1_BondStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// tokens define the delegated tokens (incl. self-delegation).
  var tokens: String {
    get {return _storage._tokens}
    set {_uniqueStorage()._tokens = newValue}
  }

  /// delegator_shares defines total shares issued to a validator's delegators.
  var delegatorShares: String {
    get {return _storage._delegatorShares}
    set {_uniqueStorage()._delegatorShares = newValue}
  }

  /// description defines the description terms for the validator.
  var description_p: Cosmos_Staking_V1beta1_Description {
    get {return _storage._description_p ?? Cosmos_Staking_V1beta1_Description()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  /// unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.
  var unbondingHeight: Int64 {
    get {return _storage._unbondingHeight}
    set {_uniqueStorage()._unbondingHeight = newValue}
  }

  /// unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.
  var unbondingTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._unbondingTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._unbondingTime = newValue}
  }
  /// Returns true if `unbondingTime` has been explicitly set.
  var hasUnbondingTime: Bool {return _storage._unbondingTime != nil}
  /// Clears the value of `unbondingTime`. Subsequent reads from it will return its default value.
  mutating func clearUnbondingTime() {_uniqueStorage()._unbondingTime = nil}

  /// commission defines the commission parameters.
  var commission: Cosmos_Staking_V1beta1_Commission {
    get {return _storage._commission ?? Cosmos_Staking_V1beta1_Commission()}
    set {_uniqueStorage()._commission = newValue}
  }
  /// Returns true if `commission` has been explicitly set.
  var hasCommission: Bool {return _storage._commission != nil}
  /// Clears the value of `commission`. Subsequent reads from it will return its default value.
  mutating func clearCommission() {_uniqueStorage()._commission = nil}

  /// min_self_delegation is the validator's self declared minimum self delegation.
  ///
  /// Since: cosmos-sdk 0.46
  var minSelfDelegation: String {
    get {return _storage._minSelfDelegation}
    set {_uniqueStorage()._minSelfDelegation = newValue}
  }

  /// strictly positive if this validator's unbonding has been stopped by external modules
  var unbondingOnHoldRefCount: Int64 {
    get {return _storage._unbondingOnHoldRefCount}
    set {_uniqueStorage()._unbondingOnHoldRefCount = newValue}
  }

  /// list of unbonding ids, each uniquely identifing an unbonding of this validator
  var unbondingIds: [UInt64] {
    get {return _storage._unbondingIds}
    set {_uniqueStorage()._unbondingIds = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// ValAddresses defines a repeated set of validator addresses.
struct Cosmos_Staking_V1beta1_ValAddresses: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var addresses: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DVPair is struct that just has a delegator-validator pair with no other data.
/// It is intended to be used as a marshalable pointer. For example, a DVPair can
/// be used to construct the key to getting an UnbondingDelegation from state.
struct Cosmos_Staking_V1beta1_DVPair: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var delegatorAddress: String = String()

  var validatorAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DVPairs defines an array of DVPair objects.
struct Cosmos_Staking_V1beta1_DVPairs: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pairs: [Cosmos_Staking_V1beta1_DVPair] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DVVTriplet is struct that just has a delegator-validator-validator triplet
/// with no other data. It is intended to be used as a marshalable pointer. For
/// example, a DVVTriplet can be used to construct the key to getting a
/// Redelegation from state.
struct Cosmos_Staking_V1beta1_DVVTriplet: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var delegatorAddress: String = String()

  var validatorSrcAddress: String = String()

  var validatorDstAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DVVTriplets defines an array of DVVTriplet objects.
struct Cosmos_Staking_V1beta1_DVVTriplets: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var triplets: [Cosmos_Staking_V1beta1_DVVTriplet] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Delegation represents the bond with tokens held by an account. It is
/// owned by one delegator, and is associated with the voting power of one
/// validator.
struct Cosmos_Staking_V1beta1_Delegation: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// delegator_address is the encoded address of the delegator.
  var delegatorAddress: String = String()

  /// validator_address is the encoded address of the validator.
  var validatorAddress: String = String()

  /// shares define the delegation shares received.
  var shares: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// UnbondingDelegation stores all of a single delegator's unbonding bonds
/// for a single validator in an time-ordered list.
struct Cosmos_Staking_V1beta1_UnbondingDelegation: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// delegator_address is the encoded address of the delegator.
  var delegatorAddress: String = String()

  /// validator_address is the encoded address of the validator.
  var validatorAddress: String = String()

  /// entries are the unbonding delegation entries.
  var entries: [Cosmos_Staking_V1beta1_UnbondingDelegationEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// UnbondingDelegationEntry defines an unbonding object with relevant metadata.
struct Cosmos_Staking_V1beta1_UnbondingDelegationEntry: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// creation_height is the height which the unbonding took place.
  var creationHeight: Int64 = 0

  /// completion_time is the unix time for unbonding completion.
  var completionTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _completionTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_completionTime = newValue}
  }
  /// Returns true if `completionTime` has been explicitly set.
  var hasCompletionTime: Bool {return self._completionTime != nil}
  /// Clears the value of `completionTime`. Subsequent reads from it will return its default value.
  mutating func clearCompletionTime() {self._completionTime = nil}

  /// initial_balance defines the tokens initially scheduled to receive at completion.
  var initialBalance: String = String()

  /// balance defines the tokens to receive at completion.
  var balance: String = String()

  /// Incrementing id that uniquely identifies this entry
  var unbondingID: UInt64 = 0

  /// Strictly positive if this entry's unbonding has been stopped by external modules
  var unbondingOnHoldRefCount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _completionTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// RedelegationEntry defines a redelegation object with relevant metadata.
struct Cosmos_Staking_V1beta1_RedelegationEntry: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// creation_height  defines the height which the redelegation took place.
  var creationHeight: Int64 = 0

  /// completion_time defines the unix time for redelegation completion.
  var completionTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _completionTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_completionTime = newValue}
  }
  /// Returns true if `completionTime` has been explicitly set.
  var hasCompletionTime: Bool {return self._completionTime != nil}
  /// Clears the value of `completionTime`. Subsequent reads from it will return its default value.
  mutating func clearCompletionTime() {self._completionTime = nil}

  /// initial_balance defines the initial balance when redelegation started.
  var initialBalance: String = String()

  /// shares_dst is the amount of destination-validator shares created by redelegation.
  var sharesDst: String = String()

  /// Incrementing id that uniquely identifies this entry
  var unbondingID: UInt64 = 0

  /// Strictly positive if this entry's unbonding has been stopped by external modules
  var unbondingOnHoldRefCount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _completionTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Redelegation contains the list of a particular delegator's redelegating bonds
/// from a particular source validator to a particular destination validator.
struct Cosmos_Staking_V1beta1_Redelegation: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// delegator_address is the bech32-encoded address of the delegator.
  var delegatorAddress: String = String()

  /// validator_src_address is the validator redelegation source operator address.
  var validatorSrcAddress: String = String()

  /// validator_dst_address is the validator redelegation destination operator address.
  var validatorDstAddress: String = String()

  /// entries are the redelegation entries.
  var entries: [Cosmos_Staking_V1beta1_RedelegationEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Params defines the parameters for the x/staking module.
struct Cosmos_Staking_V1beta1_Params: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// unbonding_time is the time duration of unbonding.
  var unbondingTime: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _unbondingTime ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_unbondingTime = newValue}
  }
  /// Returns true if `unbondingTime` has been explicitly set.
  var hasUnbondingTime: Bool {return self._unbondingTime != nil}
  /// Clears the value of `unbondingTime`. Subsequent reads from it will return its default value.
  mutating func clearUnbondingTime() {self._unbondingTime = nil}

  /// max_validators is the maximum number of validators.
  var maxValidators: UInt32 = 0

  /// max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).
  var maxEntries: UInt32 = 0

  /// historical_entries is the number of historical entries to persist.
  var historicalEntries: UInt32 = 0

  /// bond_denom defines the bondable coin denomination.
  var bondDenom: String = String()

  /// min_commission_rate is the chain-wide minimum commission rate that a validator can charge their delegators
  var minCommissionRate: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _unbondingTime: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// DelegationResponse is equivalent to Delegation except that it contains a
/// balance in addition to shares which is more suitable for client responses.
struct Cosmos_Staking_V1beta1_DelegationResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var delegation: Cosmos_Staking_V1beta1_Delegation {
    get {return _delegation ?? Cosmos_Staking_V1beta1_Delegation()}
    set {_delegation = newValue}
  }
  /// Returns true if `delegation` has been explicitly set.
  var hasDelegation: Bool {return self._delegation != nil}
  /// Clears the value of `delegation`. Subsequent reads from it will return its default value.
  mutating func clearDelegation() {self._delegation = nil}

  var balance: Cosmos_Base_V1beta1_Coin {
    get {return _balance ?? Cosmos_Base_V1beta1_Coin()}
    set {_balance = newValue}
  }
  /// Returns true if `balance` has been explicitly set.
  var hasBalance: Bool {return self._balance != nil}
  /// Clears the value of `balance`. Subsequent reads from it will return its default value.
  mutating func clearBalance() {self._balance = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _delegation: Cosmos_Staking_V1beta1_Delegation? = nil
  fileprivate var _balance: Cosmos_Base_V1beta1_Coin? = nil
}

/// RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
/// contains a balance in addition to shares which is more suitable for client
/// responses.
struct Cosmos_Staking_V1beta1_RedelegationEntryResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var redelegationEntry: Cosmos_Staking_V1beta1_RedelegationEntry {
    get {return _redelegationEntry ?? Cosmos_Staking_V1beta1_RedelegationEntry()}
    set {_redelegationEntry = newValue}
  }
  /// Returns true if `redelegationEntry` has been explicitly set.
  var hasRedelegationEntry: Bool {return self._redelegationEntry != nil}
  /// Clears the value of `redelegationEntry`. Subsequent reads from it will return its default value.
  mutating func clearRedelegationEntry() {self._redelegationEntry = nil}

  var balance: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _redelegationEntry: Cosmos_Staking_V1beta1_RedelegationEntry? = nil
}

/// RedelegationResponse is equivalent to a Redelegation except that its entries
/// contain a balance in addition to shares which is more suitable for client
/// responses.
struct Cosmos_Staking_V1beta1_RedelegationResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var redelegation: Cosmos_Staking_V1beta1_Redelegation {
    get {return _redelegation ?? Cosmos_Staking_V1beta1_Redelegation()}
    set {_redelegation = newValue}
  }
  /// Returns true if `redelegation` has been explicitly set.
  var hasRedelegation: Bool {return self._redelegation != nil}
  /// Clears the value of `redelegation`. Subsequent reads from it will return its default value.
  mutating func clearRedelegation() {self._redelegation = nil}

  var entries: [Cosmos_Staking_V1beta1_RedelegationEntryResponse] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _redelegation: Cosmos_Staking_V1beta1_Redelegation? = nil
}

/// Pool is used for tracking bonded and not-bonded token supply of the bond
/// denomination.
struct Cosmos_Staking_V1beta1_Pool: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var notBondedTokens: String = String()

  var bondedTokens: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ValidatorUpdates defines an array of abci.ValidatorUpdate objects.
/// TODO: explore moving this to proto/cosmos/base to separate modules from tendermint dependence
struct Cosmos_Staking_V1beta1_ValidatorUpdates: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var updates: [Tendermint_Abci_ValidatorUpdate] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.staking.v1beta1"

extension Cosmos_Staking_V1beta1_BondStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BOND_STATUS_UNSPECIFIED"),
    1: .same(proto: "BOND_STATUS_UNBONDED"),
    2: .same(proto: "BOND_STATUS_UNBONDING"),
    3: .same(proto: "BOND_STATUS_BONDED"),
  ]
}

extension Cosmos_Staking_V1beta1_Infraction: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INFRACTION_UNSPECIFIED"),
    1: .same(proto: "INFRACTION_DOUBLE_SIGN"),
    2: .same(proto: "INFRACTION_DOWNTIME"),
  ]
}

extension Cosmos_Staking_V1beta1_HistoricalInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HistoricalInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "valset"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._header) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.valset) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._header {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.valset.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.valset, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_HistoricalInfo, rhs: Cosmos_Staking_V1beta1_HistoricalInfo) -> Bool {
    if lhs._header != rhs._header {return false}
    if lhs.valset != rhs.valset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_CommissionRates: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommissionRates"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rate"),
    2: .standard(proto: "max_rate"),
    3: .standard(proto: "max_change_rate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.rate) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.maxRate) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.maxChangeRate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rate.isEmpty {
      try visitor.visitSingularStringField(value: self.rate, fieldNumber: 1)
    }
    if !self.maxRate.isEmpty {
      try visitor.visitSingularStringField(value: self.maxRate, fieldNumber: 2)
    }
    if !self.maxChangeRate.isEmpty {
      try visitor.visitSingularStringField(value: self.maxChangeRate, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_CommissionRates, rhs: Cosmos_Staking_V1beta1_CommissionRates) -> Bool {
    if lhs.rate != rhs.rate {return false}
    if lhs.maxRate != rhs.maxRate {return false}
    if lhs.maxChangeRate != rhs.maxChangeRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_Commission: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Commission"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "commission_rates"),
    2: .standard(proto: "update_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._commissionRates) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._updateTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._commissionRates {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._updateTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_Commission, rhs: Cosmos_Staking_V1beta1_Commission) -> Bool {
    if lhs._commissionRates != rhs._commissionRates {return false}
    if lhs._updateTime != rhs._updateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_Description: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Description"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "moniker"),
    2: .same(proto: "identity"),
    3: .same(proto: "website"),
    4: .standard(proto: "security_contact"),
    5: .same(proto: "details"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.moniker) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.identity) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.website) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.securityContact) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.details) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.moniker.isEmpty {
      try visitor.visitSingularStringField(value: self.moniker, fieldNumber: 1)
    }
    if !self.identity.isEmpty {
      try visitor.visitSingularStringField(value: self.identity, fieldNumber: 2)
    }
    if !self.website.isEmpty {
      try visitor.visitSingularStringField(value: self.website, fieldNumber: 3)
    }
    if !self.securityContact.isEmpty {
      try visitor.visitSingularStringField(value: self.securityContact, fieldNumber: 4)
    }
    if !self.details.isEmpty {
      try visitor.visitSingularStringField(value: self.details, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_Description, rhs: Cosmos_Staking_V1beta1_Description) -> Bool {
    if lhs.moniker != rhs.moniker {return false}
    if lhs.identity != rhs.identity {return false}
    if lhs.website != rhs.website {return false}
    if lhs.securityContact != rhs.securityContact {return false}
    if lhs.details != rhs.details {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_Validator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Validator"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "operator_address"),
    2: .standard(proto: "consensus_pubkey"),
    3: .same(proto: "jailed"),
    4: .same(proto: "status"),
    5: .same(proto: "tokens"),
    6: .standard(proto: "delegator_shares"),
    7: .same(proto: "description"),
    8: .standard(proto: "unbonding_height"),
    9: .standard(proto: "unbonding_time"),
    10: .same(proto: "commission"),
    11: .standard(proto: "min_self_delegation"),
    12: .standard(proto: "unbonding_on_hold_ref_count"),
    13: .standard(proto: "unbonding_ids"),
  ]

  fileprivate class _StorageClass {
    var _operatorAddress: String = String()
    var _consensusPubkey: SwiftProtobuf.Google_Protobuf_Any? = nil
    var _jailed: Bool = false
    var _status: Cosmos_Staking_V1beta1_BondStatus = .unspecified
    var _tokens: String = String()
    var _delegatorShares: String = String()
    var _description_p: Cosmos_Staking_V1beta1_Description? = nil
    var _unbondingHeight: Int64 = 0
    var _unbondingTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _commission: Cosmos_Staking_V1beta1_Commission? = nil
    var _minSelfDelegation: String = String()
    var _unbondingOnHoldRefCount: Int64 = 0
    var _unbondingIds: [UInt64] = []

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _operatorAddress = source._operatorAddress
      _consensusPubkey = source._consensusPubkey
      _jailed = source._jailed
      _status = source._status
      _tokens = source._tokens
      _delegatorShares = source._delegatorShares
      _description_p = source._description_p
      _unbondingHeight = source._unbondingHeight
      _unbondingTime = source._unbondingTime
      _commission = source._commission
      _minSelfDelegation = source._minSelfDelegation
      _unbondingOnHoldRefCount = source._unbondingOnHoldRefCount
      _unbondingIds = source._unbondingIds
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._operatorAddress) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._consensusPubkey) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._jailed) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._tokens) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._delegatorShares) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._description_p) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._unbondingHeight) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._unbondingTime) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._commission) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._minSelfDelegation) }()
        case 12: try { try decoder.decodeSingularInt64Field(value: &_storage._unbondingOnHoldRefCount) }()
        case 13: try { try decoder.decodeRepeatedUInt64Field(value: &_storage._unbondingIds) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._operatorAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._operatorAddress, fieldNumber: 1)
      }
      try { if let v = _storage._consensusPubkey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if _storage._jailed != false {
        try visitor.visitSingularBoolField(value: _storage._jailed, fieldNumber: 3)
      }
      if _storage._status != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 4)
      }
      if !_storage._tokens.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tokens, fieldNumber: 5)
      }
      if !_storage._delegatorShares.isEmpty {
        try visitor.visitSingularStringField(value: _storage._delegatorShares, fieldNumber: 6)
      }
      try { if let v = _storage._description_p {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if _storage._unbondingHeight != 0 {
        try visitor.visitSingularInt64Field(value: _storage._unbondingHeight, fieldNumber: 8)
      }
      try { if let v = _storage._unbondingTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._commission {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if !_storage._minSelfDelegation.isEmpty {
        try visitor.visitSingularStringField(value: _storage._minSelfDelegation, fieldNumber: 11)
      }
      if _storage._unbondingOnHoldRefCount != 0 {
        try visitor.visitSingularInt64Field(value: _storage._unbondingOnHoldRefCount, fieldNumber: 12)
      }
      if !_storage._unbondingIds.isEmpty {
        try visitor.visitPackedUInt64Field(value: _storage._unbondingIds, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_Validator, rhs: Cosmos_Staking_V1beta1_Validator) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._operatorAddress != rhs_storage._operatorAddress {return false}
        if _storage._consensusPubkey != rhs_storage._consensusPubkey {return false}
        if _storage._jailed != rhs_storage._jailed {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._tokens != rhs_storage._tokens {return false}
        if _storage._delegatorShares != rhs_storage._delegatorShares {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._unbondingHeight != rhs_storage._unbondingHeight {return false}
        if _storage._unbondingTime != rhs_storage._unbondingTime {return false}
        if _storage._commission != rhs_storage._commission {return false}
        if _storage._minSelfDelegation != rhs_storage._minSelfDelegation {return false}
        if _storage._unbondingOnHoldRefCount != rhs_storage._unbondingOnHoldRefCount {return false}
        if _storage._unbondingIds != rhs_storage._unbondingIds {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_ValAddresses: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ValAddresses"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "addresses"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.addresses) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.addresses.isEmpty {
      try visitor.visitRepeatedStringField(value: self.addresses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_ValAddresses, rhs: Cosmos_Staking_V1beta1_ValAddresses) -> Bool {
    if lhs.addresses != rhs.addresses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_DVPair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DVPair"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_DVPair, rhs: Cosmos_Staking_V1beta1_DVPair) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_DVPairs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DVPairs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pairs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.pairs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pairs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pairs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_DVPairs, rhs: Cosmos_Staking_V1beta1_DVPairs) -> Bool {
    if lhs.pairs != rhs.pairs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_DVVTriplet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DVVTriplet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_src_address"),
    3: .standard(proto: "validator_dst_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.validatorSrcAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.validatorDstAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.validatorSrcAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorSrcAddress, fieldNumber: 2)
    }
    if !self.validatorDstAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorDstAddress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_DVVTriplet, rhs: Cosmos_Staking_V1beta1_DVVTriplet) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.validatorSrcAddress != rhs.validatorSrcAddress {return false}
    if lhs.validatorDstAddress != rhs.validatorDstAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_DVVTriplets: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DVVTriplets"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "triplets"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.triplets) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.triplets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.triplets, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_DVVTriplets, rhs: Cosmos_Staking_V1beta1_DVVTriplets) -> Bool {
    if lhs.triplets != rhs.triplets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_Delegation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Delegation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_address"),
    3: .same(proto: "shares"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.shares) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 2)
    }
    if !self.shares.isEmpty {
      try visitor.visitSingularStringField(value: self.shares, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_Delegation, rhs: Cosmos_Staking_V1beta1_Delegation) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.shares != rhs.shares {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_UnbondingDelegation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UnbondingDelegation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_address"),
    3: .same(proto: "entries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 2)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_UnbondingDelegation, rhs: Cosmos_Staking_V1beta1_UnbondingDelegation) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_UnbondingDelegationEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UnbondingDelegationEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "creation_height"),
    2: .standard(proto: "completion_time"),
    3: .standard(proto: "initial_balance"),
    4: .same(proto: "balance"),
    5: .standard(proto: "unbonding_id"),
    6: .standard(proto: "unbonding_on_hold_ref_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.creationHeight) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._completionTime) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.initialBalance) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.balance) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.unbondingID) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.unbondingOnHoldRefCount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.creationHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.creationHeight, fieldNumber: 1)
    }
    try { if let v = self._completionTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.initialBalance.isEmpty {
      try visitor.visitSingularStringField(value: self.initialBalance, fieldNumber: 3)
    }
    if !self.balance.isEmpty {
      try visitor.visitSingularStringField(value: self.balance, fieldNumber: 4)
    }
    if self.unbondingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.unbondingID, fieldNumber: 5)
    }
    if self.unbondingOnHoldRefCount != 0 {
      try visitor.visitSingularInt64Field(value: self.unbondingOnHoldRefCount, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_UnbondingDelegationEntry, rhs: Cosmos_Staking_V1beta1_UnbondingDelegationEntry) -> Bool {
    if lhs.creationHeight != rhs.creationHeight {return false}
    if lhs._completionTime != rhs._completionTime {return false}
    if lhs.initialBalance != rhs.initialBalance {return false}
    if lhs.balance != rhs.balance {return false}
    if lhs.unbondingID != rhs.unbondingID {return false}
    if lhs.unbondingOnHoldRefCount != rhs.unbondingOnHoldRefCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_RedelegationEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RedelegationEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "creation_height"),
    2: .standard(proto: "completion_time"),
    3: .standard(proto: "initial_balance"),
    4: .standard(proto: "shares_dst"),
    5: .standard(proto: "unbonding_id"),
    6: .standard(proto: "unbonding_on_hold_ref_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.creationHeight) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._completionTime) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.initialBalance) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.sharesDst) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.unbondingID) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.unbondingOnHoldRefCount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.creationHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.creationHeight, fieldNumber: 1)
    }
    try { if let v = self._completionTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.initialBalance.isEmpty {
      try visitor.visitSingularStringField(value: self.initialBalance, fieldNumber: 3)
    }
    if !self.sharesDst.isEmpty {
      try visitor.visitSingularStringField(value: self.sharesDst, fieldNumber: 4)
    }
    if self.unbondingID != 0 {
      try visitor.visitSingularUInt64Field(value: self.unbondingID, fieldNumber: 5)
    }
    if self.unbondingOnHoldRefCount != 0 {
      try visitor.visitSingularInt64Field(value: self.unbondingOnHoldRefCount, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_RedelegationEntry, rhs: Cosmos_Staking_V1beta1_RedelegationEntry) -> Bool {
    if lhs.creationHeight != rhs.creationHeight {return false}
    if lhs._completionTime != rhs._completionTime {return false}
    if lhs.initialBalance != rhs.initialBalance {return false}
    if lhs.sharesDst != rhs.sharesDst {return false}
    if lhs.unbondingID != rhs.unbondingID {return false}
    if lhs.unbondingOnHoldRefCount != rhs.unbondingOnHoldRefCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_Redelegation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Redelegation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_src_address"),
    3: .standard(proto: "validator_dst_address"),
    4: .same(proto: "entries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.validatorSrcAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.validatorDstAddress) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.validatorSrcAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorSrcAddress, fieldNumber: 2)
    }
    if !self.validatorDstAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorDstAddress, fieldNumber: 3)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_Redelegation, rhs: Cosmos_Staking_V1beta1_Redelegation) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.validatorSrcAddress != rhs.validatorSrcAddress {return false}
    if lhs.validatorDstAddress != rhs.validatorDstAddress {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unbonding_time"),
    2: .standard(proto: "max_validators"),
    3: .standard(proto: "max_entries"),
    4: .standard(proto: "historical_entries"),
    5: .standard(proto: "bond_denom"),
    6: .standard(proto: "min_commission_rate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._unbondingTime) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.maxValidators) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.maxEntries) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.historicalEntries) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.bondDenom) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.minCommissionRate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._unbondingTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.maxValidators != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxValidators, fieldNumber: 2)
    }
    if self.maxEntries != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxEntries, fieldNumber: 3)
    }
    if self.historicalEntries != 0 {
      try visitor.visitSingularUInt32Field(value: self.historicalEntries, fieldNumber: 4)
    }
    if !self.bondDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.bondDenom, fieldNumber: 5)
    }
    if !self.minCommissionRate.isEmpty {
      try visitor.visitSingularStringField(value: self.minCommissionRate, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_Params, rhs: Cosmos_Staking_V1beta1_Params) -> Bool {
    if lhs._unbondingTime != rhs._unbondingTime {return false}
    if lhs.maxValidators != rhs.maxValidators {return false}
    if lhs.maxEntries != rhs.maxEntries {return false}
    if lhs.historicalEntries != rhs.historicalEntries {return false}
    if lhs.bondDenom != rhs.bondDenom {return false}
    if lhs.minCommissionRate != rhs.minCommissionRate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_DelegationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DelegationResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "delegation"),
    2: .same(proto: "balance"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._delegation) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._balance) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._delegation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._balance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_DelegationResponse, rhs: Cosmos_Staking_V1beta1_DelegationResponse) -> Bool {
    if lhs._delegation != rhs._delegation {return false}
    if lhs._balance != rhs._balance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_RedelegationEntryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RedelegationEntryResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "redelegation_entry"),
    4: .same(proto: "balance"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._redelegationEntry) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.balance) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._redelegationEntry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.balance.isEmpty {
      try visitor.visitSingularStringField(value: self.balance, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_RedelegationEntryResponse, rhs: Cosmos_Staking_V1beta1_RedelegationEntryResponse) -> Bool {
    if lhs._redelegationEntry != rhs._redelegationEntry {return false}
    if lhs.balance != rhs.balance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_RedelegationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RedelegationResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "redelegation"),
    2: .same(proto: "entries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._redelegation) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._redelegation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_RedelegationResponse, rhs: Cosmos_Staking_V1beta1_RedelegationResponse) -> Bool {
    if lhs._redelegation != rhs._redelegation {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_Pool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Pool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "not_bonded_tokens"),
    2: .standard(proto: "bonded_tokens"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.notBondedTokens) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.bondedTokens) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.notBondedTokens.isEmpty {
      try visitor.visitSingularStringField(value: self.notBondedTokens, fieldNumber: 1)
    }
    if !self.bondedTokens.isEmpty {
      try visitor.visitSingularStringField(value: self.bondedTokens, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_Pool, rhs: Cosmos_Staking_V1beta1_Pool) -> Bool {
    if lhs.notBondedTokens != rhs.notBondedTokens {return false}
    if lhs.bondedTokens != rhs.bondedTokens {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_ValidatorUpdates: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ValidatorUpdates"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "updates"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.updates) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.updates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.updates, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_ValidatorUpdates, rhs: Cosmos_Staking_V1beta1_ValidatorUpdates) -> Bool {
    if lhs.updates != rhs.updates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
