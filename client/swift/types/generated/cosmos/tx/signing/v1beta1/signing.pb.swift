// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/tx/signing/v1beta1/signing.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// SignMode represents a signing mode with its own security guarantees.
///
/// This enum should be considered a registry of all known sign modes
/// in the Cosmos ecosystem. Apps are not expected to support all known
/// sign modes. Apps that would like to support custom  sign modes are
/// encouraged to open a small PR against this file to add a new case
/// to this SignMode enum describing their sign mode so that different
/// apps have a consistent version of this enum.
enum Cosmos_Tx_Signing_V1beta1_SignMode: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
  /// rejected.
  case unspecified // = 0

  /// SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
  /// verified with raw bytes from Tx.
  case direct // = 1

  /// SIGN_MODE_TEXTUAL is a future signing mode that will verify some
  /// human-readable textual representation on top of the binary representation
  /// from SIGN_MODE_DIRECT.
  ///
  /// Since: cosmos-sdk 0.50
  case textual // = 2

  /// SIGN_MODE_DIRECT_AUX specifies a signing mode which uses
  /// SignDocDirectAux. As opposed to SIGN_MODE_DIRECT, this sign mode does not
  /// require signers signing over other signers' `signer_info`.
  ///
  /// Since: cosmos-sdk 0.46
  case directAux // = 3

  /// SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
  /// Amino JSON and will be removed in the future.
  case legacyAminoJson // = 127

  /// SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
  /// SDK. Ref: https://eips.ethereum.org/EIPS/eip-191
  ///
  /// Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,
  /// but is not implemented on the SDK by default. To enable EIP-191, you need
  /// to pass a custom `TxConfig` that has an implementation of
  /// `SignModeHandler` for EIP-191. The SDK may decide to fully support
  /// EIP-191 in the future.
  ///
  /// Since: cosmos-sdk 0.45.2
  case eip191 // = 191
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .direct
    case 2: self = .textual
    case 3: self = .directAux
    case 127: self = .legacyAminoJson
    case 191: self = .eip191
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .direct: return 1
    case .textual: return 2
    case .directAux: return 3
    case .legacyAminoJson: return 127
    case .eip191: return 191
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Cosmos_Tx_Signing_V1beta1_SignMode] = [
    .unspecified,
    .direct,
    .textual,
    .directAux,
    .legacyAminoJson,
    .eip191,
  ]

}

/// SignatureDescriptors wraps multiple SignatureDescriptor's.
struct Cosmos_Tx_Signing_V1beta1_SignatureDescriptors: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// signatures are the signature descriptors
  var signatures: [Cosmos_Tx_Signing_V1beta1_SignatureDescriptor] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SignatureDescriptor is a convenience type which represents the full data for
/// a signature including the public key of the signer, signing modes and the
/// signature itself. It is primarily used for coordinating signatures between
/// clients.
struct Cosmos_Tx_Signing_V1beta1_SignatureDescriptor: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// public_key is the public key of the signer
  var publicKey: SwiftProtobuf.Google_Protobuf_Any {
    get {return _publicKey ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_publicKey = newValue}
  }
  /// Returns true if `publicKey` has been explicitly set.
  var hasPublicKey: Bool {return self._publicKey != nil}
  /// Clears the value of `publicKey`. Subsequent reads from it will return its default value.
  mutating func clearPublicKey() {self._publicKey = nil}

  var data: Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage {
    get {return _data ?? Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  /// sequence is the sequence of the account, which describes the
  /// number of committed transactions signed by a given address. It is used to prevent
  /// replay attacks.
  var sequence: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Data represents signature data
  struct DataMessage: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// sum is the oneof that specifies whether this represents single or multi-signature data
    var sum: Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.OneOf_Sum? = nil

    /// single represents a single signer
    var single: Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.Single {
      get {
        if case .single(let v)? = sum {return v}
        return Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.Single()
      }
      set {sum = .single(newValue)}
    }

    /// multi represents a multisig signer
    var multi: Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.Multi {
      get {
        if case .multi(let v)? = sum {return v}
        return Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.Multi()
      }
      set {sum = .multi(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    /// sum is the oneof that specifies whether this represents single or multi-signature data
    enum OneOf_Sum: Equatable, Sendable {
      /// single represents a single signer
      case single(Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.Single)
      /// multi represents a multisig signer
      case multi(Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.Multi)

    }

    /// Single is the signature data for a single signer
    struct Single: @unchecked Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// mode is the signing mode of the single signer
      var mode: Cosmos_Tx_Signing_V1beta1_SignMode = .unspecified

      /// signature is the raw signature bytes
      var signature: Data = Data()

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    /// Multi is the signature data for a multisig public key
    struct Multi: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// bitarray specifies which keys within the multisig are signing
      var bitarray: Cosmos_Crypto_Multisig_V1beta1_CompactBitArray {
        get {return _bitarray ?? Cosmos_Crypto_Multisig_V1beta1_CompactBitArray()}
        set {_bitarray = newValue}
      }
      /// Returns true if `bitarray` has been explicitly set.
      var hasBitarray: Bool {return self._bitarray != nil}
      /// Clears the value of `bitarray`. Subsequent reads from it will return its default value.
      mutating func clearBitarray() {self._bitarray = nil}

      /// signatures is the signatures of the multi-signature
      var signatures: [Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage] = []

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _bitarray: Cosmos_Crypto_Multisig_V1beta1_CompactBitArray? = nil
    }

    init() {}
  }

  init() {}

  fileprivate var _publicKey: SwiftProtobuf.Google_Protobuf_Any? = nil
  fileprivate var _data: Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.tx.signing.v1beta1"

extension Cosmos_Tx_Signing_V1beta1_SignMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SIGN_MODE_UNSPECIFIED"),
    1: .same(proto: "SIGN_MODE_DIRECT"),
    2: .same(proto: "SIGN_MODE_TEXTUAL"),
    3: .same(proto: "SIGN_MODE_DIRECT_AUX"),
    127: .same(proto: "SIGN_MODE_LEGACY_AMINO_JSON"),
    191: .same(proto: "SIGN_MODE_EIP_191"),
  ]
}

extension Cosmos_Tx_Signing_V1beta1_SignatureDescriptors: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignatureDescriptors"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signatures"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.signatures) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signatures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.signatures, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Tx_Signing_V1beta1_SignatureDescriptors, rhs: Cosmos_Tx_Signing_V1beta1_SignatureDescriptors) -> Bool {
    if lhs.signatures != rhs.signatures {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Tx_Signing_V1beta1_SignatureDescriptor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignatureDescriptor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_key"),
    2: .same(proto: "data"),
    3: .same(proto: "sequence"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._publicKey) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.sequence) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._publicKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.sequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequence, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Tx_Signing_V1beta1_SignatureDescriptor, rhs: Cosmos_Tx_Signing_V1beta1_SignatureDescriptor) -> Bool {
    if lhs._publicKey != rhs._publicKey {return false}
    if lhs._data != rhs._data {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.protoMessageName + ".Data"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "single"),
    2: .same(proto: "multi"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.Single?
        var hadOneofValue = false
        if let current = self.sum {
          hadOneofValue = true
          if case .single(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.sum = .single(v)
        }
      }()
      case 2: try {
        var v: Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.Multi?
        var hadOneofValue = false
        if let current = self.sum {
          hadOneofValue = true
          if case .multi(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.sum = .multi(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.sum {
    case .single?: try {
      guard case .single(let v)? = self.sum else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .multi?: try {
      guard case .multi(let v)? = self.sum else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage, rhs: Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage) -> Bool {
    if lhs.sum != rhs.sum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.Single: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.protoMessageName + ".Single"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mode"),
    2: .same(proto: "signature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.mode) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mode != .unspecified {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 1)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.Single, rhs: Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.Single) -> Bool {
    if lhs.mode != rhs.mode {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.Multi: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.protoMessageName + ".Multi"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bitarray"),
    2: .same(proto: "signatures"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._bitarray) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.signatures) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._bitarray {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.signatures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.signatures, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.Multi, rhs: Cosmos_Tx_Signing_V1beta1_SignatureDescriptor.DataMessage.Multi) -> Bool {
    if lhs._bitarray != rhs._bitarray {return false}
    if lhs.signatures != rhs.signatures {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
