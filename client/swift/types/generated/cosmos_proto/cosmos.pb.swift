// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos_proto/cosmos.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum CosmosProto_ScalarType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int
  case unspecified // = 0
  case string // = 1
  case bytes // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .string
    case 2: self = .bytes
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .string: return 1
    case .bytes: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [CosmosProto_ScalarType] = [
    .unspecified,
    .string,
    .bytes,
  ]

}

/// InterfaceDescriptor describes an interface type to be used with
/// accepts_interface and implements_interface and declared by declare_interface.
struct CosmosProto_InterfaceDescriptor: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// name is the name of the interface. It should be a short-name (without
  /// a period) such that the fully qualified name of the interface will be
  /// package.name, ex. for the package a.b and interface named C, the
  /// fully-qualified name will be a.b.C.
  var name: String = String()

  /// description is a human-readable description of the interface and its
  /// purpose.
  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ScalarDescriptor describes an scalar type to be used with
/// the scalar field option and declared by declare_scalar.
/// Scalars extend simple protobuf built-in types with additional
/// syntax and semantics, for instance to represent big integers.
/// Scalars should ideally define an encoding such that there is only one
/// valid syntactical representation for a given semantic meaning,
/// i.e. the encoding should be deterministic.
struct CosmosProto_ScalarDescriptor: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// name is the name of the scalar. It should be a short-name (without
  /// a period) such that the fully qualified name of the scalar will be
  /// package.name, ex. for the package a.b and scalar named C, the
  /// fully-qualified name will be a.b.C.
  var name: String = String()

  /// description is a human-readable description of the scalar and its
  /// encoding format. For instance a big integer or decimal scalar should
  /// specify precisely the expected encoding format.
  var description_p: String = String()

  /// field_type is the type of field with which this scalar can be used.
  /// Scalars can be used with one and only one type of field so that
  /// encoding standards and simple and clear. Currently only string and
  /// bytes fields are supported for scalars.
  var fieldType: [CosmosProto_ScalarType] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Extension support defined in cosmos.proto.

// MARK: - Extension Properties

// Swift Extensions on the extended Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_FieldOptions {

  /// accepts_interface is used to annotate that a google.protobuf.Any
  /// field accepts messages that implement the specified interface.
  /// Interfaces should be declared using a declare_interface file option.
  var CosmosProto_acceptsInterface: String {
    get {return getExtensionValue(ext: CosmosProto_Extensions_accepts_interface) ?? String()}
    set {setExtensionValue(ext: CosmosProto_Extensions_accepts_interface, value: newValue)}
  }
  /// Returns true if extension `CosmosProto_Extensions_accepts_interface`
  /// has been explicitly set.
  var hasCosmosProto_acceptsInterface: Bool {
    return hasExtensionValue(ext: CosmosProto_Extensions_accepts_interface)
  }
  /// Clears the value of extension `CosmosProto_Extensions_accepts_interface`.
  /// Subsequent reads from it will return its default value.
  mutating func clearCosmosProto_acceptsInterface() {
    clearExtensionValue(ext: CosmosProto_Extensions_accepts_interface)
  }

  /// scalar is used to indicate that this field follows the formatting defined
  /// by the named scalar which should be declared with declare_scalar. Code
  /// generators may choose to use this information to map this field to a
  /// language-specific type representing the scalar.
  var CosmosProto_scalar: String {
    get {return getExtensionValue(ext: CosmosProto_Extensions_scalar) ?? String()}
    set {setExtensionValue(ext: CosmosProto_Extensions_scalar, value: newValue)}
  }
  /// Returns true if extension `CosmosProto_Extensions_scalar`
  /// has been explicitly set.
  var hasCosmosProto_scalar: Bool {
    return hasExtensionValue(ext: CosmosProto_Extensions_scalar)
  }
  /// Clears the value of extension `CosmosProto_Extensions_scalar`.
  /// Subsequent reads from it will return its default value.
  mutating func clearCosmosProto_scalar() {
    clearExtensionValue(ext: CosmosProto_Extensions_scalar)
  }

  /// field_added_in is used to indicate from which version the field was added.
  var CosmosProto_fieldAddedIn: String {
    get {return getExtensionValue(ext: CosmosProto_Extensions_field_added_in) ?? String()}
    set {setExtensionValue(ext: CosmosProto_Extensions_field_added_in, value: newValue)}
  }
  /// Returns true if extension `CosmosProto_Extensions_field_added_in`
  /// has been explicitly set.
  var hasCosmosProto_fieldAddedIn: Bool {
    return hasExtensionValue(ext: CosmosProto_Extensions_field_added_in)
  }
  /// Clears the value of extension `CosmosProto_Extensions_field_added_in`.
  /// Subsequent reads from it will return its default value.
  mutating func clearCosmosProto_fieldAddedIn() {
    clearExtensionValue(ext: CosmosProto_Extensions_field_added_in)
  }
}

extension SwiftProtobuf.Google_Protobuf_FileOptions {

  /// declare_interface declares an interface type to be used with
  /// accepts_interface and implements_interface. Interface names are
  /// expected to follow the following convention such that their declaration
  /// can be discovered by tools: for a given interface type a.b.C, it is
  /// expected that the declaration will be found in a protobuf file named
  /// a/b/interfaces.proto in the file descriptor set.
  var CosmosProto_declareInterface: [CosmosProto_InterfaceDescriptor] {
    get {return getExtensionValue(ext: CosmosProto_Extensions_declare_interface) ?? []}
    set {setExtensionValue(ext: CosmosProto_Extensions_declare_interface, value: newValue)}
  }

  /// declare_scalar declares a scalar type to be used with
  /// the scalar field option. Scalar names are
  /// expected to follow the following convention such that their declaration
  /// can be discovered by tools: for a given scalar type a.b.C, it is
  /// expected that the declaration will be found in a protobuf file named
  /// a/b/scalars.proto in the file descriptor set.
  var CosmosProto_declareScalar: [CosmosProto_ScalarDescriptor] {
    get {return getExtensionValue(ext: CosmosProto_Extensions_declare_scalar) ?? []}
    set {setExtensionValue(ext: CosmosProto_Extensions_declare_scalar, value: newValue)}
  }

  /// file_added_in is used to indicate from which the version the file was added.
  var CosmosProto_fileAddedIn: String {
    get {return getExtensionValue(ext: CosmosProto_Extensions_file_added_in) ?? String()}
    set {setExtensionValue(ext: CosmosProto_Extensions_file_added_in, value: newValue)}
  }
  /// Returns true if extension `CosmosProto_Extensions_file_added_in`
  /// has been explicitly set.
  var hasCosmosProto_fileAddedIn: Bool {
    return hasExtensionValue(ext: CosmosProto_Extensions_file_added_in)
  }
  /// Clears the value of extension `CosmosProto_Extensions_file_added_in`.
  /// Subsequent reads from it will return its default value.
  mutating func clearCosmosProto_fileAddedIn() {
    clearExtensionValue(ext: CosmosProto_Extensions_file_added_in)
  }
}

extension SwiftProtobuf.Google_Protobuf_MessageOptions {

  /// implements_interface is used to indicate the type name of the interface
  /// that a message implements so that it can be used in google.protobuf.Any
  /// fields that accept that interface. A message can implement multiple
  /// interfaces. Interfaces should be declared using a declare_interface
  /// file option.
  var CosmosProto_implementsInterface: [String] {
    get {return getExtensionValue(ext: CosmosProto_Extensions_implements_interface) ?? []}
    set {setExtensionValue(ext: CosmosProto_Extensions_implements_interface, value: newValue)}
  }

  /// message_added_in is used to indicate from which version the message was added.
  var CosmosProto_messageAddedIn: String {
    get {return getExtensionValue(ext: CosmosProto_Extensions_message_added_in) ?? String()}
    set {setExtensionValue(ext: CosmosProto_Extensions_message_added_in, value: newValue)}
  }
  /// Returns true if extension `CosmosProto_Extensions_message_added_in`
  /// has been explicitly set.
  var hasCosmosProto_messageAddedIn: Bool {
    return hasExtensionValue(ext: CosmosProto_Extensions_message_added_in)
  }
  /// Clears the value of extension `CosmosProto_Extensions_message_added_in`.
  /// Subsequent reads from it will return its default value.
  mutating func clearCosmosProto_messageAddedIn() {
    clearExtensionValue(ext: CosmosProto_Extensions_message_added_in)
  }
}

extension SwiftProtobuf.Google_Protobuf_MethodOptions {

  /// method_added_in is used to indicate from which version the method was added.
  var CosmosProto_methodAddedIn: String {
    get {return getExtensionValue(ext: CosmosProto_Extensions_method_added_in) ?? String()}
    set {setExtensionValue(ext: CosmosProto_Extensions_method_added_in, value: newValue)}
  }
  /// Returns true if extension `CosmosProto_Extensions_method_added_in`
  /// has been explicitly set.
  var hasCosmosProto_methodAddedIn: Bool {
    return hasExtensionValue(ext: CosmosProto_Extensions_method_added_in)
  }
  /// Clears the value of extension `CosmosProto_Extensions_method_added_in`.
  /// Subsequent reads from it will return its default value.
  mutating func clearCosmosProto_methodAddedIn() {
    clearExtensionValue(ext: CosmosProto_Extensions_method_added_in)
  }

}

// MARK: - File's ExtensionMap: CosmosProto_Cosmos_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let CosmosProto_Cosmos_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  CosmosProto_Extensions_method_added_in,
  CosmosProto_Extensions_implements_interface,
  CosmosProto_Extensions_message_added_in,
  CosmosProto_Extensions_accepts_interface,
  CosmosProto_Extensions_scalar,
  CosmosProto_Extensions_field_added_in,
  CosmosProto_Extensions_declare_interface,
  CosmosProto_Extensions_declare_scalar,
  CosmosProto_Extensions_file_added_in
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

/// method_added_in is used to indicate from which version the method was added.
let CosmosProto_Extensions_method_added_in = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtobuf.Google_Protobuf_MethodOptions>(
  _protobuf_fieldNumber: 93001,
  fieldName: "cosmos_proto.method_added_in"
)

/// implements_interface is used to indicate the type name of the interface
/// that a message implements so that it can be used in google.protobuf.Any
/// fields that accept that interface. A message can implement multiple
/// interfaces. Interfaces should be declared using a declare_interface
/// file option.
let CosmosProto_Extensions_implements_interface = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtobuf.Google_Protobuf_MessageOptions>(
  _protobuf_fieldNumber: 93001,
  fieldName: "cosmos_proto.implements_interface"
)

/// message_added_in is used to indicate from which version the message was added.
let CosmosProto_Extensions_message_added_in = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtobuf.Google_Protobuf_MessageOptions>(
  _protobuf_fieldNumber: 93002,
  fieldName: "cosmos_proto.message_added_in"
)

/// accepts_interface is used to annotate that a google.protobuf.Any
/// field accepts messages that implement the specified interface.
/// Interfaces should be declared using a declare_interface file option.
let CosmosProto_Extensions_accepts_interface = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 93001,
  fieldName: "cosmos_proto.accepts_interface"
)

/// scalar is used to indicate that this field follows the formatting defined
/// by the named scalar which should be declared with declare_scalar. Code
/// generators may choose to use this information to map this field to a
/// language-specific type representing the scalar.
let CosmosProto_Extensions_scalar = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 93002,
  fieldName: "cosmos_proto.scalar"
)

/// field_added_in is used to indicate from which version the field was added.
let CosmosProto_Extensions_field_added_in = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 93003,
  fieldName: "cosmos_proto.field_added_in"
)

/// declare_interface declares an interface type to be used with
/// accepts_interface and implements_interface. Interface names are
/// expected to follow the following convention such that their declaration
/// can be discovered by tools: for a given interface type a.b.C, it is
/// expected that the declaration will be found in a protobuf file named
/// a/b/interfaces.proto in the file descriptor set.
let CosmosProto_Extensions_declare_interface = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<CosmosProto_InterfaceDescriptor>, SwiftProtobuf.Google_Protobuf_FileOptions>(
  _protobuf_fieldNumber: 793021,
  fieldName: "cosmos_proto.declare_interface"
)

/// declare_scalar declares a scalar type to be used with
/// the scalar field option. Scalar names are
/// expected to follow the following convention such that their declaration
/// can be discovered by tools: for a given scalar type a.b.C, it is
/// expected that the declaration will be found in a protobuf file named
/// a/b/scalars.proto in the file descriptor set.
let CosmosProto_Extensions_declare_scalar = SwiftProtobuf.MessageExtension<SwiftProtobuf.RepeatedMessageExtensionField<CosmosProto_ScalarDescriptor>, SwiftProtobuf.Google_Protobuf_FileOptions>(
  _protobuf_fieldNumber: 793022,
  fieldName: "cosmos_proto.declare_scalar"
)

/// file_added_in is used to indicate from which the version the file was added.
let CosmosProto_Extensions_file_added_in = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufString>, SwiftProtobuf.Google_Protobuf_FileOptions>(
  _protobuf_fieldNumber: 793023,
  fieldName: "cosmos_proto.file_added_in"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos_proto"

extension CosmosProto_ScalarType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SCALAR_TYPE_UNSPECIFIED"),
    1: .same(proto: "SCALAR_TYPE_STRING"),
    2: .same(proto: "SCALAR_TYPE_BYTES"),
  ]
}

extension CosmosProto_InterfaceDescriptor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InterfaceDescriptor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CosmosProto_InterfaceDescriptor, rhs: CosmosProto_InterfaceDescriptor) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CosmosProto_ScalarDescriptor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ScalarDescriptor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
    3: .standard(proto: "field_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeRepeatedEnumField(value: &self.fieldType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.fieldType.isEmpty {
      try visitor.visitPackedEnumField(value: self.fieldType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CosmosProto_ScalarDescriptor, rhs: CosmosProto_ScalarDescriptor) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.fieldType != rhs.fieldType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
