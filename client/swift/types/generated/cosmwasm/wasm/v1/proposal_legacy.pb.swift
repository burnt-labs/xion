// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmwasm/wasm/v1/proposal_legacy.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
/// an explicit StoreCodeProposal. To submit WASM code to the system,
/// a simple MsgStoreCode can be invoked from the x/gov module via
/// a v1 governance proposal.
///
/// NOTE: This message was marked as deprecated in the .proto file.
struct Cosmwasm_Wasm_V1_StoreCodeProposal: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Title is a short summary
  var title: String = String()

  /// Description is a human readable text
  var description_p: String = String()

  /// RunAs is the address that is passed to the contract's environment as sender
  var runAs: String = String()

  /// WASMByteCode can be raw or gzip compressed
  var wasmByteCode: Data = Data()

  /// InstantiatePermission to apply on contract creation, optional
  var instantiatePermission: Cosmwasm_Wasm_V1_AccessConfig {
    get {return _instantiatePermission ?? Cosmwasm_Wasm_V1_AccessConfig()}
    set {_instantiatePermission = newValue}
  }
  /// Returns true if `instantiatePermission` has been explicitly set.
  var hasInstantiatePermission: Bool {return self._instantiatePermission != nil}
  /// Clears the value of `instantiatePermission`. Subsequent reads from it will return its default value.
  mutating func clearInstantiatePermission() {self._instantiatePermission = nil}

  /// UnpinCode code on upload, optional
  var unpinCode: Bool = false

  /// Source is the URL where the code is hosted
  var source: String = String()

  /// Builder is the docker image used to build the code deterministically, used
  /// for smart contract verification
  var builder: String = String()

  /// CodeHash is the SHA256 sum of the code outputted by builder, used for smart
  /// contract verification
  var codeHash: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _instantiatePermission: Cosmwasm_Wasm_V1_AccessConfig? = nil
}

/// Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
/// an explicit InstantiateContractProposal. To instantiate a contract,
/// a simple MsgInstantiateContract can be invoked from the x/gov module via
/// a v1 governance proposal.
///
/// NOTE: This message was marked as deprecated in the .proto file.
struct Cosmwasm_Wasm_V1_InstantiateContractProposal: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Title is a short summary
  var title: String = String()

  /// Description is a human readable text
  var description_p: String = String()

  /// RunAs is the address that is passed to the contract's environment as sender
  var runAs: String = String()

  /// Admin is an optional address that can execute migrations
  var admin: String = String()

  /// CodeID is the reference to the stored WASM code
  var codeID: UInt64 = 0

  /// Label is optional metadata to be stored with a contract instance.
  var label: String = String()

  /// Msg json encoded message to be passed to the contract on instantiation
  var msg: Data = Data()

  /// Funds coins that are transferred to the contract on instantiation
  var funds: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
/// an explicit InstantiateContract2Proposal. To instantiate contract 2,
/// a simple MsgInstantiateContract2 can be invoked from the x/gov module via
/// a v1 governance proposal.
///
/// NOTE: This message was marked as deprecated in the .proto file.
struct Cosmwasm_Wasm_V1_InstantiateContract2Proposal: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Title is a short summary
  var title: String = String()

  /// Description is a human readable text
  var description_p: String = String()

  /// RunAs is the address that is passed to the contract's environment as sender
  var runAs: String = String()

  /// Admin is an optional address that can execute migrations
  var admin: String = String()

  /// CodeID is the reference to the stored WASM code
  var codeID: UInt64 = 0

  /// Label is optional metadata to be stored with a contract instance.
  var label: String = String()

  /// Msg json encode message to be passed to the contract on instantiation
  var msg: Data = Data()

  /// Funds coins that are transferred to the contract on instantiation
  var funds: [Cosmos_Base_V1beta1_Coin] = []

  /// Salt is an arbitrary value provided by the sender. Size can be 1 to 64.
  var salt: Data = Data()

  /// FixMsg include the msg value into the hash for the predictable address.
  /// Default is false
  var fixMsg: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
/// an explicit MigrateContractProposal. To migrate a contract,
/// a simple MsgMigrateContract can be invoked from the x/gov module via
/// a v1 governance proposal.
///
/// NOTE: This message was marked as deprecated in the .proto file.
struct Cosmwasm_Wasm_V1_MigrateContractProposal: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Title is a short summary
  var title: String = String()

  /// Description is a human readable text
  var description_p: String = String()

  /// Contract is the address of the smart contract
  var contract: String = String()

  /// CodeID references the new WASM code
  var codeID: UInt64 = 0

  /// Msg json encoded message to be passed to the contract on migration
  var msg: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
/// an explicit SudoContractProposal. To call sudo on a contract,
/// a simple MsgSudoContract can be invoked from the x/gov module via
/// a v1 governance proposal.
///
/// NOTE: This message was marked as deprecated in the .proto file.
struct Cosmwasm_Wasm_V1_SudoContractProposal: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Title is a short summary
  var title: String = String()

  /// Description is a human readable text
  var description_p: String = String()

  /// Contract is the address of the smart contract
  var contract: String = String()

  /// Msg json encoded message to be passed to the contract as sudo
  var msg: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
/// an explicit ExecuteContractProposal. To call execute on a contract,
/// a simple MsgExecuteContract can be invoked from the x/gov module via
/// a v1 governance proposal.
///
/// NOTE: This message was marked as deprecated in the .proto file.
struct Cosmwasm_Wasm_V1_ExecuteContractProposal: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Title is a short summary
  var title: String = String()

  /// Description is a human readable text
  var description_p: String = String()

  /// RunAs is the address that is passed to the contract's environment as sender
  var runAs: String = String()

  /// Contract is the address of the smart contract
  var contract: String = String()

  /// Msg json encoded message to be passed to the contract as execute
  var msg: Data = Data()

  /// Funds coins that are transferred to the contract on instantiation
  var funds: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
/// an explicit UpdateAdminProposal. To set an admin for a contract,
/// a simple MsgUpdateAdmin can be invoked from the x/gov module via
/// a v1 governance proposal.
///
/// NOTE: This message was marked as deprecated in the .proto file.
struct Cosmwasm_Wasm_V1_UpdateAdminProposal: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Title is a short summary
  var title: String = String()

  /// Description is a human readable text
  var description_p: String = String()

  /// NewAdmin address to be set
  var newAdmin: String = String()

  /// Contract is the address of the smart contract
  var contract: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
/// an explicit ClearAdminProposal. To clear the admin of a contract,
/// a simple MsgClearAdmin can be invoked from the x/gov module via
/// a v1 governance proposal.
///
/// NOTE: This message was marked as deprecated in the .proto file.
struct Cosmwasm_Wasm_V1_ClearAdminProposal: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Title is a short summary
  var title: String = String()

  /// Description is a human readable text
  var description_p: String = String()

  /// Contract is the address of the smart contract
  var contract: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
/// an explicit PinCodesProposal. To pin a set of code ids in the wasmvm
/// cache, a simple MsgPinCodes can be invoked from the x/gov module via
/// a v1 governance proposal.
///
/// NOTE: This message was marked as deprecated in the .proto file.
struct Cosmwasm_Wasm_V1_PinCodesProposal: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Title is a short summary
  var title: String = String()

  /// Description is a human readable text
  var description_p: String = String()

  /// CodeIDs references the new WASM codes
  var codeIds: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
/// an explicit UnpinCodesProposal. To unpin a set of code ids in the wasmvm
/// cache, a simple MsgUnpinCodes can be invoked from the x/gov module via
/// a v1 governance proposal.
///
/// NOTE: This message was marked as deprecated in the .proto file.
struct Cosmwasm_Wasm_V1_UnpinCodesProposal: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Title is a short summary
  var title: String = String()

  /// Description is a human readable text
  var description_p: String = String()

  /// CodeIDs references the WASM codes
  var codeIds: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// AccessConfigUpdate contains the code id and the access config to be
/// applied.
struct Cosmwasm_Wasm_V1_AccessConfigUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// CodeID is the reference to the stored WASM code to be updated
  var codeID: UInt64 = 0

  /// InstantiatePermission to apply to the set of code ids
  var instantiatePermission: Cosmwasm_Wasm_V1_AccessConfig {
    get {return _instantiatePermission ?? Cosmwasm_Wasm_V1_AccessConfig()}
    set {_instantiatePermission = newValue}
  }
  /// Returns true if `instantiatePermission` has been explicitly set.
  var hasInstantiatePermission: Bool {return self._instantiatePermission != nil}
  /// Clears the value of `instantiatePermission`. Subsequent reads from it will return its default value.
  mutating func clearInstantiatePermission() {self._instantiatePermission = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _instantiatePermission: Cosmwasm_Wasm_V1_AccessConfig? = nil
}

/// Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
/// an explicit UpdateInstantiateConfigProposal. To update instantiate config
/// to a set of code ids, a simple MsgUpdateInstantiateConfig can be invoked from
/// the x/gov module via a v1 governance proposal.
///
/// NOTE: This message was marked as deprecated in the .proto file.
struct Cosmwasm_Wasm_V1_UpdateInstantiateConfigProposal: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Title is a short summary
  var title: String = String()

  /// Description is a human readable text
  var description_p: String = String()

  /// AccessConfigUpdate contains the list of code ids and the access config
  /// to be applied.
  var accessConfigUpdates: [Cosmwasm_Wasm_V1_AccessConfigUpdate] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Deprecated: Do not use. Since wasmd v0.40, there is no longer a need for
/// an explicit StoreAndInstantiateContractProposal. To store and instantiate
/// the contract, a simple MsgStoreAndInstantiateContract can be invoked from
/// the x/gov module via a v1 governance proposal.
///
/// NOTE: This message was marked as deprecated in the .proto file.
struct Cosmwasm_Wasm_V1_StoreAndInstantiateContractProposal: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Title is a short summary
  var title: String = String()

  /// Description is a human readable text
  var description_p: String = String()

  /// RunAs is the address that is passed to the contract's environment as sender
  var runAs: String = String()

  /// WASMByteCode can be raw or gzip compressed
  var wasmByteCode: Data = Data()

  /// InstantiatePermission to apply on contract creation, optional
  var instantiatePermission: Cosmwasm_Wasm_V1_AccessConfig {
    get {return _instantiatePermission ?? Cosmwasm_Wasm_V1_AccessConfig()}
    set {_instantiatePermission = newValue}
  }
  /// Returns true if `instantiatePermission` has been explicitly set.
  var hasInstantiatePermission: Bool {return self._instantiatePermission != nil}
  /// Clears the value of `instantiatePermission`. Subsequent reads from it will return its default value.
  mutating func clearInstantiatePermission() {self._instantiatePermission = nil}

  /// UnpinCode code on upload, optional
  var unpinCode: Bool = false

  /// Admin is an optional address that can execute migrations
  var admin: String = String()

  /// Label is optional metadata to be stored with a contract instance.
  var label: String = String()

  /// Msg json encoded message to be passed to the contract on instantiation
  var msg: Data = Data()

  /// Funds coins that are transferred to the contract on instantiation
  var funds: [Cosmos_Base_V1beta1_Coin] = []

  /// Source is the URL where the code is hosted
  var source: String = String()

  /// Builder is the docker image used to build the code deterministically, used
  /// for smart contract verification
  var builder: String = String()

  /// CodeHash is the SHA256 sum of the code outputted by builder, used for smart
  /// contract verification
  var codeHash: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _instantiatePermission: Cosmwasm_Wasm_V1_AccessConfig? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmwasm.wasm.v1"

extension Cosmwasm_Wasm_V1_StoreCodeProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StoreCodeProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "run_as"),
    4: .standard(proto: "wasm_byte_code"),
    7: .standard(proto: "instantiate_permission"),
    8: .standard(proto: "unpin_code"),
    9: .same(proto: "source"),
    10: .same(proto: "builder"),
    11: .standard(proto: "code_hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.runAs) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.wasmByteCode) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._instantiatePermission) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.unpinCode) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.source) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.builder) }()
      case 11: try { try decoder.decodeSingularBytesField(value: &self.codeHash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.runAs.isEmpty {
      try visitor.visitSingularStringField(value: self.runAs, fieldNumber: 3)
    }
    if !self.wasmByteCode.isEmpty {
      try visitor.visitSingularBytesField(value: self.wasmByteCode, fieldNumber: 4)
    }
    try { if let v = self._instantiatePermission {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if self.unpinCode != false {
      try visitor.visitSingularBoolField(value: self.unpinCode, fieldNumber: 8)
    }
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 9)
    }
    if !self.builder.isEmpty {
      try visitor.visitSingularStringField(value: self.builder, fieldNumber: 10)
    }
    if !self.codeHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.codeHash, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmwasm_Wasm_V1_StoreCodeProposal, rhs: Cosmwasm_Wasm_V1_StoreCodeProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.runAs != rhs.runAs {return false}
    if lhs.wasmByteCode != rhs.wasmByteCode {return false}
    if lhs._instantiatePermission != rhs._instantiatePermission {return false}
    if lhs.unpinCode != rhs.unpinCode {return false}
    if lhs.source != rhs.source {return false}
    if lhs.builder != rhs.builder {return false}
    if lhs.codeHash != rhs.codeHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmwasm_Wasm_V1_InstantiateContractProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InstantiateContractProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "run_as"),
    4: .same(proto: "admin"),
    5: .standard(proto: "code_id"),
    6: .same(proto: "label"),
    7: .same(proto: "msg"),
    8: .same(proto: "funds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.runAs) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.admin) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.codeID) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.label) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.msg) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.funds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.runAs.isEmpty {
      try visitor.visitSingularStringField(value: self.runAs, fieldNumber: 3)
    }
    if !self.admin.isEmpty {
      try visitor.visitSingularStringField(value: self.admin, fieldNumber: 4)
    }
    if self.codeID != 0 {
      try visitor.visitSingularUInt64Field(value: self.codeID, fieldNumber: 5)
    }
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 6)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularBytesField(value: self.msg, fieldNumber: 7)
    }
    if !self.funds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.funds, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmwasm_Wasm_V1_InstantiateContractProposal, rhs: Cosmwasm_Wasm_V1_InstantiateContractProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.runAs != rhs.runAs {return false}
    if lhs.admin != rhs.admin {return false}
    if lhs.codeID != rhs.codeID {return false}
    if lhs.label != rhs.label {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.funds != rhs.funds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmwasm_Wasm_V1_InstantiateContract2Proposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InstantiateContract2Proposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "run_as"),
    4: .same(proto: "admin"),
    5: .standard(proto: "code_id"),
    6: .same(proto: "label"),
    7: .same(proto: "msg"),
    8: .same(proto: "funds"),
    9: .same(proto: "salt"),
    10: .standard(proto: "fix_msg"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.runAs) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.admin) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.codeID) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.label) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.msg) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.funds) }()
      case 9: try { try decoder.decodeSingularBytesField(value: &self.salt) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.fixMsg) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.runAs.isEmpty {
      try visitor.visitSingularStringField(value: self.runAs, fieldNumber: 3)
    }
    if !self.admin.isEmpty {
      try visitor.visitSingularStringField(value: self.admin, fieldNumber: 4)
    }
    if self.codeID != 0 {
      try visitor.visitSingularUInt64Field(value: self.codeID, fieldNumber: 5)
    }
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 6)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularBytesField(value: self.msg, fieldNumber: 7)
    }
    if !self.funds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.funds, fieldNumber: 8)
    }
    if !self.salt.isEmpty {
      try visitor.visitSingularBytesField(value: self.salt, fieldNumber: 9)
    }
    if self.fixMsg != false {
      try visitor.visitSingularBoolField(value: self.fixMsg, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmwasm_Wasm_V1_InstantiateContract2Proposal, rhs: Cosmwasm_Wasm_V1_InstantiateContract2Proposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.runAs != rhs.runAs {return false}
    if lhs.admin != rhs.admin {return false}
    if lhs.codeID != rhs.codeID {return false}
    if lhs.label != rhs.label {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.funds != rhs.funds {return false}
    if lhs.salt != rhs.salt {return false}
    if lhs.fixMsg != rhs.fixMsg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmwasm_Wasm_V1_MigrateContractProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MigrateContractProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    4: .same(proto: "contract"),
    5: .standard(proto: "code_id"),
    6: .same(proto: "msg"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.contract) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.codeID) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.msg) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.contract.isEmpty {
      try visitor.visitSingularStringField(value: self.contract, fieldNumber: 4)
    }
    if self.codeID != 0 {
      try visitor.visitSingularUInt64Field(value: self.codeID, fieldNumber: 5)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularBytesField(value: self.msg, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmwasm_Wasm_V1_MigrateContractProposal, rhs: Cosmwasm_Wasm_V1_MigrateContractProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.contract != rhs.contract {return false}
    if lhs.codeID != rhs.codeID {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmwasm_Wasm_V1_SudoContractProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SudoContractProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .same(proto: "contract"),
    4: .same(proto: "msg"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.contract) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.msg) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.contract.isEmpty {
      try visitor.visitSingularStringField(value: self.contract, fieldNumber: 3)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularBytesField(value: self.msg, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmwasm_Wasm_V1_SudoContractProposal, rhs: Cosmwasm_Wasm_V1_SudoContractProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.contract != rhs.contract {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmwasm_Wasm_V1_ExecuteContractProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExecuteContractProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "run_as"),
    4: .same(proto: "contract"),
    5: .same(proto: "msg"),
    6: .same(proto: "funds"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.runAs) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.contract) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.msg) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.funds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.runAs.isEmpty {
      try visitor.visitSingularStringField(value: self.runAs, fieldNumber: 3)
    }
    if !self.contract.isEmpty {
      try visitor.visitSingularStringField(value: self.contract, fieldNumber: 4)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularBytesField(value: self.msg, fieldNumber: 5)
    }
    if !self.funds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.funds, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmwasm_Wasm_V1_ExecuteContractProposal, rhs: Cosmwasm_Wasm_V1_ExecuteContractProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.runAs != rhs.runAs {return false}
    if lhs.contract != rhs.contract {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.funds != rhs.funds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmwasm_Wasm_V1_UpdateAdminProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateAdminProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "new_admin"),
    4: .same(proto: "contract"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.newAdmin) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.contract) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.newAdmin.isEmpty {
      try visitor.visitSingularStringField(value: self.newAdmin, fieldNumber: 3)
    }
    if !self.contract.isEmpty {
      try visitor.visitSingularStringField(value: self.contract, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmwasm_Wasm_V1_UpdateAdminProposal, rhs: Cosmwasm_Wasm_V1_UpdateAdminProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.newAdmin != rhs.newAdmin {return false}
    if lhs.contract != rhs.contract {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmwasm_Wasm_V1_ClearAdminProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClearAdminProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .same(proto: "contract"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.contract) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.contract.isEmpty {
      try visitor.visitSingularStringField(value: self.contract, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmwasm_Wasm_V1_ClearAdminProposal, rhs: Cosmwasm_Wasm_V1_ClearAdminProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.contract != rhs.contract {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmwasm_Wasm_V1_PinCodesProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PinCodesProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "code_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeRepeatedUInt64Field(value: &self.codeIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.codeIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.codeIds, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmwasm_Wasm_V1_PinCodesProposal, rhs: Cosmwasm_Wasm_V1_PinCodesProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.codeIds != rhs.codeIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmwasm_Wasm_V1_UnpinCodesProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UnpinCodesProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "code_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeRepeatedUInt64Field(value: &self.codeIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.codeIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.codeIds, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmwasm_Wasm_V1_UnpinCodesProposal, rhs: Cosmwasm_Wasm_V1_UnpinCodesProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.codeIds != rhs.codeIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmwasm_Wasm_V1_AccessConfigUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccessConfigUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "code_id"),
    2: .standard(proto: "instantiate_permission"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.codeID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._instantiatePermission) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.codeID != 0 {
      try visitor.visitSingularUInt64Field(value: self.codeID, fieldNumber: 1)
    }
    try { if let v = self._instantiatePermission {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmwasm_Wasm_V1_AccessConfigUpdate, rhs: Cosmwasm_Wasm_V1_AccessConfigUpdate) -> Bool {
    if lhs.codeID != rhs.codeID {return false}
    if lhs._instantiatePermission != rhs._instantiatePermission {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmwasm_Wasm_V1_UpdateInstantiateConfigProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateInstantiateConfigProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "access_config_updates"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.accessConfigUpdates) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.accessConfigUpdates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.accessConfigUpdates, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmwasm_Wasm_V1_UpdateInstantiateConfigProposal, rhs: Cosmwasm_Wasm_V1_UpdateInstantiateConfigProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.accessConfigUpdates != rhs.accessConfigUpdates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmwasm_Wasm_V1_StoreAndInstantiateContractProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StoreAndInstantiateContractProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "run_as"),
    4: .standard(proto: "wasm_byte_code"),
    5: .standard(proto: "instantiate_permission"),
    6: .standard(proto: "unpin_code"),
    7: .same(proto: "admin"),
    8: .same(proto: "label"),
    9: .same(proto: "msg"),
    10: .same(proto: "funds"),
    11: .same(proto: "source"),
    12: .same(proto: "builder"),
    13: .standard(proto: "code_hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.runAs) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.wasmByteCode) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._instantiatePermission) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.unpinCode) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.admin) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.label) }()
      case 9: try { try decoder.decodeSingularBytesField(value: &self.msg) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.funds) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.source) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.builder) }()
      case 13: try { try decoder.decodeSingularBytesField(value: &self.codeHash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.runAs.isEmpty {
      try visitor.visitSingularStringField(value: self.runAs, fieldNumber: 3)
    }
    if !self.wasmByteCode.isEmpty {
      try visitor.visitSingularBytesField(value: self.wasmByteCode, fieldNumber: 4)
    }
    try { if let v = self._instantiatePermission {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.unpinCode != false {
      try visitor.visitSingularBoolField(value: self.unpinCode, fieldNumber: 6)
    }
    if !self.admin.isEmpty {
      try visitor.visitSingularStringField(value: self.admin, fieldNumber: 7)
    }
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 8)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularBytesField(value: self.msg, fieldNumber: 9)
    }
    if !self.funds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.funds, fieldNumber: 10)
    }
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 11)
    }
    if !self.builder.isEmpty {
      try visitor.visitSingularStringField(value: self.builder, fieldNumber: 12)
    }
    if !self.codeHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.codeHash, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmwasm_Wasm_V1_StoreAndInstantiateContractProposal, rhs: Cosmwasm_Wasm_V1_StoreAndInstantiateContractProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.runAs != rhs.runAs {return false}
    if lhs.wasmByteCode != rhs.wasmByteCode {return false}
    if lhs._instantiatePermission != rhs._instantiatePermission {return false}
    if lhs.unpinCode != rhs.unpinCode {return false}
    if lhs.admin != rhs.admin {return false}
    if lhs.label != rhs.label {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.funds != rhs.funds {return false}
    if lhs.source != rhs.source {return false}
    if lhs.builder != rhs.builder {return false}
    if lhs.codeHash != rhs.codeHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
