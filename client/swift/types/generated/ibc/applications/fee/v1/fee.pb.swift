// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ibc/applications/fee/v1/fee.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Fee defines the ICS29 receive, acknowledgement and timeout fees
struct Ibc_Applications_Fee_V1_Fee: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the packet receive fee
  var recvFee: [Cosmos_Base_V1beta1_Coin] = []

  /// the packet acknowledgement fee
  var ackFee: [Cosmos_Base_V1beta1_Coin] = []

  /// the packet timeout fee
  var timeoutFee: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PacketFee contains ICS29 relayer fees, refund address and optional list of permitted relayers
struct Ibc_Applications_Fee_V1_PacketFee: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// fee encapsulates the recv, ack and timeout fees associated with an IBC packet
  var fee: Ibc_Applications_Fee_V1_Fee {
    get {return _fee ?? Ibc_Applications_Fee_V1_Fee()}
    set {_fee = newValue}
  }
  /// Returns true if `fee` has been explicitly set.
  var hasFee: Bool {return self._fee != nil}
  /// Clears the value of `fee`. Subsequent reads from it will return its default value.
  mutating func clearFee() {self._fee = nil}

  /// the refund address for unspent fees
  var refundAddress: String = String()

  /// optional list of relayers permitted to receive fees
  var relayers: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fee: Ibc_Applications_Fee_V1_Fee? = nil
}

/// PacketFees contains a list of type PacketFee
struct Ibc_Applications_Fee_V1_PacketFees: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// list of packet fees
  var packetFees: [Ibc_Applications_Fee_V1_PacketFee] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// IdentifiedPacketFees contains a list of type PacketFee and associated PacketId
struct Ibc_Applications_Fee_V1_IdentifiedPacketFees: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// unique packet identifier comprised of the channel ID, port ID and sequence
  var packetID: Ibc_Core_Channel_V1_PacketId {
    get {return _packetID ?? Ibc_Core_Channel_V1_PacketId()}
    set {_packetID = newValue}
  }
  /// Returns true if `packetID` has been explicitly set.
  var hasPacketID: Bool {return self._packetID != nil}
  /// Clears the value of `packetID`. Subsequent reads from it will return its default value.
  mutating func clearPacketID() {self._packetID = nil}

  /// list of packet fees
  var packetFees: [Ibc_Applications_Fee_V1_PacketFee] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _packetID: Ibc_Core_Channel_V1_PacketId? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ibc.applications.fee.v1"

extension Ibc_Applications_Fee_V1_Fee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Fee"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "recv_fee"),
    2: .standard(proto: "ack_fee"),
    3: .standard(proto: "timeout_fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.recvFee) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.ackFee) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.timeoutFee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.recvFee.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.recvFee, fieldNumber: 1)
    }
    if !self.ackFee.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ackFee, fieldNumber: 2)
    }
    if !self.timeoutFee.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.timeoutFee, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Applications_Fee_V1_Fee, rhs: Ibc_Applications_Fee_V1_Fee) -> Bool {
    if lhs.recvFee != rhs.recvFee {return false}
    if lhs.ackFee != rhs.ackFee {return false}
    if lhs.timeoutFee != rhs.timeoutFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Applications_Fee_V1_PacketFee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PacketFee"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fee"),
    2: .standard(proto: "refund_address"),
    3: .same(proto: "relayers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._fee) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.refundAddress) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.relayers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._fee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.refundAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.refundAddress, fieldNumber: 2)
    }
    if !self.relayers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.relayers, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Applications_Fee_V1_PacketFee, rhs: Ibc_Applications_Fee_V1_PacketFee) -> Bool {
    if lhs._fee != rhs._fee {return false}
    if lhs.refundAddress != rhs.refundAddress {return false}
    if lhs.relayers != rhs.relayers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Applications_Fee_V1_PacketFees: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PacketFees"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "packet_fees"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.packetFees) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.packetFees.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.packetFees, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Applications_Fee_V1_PacketFees, rhs: Ibc_Applications_Fee_V1_PacketFees) -> Bool {
    if lhs.packetFees != rhs.packetFees {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Applications_Fee_V1_IdentifiedPacketFees: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IdentifiedPacketFees"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "packet_id"),
    2: .standard(proto: "packet_fees"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._packetID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.packetFees) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._packetID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.packetFees.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.packetFees, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Applications_Fee_V1_IdentifiedPacketFees, rhs: Ibc_Applications_Fee_V1_IdentifiedPacketFees) -> Bool {
    if lhs._packetID != rhs._packetID {return false}
    if lhs.packetFees != rhs.packetFees {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
