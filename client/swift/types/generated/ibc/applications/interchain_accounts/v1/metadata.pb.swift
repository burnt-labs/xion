// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ibc/applications/interchain_accounts/v1/metadata.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Metadata defines a set of protocol specific data encoded into the ICS27 channel version bytestring
/// See ICS004: https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#Versioning
struct Ibc_Applications_InterchainAccounts_V1_Metadata: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// version defines the ICS27 protocol version
  var version: String = String()

  /// controller_connection_id is the connection identifier associated with the controller chain
  var controllerConnectionID: String = String()

  /// host_connection_id is the connection identifier associated with the host chain
  var hostConnectionID: String = String()

  /// address defines the interchain account address to be fulfilled upon the OnChanOpenTry handshake step
  /// NOTE: the address field is empty on the OnChanOpenInit handshake step
  var address: String = String()

  /// encoding defines the supported codec format
  var encoding: String = String()

  /// tx_type defines the type of transactions the interchain account can execute
  var txType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ibc.applications.interchain_accounts.v1"

extension Ibc_Applications_InterchainAccounts_V1_Metadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Metadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .standard(proto: "controller_connection_id"),
    3: .standard(proto: "host_connection_id"),
    4: .same(proto: "address"),
    5: .same(proto: "encoding"),
    6: .standard(proto: "tx_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.controllerConnectionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.hostConnectionID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.encoding) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.txType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 1)
    }
    if !self.controllerConnectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.controllerConnectionID, fieldNumber: 2)
    }
    if !self.hostConnectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.hostConnectionID, fieldNumber: 3)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 4)
    }
    if !self.encoding.isEmpty {
      try visitor.visitSingularStringField(value: self.encoding, fieldNumber: 5)
    }
    if !self.txType.isEmpty {
      try visitor.visitSingularStringField(value: self.txType, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Applications_InterchainAccounts_V1_Metadata, rhs: Ibc_Applications_InterchainAccounts_V1_Metadata) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.controllerConnectionID != rhs.controllerConnectionID {return false}
    if lhs.hostConnectionID != rhs.hostConnectionID {return false}
    if lhs.address != rhs.address {return false}
    if lhs.encoding != rhs.encoding {return false}
    if lhs.txType != rhs.txType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
