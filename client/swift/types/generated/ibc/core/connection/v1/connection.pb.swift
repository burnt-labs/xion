// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ibc/core/connection/v1/connection.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// State defines if a connection is in one of the following states:
/// INIT, TRYOPEN, OPEN or UNINITIALIZED.
enum Ibc_Core_Connection_V1_State: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Default State
  case uninitializedUnspecified // = 0

  /// A connection end has just started the opening handshake.
  case init_ // = 1

  /// A connection end has acknowledged the handshake step on the counterparty
  /// chain.
  case tryopen // = 2

  /// A connection end has completed the handshake.
  case `open` // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .uninitializedUnspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .uninitializedUnspecified
    case 1: self = .init_
    case 2: self = .tryopen
    case 3: self = .open
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .uninitializedUnspecified: return 0
    case .init_: return 1
    case .tryopen: return 2
    case .open: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Ibc_Core_Connection_V1_State] = [
    .uninitializedUnspecified,
    .init_,
    .tryopen,
    .open,
  ]

}

/// ConnectionEnd defines a stateful object on a chain connected to another
/// separate one.
/// NOTE: there must only be 2 defined ConnectionEnds to establish
/// a connection between two chains.
struct Ibc_Core_Connection_V1_ConnectionEnd: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// client associated with this connection.
  var clientID: String = String()

  /// IBC version which can be utilised to determine encodings or protocols for
  /// channels or packets utilising this connection.
  var versions: [Ibc_Core_Connection_V1_Version] = []

  /// current state of the connection end.
  var state: Ibc_Core_Connection_V1_State = .uninitializedUnspecified

  /// counterparty chain associated with this connection.
  var counterparty: Ibc_Core_Connection_V1_Counterparty {
    get {return _counterparty ?? Ibc_Core_Connection_V1_Counterparty()}
    set {_counterparty = newValue}
  }
  /// Returns true if `counterparty` has been explicitly set.
  var hasCounterparty: Bool {return self._counterparty != nil}
  /// Clears the value of `counterparty`. Subsequent reads from it will return its default value.
  mutating func clearCounterparty() {self._counterparty = nil}

  /// delay period that must pass before a consensus state can be used for
  /// packet-verification NOTE: delay period logic is only implemented by some
  /// clients.
  var delayPeriod: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _counterparty: Ibc_Core_Connection_V1_Counterparty? = nil
}

/// IdentifiedConnection defines a connection with additional connection
/// identifier field.
struct Ibc_Core_Connection_V1_IdentifiedConnection: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// connection identifier.
  var id: String = String()

  /// client associated with this connection.
  var clientID: String = String()

  /// IBC version which can be utilised to determine encodings or protocols for
  /// channels or packets utilising this connection
  var versions: [Ibc_Core_Connection_V1_Version] = []

  /// current state of the connection end.
  var state: Ibc_Core_Connection_V1_State = .uninitializedUnspecified

  /// counterparty chain associated with this connection.
  var counterparty: Ibc_Core_Connection_V1_Counterparty {
    get {return _counterparty ?? Ibc_Core_Connection_V1_Counterparty()}
    set {_counterparty = newValue}
  }
  /// Returns true if `counterparty` has been explicitly set.
  var hasCounterparty: Bool {return self._counterparty != nil}
  /// Clears the value of `counterparty`. Subsequent reads from it will return its default value.
  mutating func clearCounterparty() {self._counterparty = nil}

  /// delay period associated with this connection.
  var delayPeriod: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _counterparty: Ibc_Core_Connection_V1_Counterparty? = nil
}

/// Counterparty defines the counterparty chain associated with a connection end.
struct Ibc_Core_Connection_V1_Counterparty: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// identifies the client on the counterparty chain associated with a given
  /// connection.
  var clientID: String = String()

  /// identifies the connection end on the counterparty chain associated with a
  /// given connection.
  var connectionID: String = String()

  /// commitment merkle prefix of the counterparty chain.
  var prefix: Ibc_Core_Commitment_V1_MerklePrefix {
    get {return _prefix ?? Ibc_Core_Commitment_V1_MerklePrefix()}
    set {_prefix = newValue}
  }
  /// Returns true if `prefix` has been explicitly set.
  var hasPrefix: Bool {return self._prefix != nil}
  /// Clears the value of `prefix`. Subsequent reads from it will return its default value.
  mutating func clearPrefix() {self._prefix = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _prefix: Ibc_Core_Commitment_V1_MerklePrefix? = nil
}

/// ClientPaths define all the connection paths for a client state.
struct Ibc_Core_Connection_V1_ClientPaths: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// list of connection paths
  var paths: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ConnectionPaths define all the connection paths for a given client state.
struct Ibc_Core_Connection_V1_ConnectionPaths: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// client state unique identifier
  var clientID: String = String()

  /// list of connection paths
  var paths: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Version defines the versioning scheme used to negotiate the IBC verison in
/// the connection handshake.
struct Ibc_Core_Connection_V1_Version: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// unique version identifier
  var identifier: String = String()

  /// list of features compatible with the specified identifier
  var features: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Params defines the set of Connection parameters.
struct Ibc_Core_Connection_V1_Params: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// maximum expected time per block (in nanoseconds), used to enforce block delay. This parameter should reflect the
  /// largest amount of time that the chain might reasonably take to produce the next block under normal operating
  /// conditions. A safe choice is 3-5x the expected time per block.
  var maxExpectedTimePerBlock: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ibc.core.connection.v1"

extension Ibc_Core_Connection_V1_State: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATE_UNINITIALIZED_UNSPECIFIED"),
    1: .same(proto: "STATE_INIT"),
    2: .same(proto: "STATE_TRYOPEN"),
    3: .same(proto: "STATE_OPEN"),
  ]
}

extension Ibc_Core_Connection_V1_ConnectionEnd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectionEnd"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .same(proto: "versions"),
    3: .same(proto: "state"),
    4: .same(proto: "counterparty"),
    5: .standard(proto: "delay_period"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.versions) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._counterparty) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.delayPeriod) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    if !self.versions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.versions, fieldNumber: 2)
    }
    if self.state != .uninitializedUnspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 3)
    }
    try { if let v = self._counterparty {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.delayPeriod != 0 {
      try visitor.visitSingularUInt64Field(value: self.delayPeriod, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Connection_V1_ConnectionEnd, rhs: Ibc_Core_Connection_V1_ConnectionEnd) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.versions != rhs.versions {return false}
    if lhs.state != rhs.state {return false}
    if lhs._counterparty != rhs._counterparty {return false}
    if lhs.delayPeriod != rhs.delayPeriod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Connection_V1_IdentifiedConnection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IdentifiedConnection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "client_id"),
    3: .same(proto: "versions"),
    4: .same(proto: "state"),
    5: .same(proto: "counterparty"),
    6: .standard(proto: "delay_period"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.versions) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._counterparty) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.delayPeriod) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 2)
    }
    if !self.versions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.versions, fieldNumber: 3)
    }
    if self.state != .uninitializedUnspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 4)
    }
    try { if let v = self._counterparty {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.delayPeriod != 0 {
      try visitor.visitSingularUInt64Field(value: self.delayPeriod, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Connection_V1_IdentifiedConnection, rhs: Ibc_Core_Connection_V1_IdentifiedConnection) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.versions != rhs.versions {return false}
    if lhs.state != rhs.state {return false}
    if lhs._counterparty != rhs._counterparty {return false}
    if lhs.delayPeriod != rhs.delayPeriod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Connection_V1_Counterparty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Counterparty"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .standard(proto: "connection_id"),
    3: .same(proto: "prefix"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._prefix) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 2)
    }
    try { if let v = self._prefix {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Connection_V1_Counterparty, rhs: Ibc_Core_Connection_V1_Counterparty) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs._prefix != rhs._prefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Connection_V1_ClientPaths: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClientPaths"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "paths"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.paths) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.paths.isEmpty {
      try visitor.visitRepeatedStringField(value: self.paths, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Connection_V1_ClientPaths, rhs: Ibc_Core_Connection_V1_ClientPaths) -> Bool {
    if lhs.paths != rhs.paths {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Connection_V1_ConnectionPaths: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectionPaths"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .same(proto: "paths"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.paths) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    if !self.paths.isEmpty {
      try visitor.visitRepeatedStringField(value: self.paths, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Connection_V1_ConnectionPaths, rhs: Ibc_Core_Connection_V1_ConnectionPaths) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.paths != rhs.paths {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Connection_V1_Version: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Version"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .same(proto: "features"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.identifier) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.features) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identifier.isEmpty {
      try visitor.visitSingularStringField(value: self.identifier, fieldNumber: 1)
    }
    if !self.features.isEmpty {
      try visitor.visitRepeatedStringField(value: self.features, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Connection_V1_Version, rhs: Ibc_Core_Connection_V1_Version) -> Bool {
    if lhs.identifier != rhs.identifier {return false}
    if lhs.features != rhs.features {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Core_Connection_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_expected_time_per_block"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.maxExpectedTimePerBlock) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.maxExpectedTimePerBlock != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxExpectedTimePerBlock, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Core_Connection_V1_Params, rhs: Ibc_Core_Connection_V1_Params) -> Bool {
    if lhs.maxExpectedTimePerBlock != rhs.maxExpectedTimePerBlock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
