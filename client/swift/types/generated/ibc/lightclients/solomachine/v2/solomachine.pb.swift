// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ibc/lightclients/solomachine/v2/solomachine.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// DataType defines the type of solo machine proof being created. This is done
/// to preserve uniqueness of different data sign byte encodings.
enum Ibc_Lightclients_Solomachine_V2_DataType: SwiftProtobuf.Enum, Swift.CaseIterable {
  typealias RawValue = Int

  /// Default State
  case uninitializedUnspecified // = 0

  /// Data type for client state verification
  case clientState // = 1

  /// Data type for consensus state verification
  case consensusState // = 2

  /// Data type for connection state verification
  case connectionState // = 3

  /// Data type for channel state verification
  case channelState // = 4

  /// Data type for packet commitment verification
  case packetCommitment // = 5

  /// Data type for packet acknowledgement verification
  case packetAcknowledgement // = 6

  /// Data type for packet receipt absence verification
  case packetReceiptAbsence // = 7

  /// Data type for next sequence recv verification
  case nextSequenceRecv // = 8

  /// Data type for header verification
  case header // = 9
  case UNRECOGNIZED(Int)

  init() {
    self = .uninitializedUnspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .uninitializedUnspecified
    case 1: self = .clientState
    case 2: self = .consensusState
    case 3: self = .connectionState
    case 4: self = .channelState
    case 5: self = .packetCommitment
    case 6: self = .packetAcknowledgement
    case 7: self = .packetReceiptAbsence
    case 8: self = .nextSequenceRecv
    case 9: self = .header
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .uninitializedUnspecified: return 0
    case .clientState: return 1
    case .consensusState: return 2
    case .connectionState: return 3
    case .channelState: return 4
    case .packetCommitment: return 5
    case .packetAcknowledgement: return 6
    case .packetReceiptAbsence: return 7
    case .nextSequenceRecv: return 8
    case .header: return 9
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Ibc_Lightclients_Solomachine_V2_DataType] = [
    .uninitializedUnspecified,
    .clientState,
    .consensusState,
    .connectionState,
    .channelState,
    .packetCommitment,
    .packetAcknowledgement,
    .packetReceiptAbsence,
    .nextSequenceRecv,
    .header,
  ]

}

/// ClientState defines a solo machine client that tracks the current consensus
/// state and if the client is frozen.
struct Ibc_Lightclients_Solomachine_V2_ClientState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// latest sequence of the client state
  var sequence: UInt64 = 0

  /// frozen sequence of the solo machine
  var isFrozen: Bool = false

  var consensusState: Ibc_Lightclients_Solomachine_V2_ConsensusState {
    get {return _consensusState ?? Ibc_Lightclients_Solomachine_V2_ConsensusState()}
    set {_consensusState = newValue}
  }
  /// Returns true if `consensusState` has been explicitly set.
  var hasConsensusState: Bool {return self._consensusState != nil}
  /// Clears the value of `consensusState`. Subsequent reads from it will return its default value.
  mutating func clearConsensusState() {self._consensusState = nil}

  /// when set to true, will allow governance to update a solo machine client.
  /// The client will be unfrozen if it is frozen.
  var allowUpdateAfterProposal: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _consensusState: Ibc_Lightclients_Solomachine_V2_ConsensusState? = nil
}

/// ConsensusState defines a solo machine consensus state. The sequence of a
/// consensus state is contained in the "height" key used in storing the
/// consensus state.
struct Ibc_Lightclients_Solomachine_V2_ConsensusState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// public key of the solo machine
  var publicKey: SwiftProtobuf.Google_Protobuf_Any {
    get {return _publicKey ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_publicKey = newValue}
  }
  /// Returns true if `publicKey` has been explicitly set.
  var hasPublicKey: Bool {return self._publicKey != nil}
  /// Clears the value of `publicKey`. Subsequent reads from it will return its default value.
  mutating func clearPublicKey() {self._publicKey = nil}

  /// diversifier allows the same public key to be re-used across different solo
  /// machine clients (potentially on different chains) without being considered
  /// misbehaviour.
  var diversifier: String = String()

  var timestamp: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _publicKey: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// Header defines a solo machine consensus header
struct Ibc_Lightclients_Solomachine_V2_Header: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// sequence to update solo machine public key at
  var sequence: UInt64 = 0

  var timestamp: UInt64 = 0

  var signature: Data = Data()

  var newPublicKey: SwiftProtobuf.Google_Protobuf_Any {
    get {return _newPublicKey ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_newPublicKey = newValue}
  }
  /// Returns true if `newPublicKey` has been explicitly set.
  var hasNewPublicKey: Bool {return self._newPublicKey != nil}
  /// Clears the value of `newPublicKey`. Subsequent reads from it will return its default value.
  mutating func clearNewPublicKey() {self._newPublicKey = nil}

  var newDiversifier: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _newPublicKey: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// Misbehaviour defines misbehaviour for a solo machine which consists
/// of a sequence and two signatures over different messages at that sequence.
struct Ibc_Lightclients_Solomachine_V2_Misbehaviour: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientID: String = String()

  var sequence: UInt64 = 0

  var signatureOne: Ibc_Lightclients_Solomachine_V2_SignatureAndData {
    get {return _signatureOne ?? Ibc_Lightclients_Solomachine_V2_SignatureAndData()}
    set {_signatureOne = newValue}
  }
  /// Returns true if `signatureOne` has been explicitly set.
  var hasSignatureOne: Bool {return self._signatureOne != nil}
  /// Clears the value of `signatureOne`. Subsequent reads from it will return its default value.
  mutating func clearSignatureOne() {self._signatureOne = nil}

  var signatureTwo: Ibc_Lightclients_Solomachine_V2_SignatureAndData {
    get {return _signatureTwo ?? Ibc_Lightclients_Solomachine_V2_SignatureAndData()}
    set {_signatureTwo = newValue}
  }
  /// Returns true if `signatureTwo` has been explicitly set.
  var hasSignatureTwo: Bool {return self._signatureTwo != nil}
  /// Clears the value of `signatureTwo`. Subsequent reads from it will return its default value.
  mutating func clearSignatureTwo() {self._signatureTwo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _signatureOne: Ibc_Lightclients_Solomachine_V2_SignatureAndData? = nil
  fileprivate var _signatureTwo: Ibc_Lightclients_Solomachine_V2_SignatureAndData? = nil
}

/// SignatureAndData contains a signature and the data signed over to create that
/// signature.
struct Ibc_Lightclients_Solomachine_V2_SignatureAndData: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var signature: Data = Data()

  var dataType: Ibc_Lightclients_Solomachine_V2_DataType = .uninitializedUnspecified

  var data: Data = Data()

  var timestamp: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TimestampedSignatureData contains the signature data and the timestamp of the
/// signature.
struct Ibc_Lightclients_Solomachine_V2_TimestampedSignatureData: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var signatureData: Data = Data()

  var timestamp: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SignBytes defines the signed bytes used for signature verification.
struct Ibc_Lightclients_Solomachine_V2_SignBytes: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sequence: UInt64 = 0

  var timestamp: UInt64 = 0

  var diversifier: String = String()

  /// type of the data used
  var dataType: Ibc_Lightclients_Solomachine_V2_DataType = .uninitializedUnspecified

  /// marshaled data
  var data: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// HeaderData returns the SignBytes data for update verification.
struct Ibc_Lightclients_Solomachine_V2_HeaderData: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// header public key
  var newPubKey: SwiftProtobuf.Google_Protobuf_Any {
    get {return _newPubKey ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_newPubKey = newValue}
  }
  /// Returns true if `newPubKey` has been explicitly set.
  var hasNewPubKey: Bool {return self._newPubKey != nil}
  /// Clears the value of `newPubKey`. Subsequent reads from it will return its default value.
  mutating func clearNewPubKey() {self._newPubKey = nil}

  /// header diversifier
  var newDiversifier: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _newPubKey: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// ClientStateData returns the SignBytes data for client state verification.
struct Ibc_Lightclients_Solomachine_V2_ClientStateData: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var path: Data = Data()

  var clientState: SwiftProtobuf.Google_Protobuf_Any {
    get {return _clientState ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_clientState = newValue}
  }
  /// Returns true if `clientState` has been explicitly set.
  var hasClientState: Bool {return self._clientState != nil}
  /// Clears the value of `clientState`. Subsequent reads from it will return its default value.
  mutating func clearClientState() {self._clientState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _clientState: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// ConsensusStateData returns the SignBytes data for consensus state
/// verification.
struct Ibc_Lightclients_Solomachine_V2_ConsensusStateData: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var path: Data = Data()

  var consensusState: SwiftProtobuf.Google_Protobuf_Any {
    get {return _consensusState ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_consensusState = newValue}
  }
  /// Returns true if `consensusState` has been explicitly set.
  var hasConsensusState: Bool {return self._consensusState != nil}
  /// Clears the value of `consensusState`. Subsequent reads from it will return its default value.
  mutating func clearConsensusState() {self._consensusState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _consensusState: SwiftProtobuf.Google_Protobuf_Any? = nil
}

/// ConnectionStateData returns the SignBytes data for connection state
/// verification.
struct Ibc_Lightclients_Solomachine_V2_ConnectionStateData: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var path: Data = Data()

  var connection: Ibc_Core_Connection_V1_ConnectionEnd {
    get {return _connection ?? Ibc_Core_Connection_V1_ConnectionEnd()}
    set {_connection = newValue}
  }
  /// Returns true if `connection` has been explicitly set.
  var hasConnection: Bool {return self._connection != nil}
  /// Clears the value of `connection`. Subsequent reads from it will return its default value.
  mutating func clearConnection() {self._connection = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _connection: Ibc_Core_Connection_V1_ConnectionEnd? = nil
}

/// ChannelStateData returns the SignBytes data for channel state
/// verification.
struct Ibc_Lightclients_Solomachine_V2_ChannelStateData: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var path: Data = Data()

  var channel: Ibc_Core_Channel_V1_Channel {
    get {return _channel ?? Ibc_Core_Channel_V1_Channel()}
    set {_channel = newValue}
  }
  /// Returns true if `channel` has been explicitly set.
  var hasChannel: Bool {return self._channel != nil}
  /// Clears the value of `channel`. Subsequent reads from it will return its default value.
  mutating func clearChannel() {self._channel = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _channel: Ibc_Core_Channel_V1_Channel? = nil
}

/// PacketCommitmentData returns the SignBytes data for packet commitment
/// verification.
struct Ibc_Lightclients_Solomachine_V2_PacketCommitmentData: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var path: Data = Data()

  var commitment: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PacketAcknowledgementData returns the SignBytes data for acknowledgement
/// verification.
struct Ibc_Lightclients_Solomachine_V2_PacketAcknowledgementData: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var path: Data = Data()

  var acknowledgement: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PacketReceiptAbsenceData returns the SignBytes data for
/// packet receipt absence verification.
struct Ibc_Lightclients_Solomachine_V2_PacketReceiptAbsenceData: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var path: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// NextSequenceRecvData returns the SignBytes data for verification of the next
/// sequence to be received.
struct Ibc_Lightclients_Solomachine_V2_NextSequenceRecvData: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var path: Data = Data()

  var nextSeqRecv: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ibc.lightclients.solomachine.v2"

extension Ibc_Lightclients_Solomachine_V2_DataType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DATA_TYPE_UNINITIALIZED_UNSPECIFIED"),
    1: .same(proto: "DATA_TYPE_CLIENT_STATE"),
    2: .same(proto: "DATA_TYPE_CONSENSUS_STATE"),
    3: .same(proto: "DATA_TYPE_CONNECTION_STATE"),
    4: .same(proto: "DATA_TYPE_CHANNEL_STATE"),
    5: .same(proto: "DATA_TYPE_PACKET_COMMITMENT"),
    6: .same(proto: "DATA_TYPE_PACKET_ACKNOWLEDGEMENT"),
    7: .same(proto: "DATA_TYPE_PACKET_RECEIPT_ABSENCE"),
    8: .same(proto: "DATA_TYPE_NEXT_SEQUENCE_RECV"),
    9: .same(proto: "DATA_TYPE_HEADER"),
  ]
}

extension Ibc_Lightclients_Solomachine_V2_ClientState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClientState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sequence"),
    2: .standard(proto: "is_frozen"),
    3: .standard(proto: "consensus_state"),
    4: .standard(proto: "allow_update_after_proposal"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.sequence) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isFrozen) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._consensusState) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.allowUpdateAfterProposal) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.sequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequence, fieldNumber: 1)
    }
    if self.isFrozen != false {
      try visitor.visitSingularBoolField(value: self.isFrozen, fieldNumber: 2)
    }
    try { if let v = self._consensusState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.allowUpdateAfterProposal != false {
      try visitor.visitSingularBoolField(value: self.allowUpdateAfterProposal, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Solomachine_V2_ClientState, rhs: Ibc_Lightclients_Solomachine_V2_ClientState) -> Bool {
    if lhs.sequence != rhs.sequence {return false}
    if lhs.isFrozen != rhs.isFrozen {return false}
    if lhs._consensusState != rhs._consensusState {return false}
    if lhs.allowUpdateAfterProposal != rhs.allowUpdateAfterProposal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Solomachine_V2_ConsensusState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConsensusState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_key"),
    2: .same(proto: "diversifier"),
    3: .same(proto: "timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._publicKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.diversifier) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._publicKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.diversifier.isEmpty {
      try visitor.visitSingularStringField(value: self.diversifier, fieldNumber: 2)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Solomachine_V2_ConsensusState, rhs: Ibc_Lightclients_Solomachine_V2_ConsensusState) -> Bool {
    if lhs._publicKey != rhs._publicKey {return false}
    if lhs.diversifier != rhs.diversifier {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Solomachine_V2_Header: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Header"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sequence"),
    2: .same(proto: "timestamp"),
    3: .same(proto: "signature"),
    4: .standard(proto: "new_public_key"),
    5: .standard(proto: "new_diversifier"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.sequence) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._newPublicKey) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.newDiversifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.sequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequence, fieldNumber: 1)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 2)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 3)
    }
    try { if let v = self._newPublicKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.newDiversifier.isEmpty {
      try visitor.visitSingularStringField(value: self.newDiversifier, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Solomachine_V2_Header, rhs: Ibc_Lightclients_Solomachine_V2_Header) -> Bool {
    if lhs.sequence != rhs.sequence {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs._newPublicKey != rhs._newPublicKey {return false}
    if lhs.newDiversifier != rhs.newDiversifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Solomachine_V2_Misbehaviour: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Misbehaviour"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .same(proto: "sequence"),
    3: .standard(proto: "signature_one"),
    4: .standard(proto: "signature_two"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.sequence) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._signatureOne) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._signatureTwo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 1)
    }
    if self.sequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequence, fieldNumber: 2)
    }
    try { if let v = self._signatureOne {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._signatureTwo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Solomachine_V2_Misbehaviour, rhs: Ibc_Lightclients_Solomachine_V2_Misbehaviour) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs._signatureOne != rhs._signatureOne {return false}
    if lhs._signatureTwo != rhs._signatureTwo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Solomachine_V2_SignatureAndData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignatureAndData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signature"),
    2: .standard(proto: "data_type"),
    3: .same(proto: "data"),
    4: .same(proto: "timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.dataType) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 1)
    }
    if self.dataType != .uninitializedUnspecified {
      try visitor.visitSingularEnumField(value: self.dataType, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 3)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Solomachine_V2_SignatureAndData, rhs: Ibc_Lightclients_Solomachine_V2_SignatureAndData) -> Bool {
    if lhs.signature != rhs.signature {return false}
    if lhs.dataType != rhs.dataType {return false}
    if lhs.data != rhs.data {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Solomachine_V2_TimestampedSignatureData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TimestampedSignatureData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signature_data"),
    2: .same(proto: "timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.signatureData) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signatureData.isEmpty {
      try visitor.visitSingularBytesField(value: self.signatureData, fieldNumber: 1)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Solomachine_V2_TimestampedSignatureData, rhs: Ibc_Lightclients_Solomachine_V2_TimestampedSignatureData) -> Bool {
    if lhs.signatureData != rhs.signatureData {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Solomachine_V2_SignBytes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignBytes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sequence"),
    2: .same(proto: "timestamp"),
    3: .same(proto: "diversifier"),
    4: .standard(proto: "data_type"),
    5: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.sequence) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.diversifier) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.dataType) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequence, fieldNumber: 1)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 2)
    }
    if !self.diversifier.isEmpty {
      try visitor.visitSingularStringField(value: self.diversifier, fieldNumber: 3)
    }
    if self.dataType != .uninitializedUnspecified {
      try visitor.visitSingularEnumField(value: self.dataType, fieldNumber: 4)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Solomachine_V2_SignBytes, rhs: Ibc_Lightclients_Solomachine_V2_SignBytes) -> Bool {
    if lhs.sequence != rhs.sequence {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.diversifier != rhs.diversifier {return false}
    if lhs.dataType != rhs.dataType {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Solomachine_V2_HeaderData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HeaderData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "new_pub_key"),
    2: .standard(proto: "new_diversifier"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._newPubKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.newDiversifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._newPubKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.newDiversifier.isEmpty {
      try visitor.visitSingularStringField(value: self.newDiversifier, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Solomachine_V2_HeaderData, rhs: Ibc_Lightclients_Solomachine_V2_HeaderData) -> Bool {
    if lhs._newPubKey != rhs._newPubKey {return false}
    if lhs.newDiversifier != rhs.newDiversifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Solomachine_V2_ClientStateData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClientStateData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .standard(proto: "client_state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._clientState) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.path.isEmpty {
      try visitor.visitSingularBytesField(value: self.path, fieldNumber: 1)
    }
    try { if let v = self._clientState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Solomachine_V2_ClientStateData, rhs: Ibc_Lightclients_Solomachine_V2_ClientStateData) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs._clientState != rhs._clientState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Solomachine_V2_ConsensusStateData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConsensusStateData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .standard(proto: "consensus_state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._consensusState) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.path.isEmpty {
      try visitor.visitSingularBytesField(value: self.path, fieldNumber: 1)
    }
    try { if let v = self._consensusState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Solomachine_V2_ConsensusStateData, rhs: Ibc_Lightclients_Solomachine_V2_ConsensusStateData) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs._consensusState != rhs._consensusState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Solomachine_V2_ConnectionStateData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectionStateData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "connection"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._connection) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.path.isEmpty {
      try visitor.visitSingularBytesField(value: self.path, fieldNumber: 1)
    }
    try { if let v = self._connection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Solomachine_V2_ConnectionStateData, rhs: Ibc_Lightclients_Solomachine_V2_ConnectionStateData) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs._connection != rhs._connection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Solomachine_V2_ChannelStateData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChannelStateData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "channel"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._channel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.path.isEmpty {
      try visitor.visitSingularBytesField(value: self.path, fieldNumber: 1)
    }
    try { if let v = self._channel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Solomachine_V2_ChannelStateData, rhs: Ibc_Lightclients_Solomachine_V2_ChannelStateData) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs._channel != rhs._channel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Solomachine_V2_PacketCommitmentData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PacketCommitmentData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "commitment"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.commitment) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitSingularBytesField(value: self.path, fieldNumber: 1)
    }
    if !self.commitment.isEmpty {
      try visitor.visitSingularBytesField(value: self.commitment, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Solomachine_V2_PacketCommitmentData, rhs: Ibc_Lightclients_Solomachine_V2_PacketCommitmentData) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.commitment != rhs.commitment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Solomachine_V2_PacketAcknowledgementData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PacketAcknowledgementData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "acknowledgement"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.acknowledgement) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitSingularBytesField(value: self.path, fieldNumber: 1)
    }
    if !self.acknowledgement.isEmpty {
      try visitor.visitSingularBytesField(value: self.acknowledgement, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Solomachine_V2_PacketAcknowledgementData, rhs: Ibc_Lightclients_Solomachine_V2_PacketAcknowledgementData) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.acknowledgement != rhs.acknowledgement {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Solomachine_V2_PacketReceiptAbsenceData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PacketReceiptAbsenceData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.path) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitSingularBytesField(value: self.path, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Solomachine_V2_PacketReceiptAbsenceData, rhs: Ibc_Lightclients_Solomachine_V2_PacketReceiptAbsenceData) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ibc_Lightclients_Solomachine_V2_NextSequenceRecvData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NextSequenceRecvData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .standard(proto: "next_seq_recv"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.nextSeqRecv) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitSingularBytesField(value: self.path, fieldNumber: 1)
    }
    if self.nextSeqRecv != 0 {
      try visitor.visitSingularUInt64Field(value: self.nextSeqRecv, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ibc_Lightclients_Solomachine_V2_NextSequenceRecvData, rhs: Ibc_Lightclients_Solomachine_V2_NextSequenceRecvData) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.nextSeqRecv != rhs.nextSeqRecv {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
