syntax = "proto3";
package feeabstraction.feeabs.v1beta1;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "feeabstraction/feeabs/v1beta1/params.proto";
import "feeabstraction/feeabs/v1beta1/proposal.proto";

option go_package = "github.com/burnt-labs/xion/x/feeabs/types";

// Msg defines the wasm Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // SendQueryIbcDenomTWAP sends a twap query to osmosis
  rpc SendQueryIbcDenomTWAP(MsgSendQueryIbcDenomTWAP)
      returns (MsgSendQueryIbcDenomTWAPResponse);

  // SwapCrossChain submits a swap cross chain request.
  rpc SwapCrossChain(MsgSwapCrossChain) returns (MsgSwapCrossChainResponse);

  // FundFeeAbsModuleAccount funds to feeabs module account.
  rpc FundFeeAbsModuleAccount(MsgFundFeeAbsModuleAccount)
      returns (MsgFundFeeAbsModuleAccountResponse);

  // UpdateParams defines a governance operation for updating the x/feeabs
  // module parameters. The authority is defined in the keeper.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse) {}

  rpc AddHostZone(MsgAddHostZone) returns (MsgAddHostZoneResponse) {}
  rpc UpdateHostZone(MsgUpdateHostZone) returns (MsgUpdateHostZoneResponse) {}
  rpc RemoveHostZone(MsgRemoveHostZone) returns (MsgRemoveHostZoneResponse) {}
}

// MsgFundFeeAbsModuleAccount
message MsgFundFeeAbsModuleAccount {
  option (cosmos.msg.v1.signer) = "sender";

  // sender is the that actor that signed the messages
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  repeated cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"amount\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgFundFeeAbsModuleAccountResponse
message MsgFundFeeAbsModuleAccountResponse {}

// MsgSendQueryIbcDenomTWAP
message MsgSendQueryIbcDenomTWAP {
  option (cosmos.msg.v1.signer) = "sender";

  // Sender is the that actor that signed the messages
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgSendQueryIbcDenomTWAPResponse
message MsgSendQueryIbcDenomTWAPResponse {}

// MsgSwapCrossChain
message MsgSwapCrossChain {
  option (cosmos.msg.v1.signer) = "sender";

  // Sender is the that actor that signed the messages
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string ibc_denom = 2;
}

// MsgSwapCrossChainResponse
message MsgSwapCrossChainResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // params defines the x/feeabs parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgAddHostZone is the Msg/AddHostZone request type.
message MsgAddHostZone {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // the host chain config
  HostChainFeeAbsConfig host_chain_config = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgAddHostZoneResponse
message MsgAddHostZoneResponse {}

// MsgUpdateHostZone is the Msg/UpdateHostZone request type.
message MsgUpdateHostZone {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // the host chain config
  HostChainFeeAbsConfig host_chain_config = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateHostZoneResponse
message MsgUpdateHostZoneResponse {}

// MsgRemoveHostZone is the Msg/RemoveHostZone request type.
message MsgRemoveHostZone {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string ibc_denom = 2;
}

// MsgRemoveHostZoneResponse
message MsgRemoveHostZoneResponse {}
