package keeper_test

import (
	b64 "encoding/base64"
	"testing"

	verify "github.com/burnt-labs/xion/x/dkim/keeper"
	"github.com/consensys/gnark-crypto/ecc/bn254/fr"
	"github.com/stretchr/testify/require"
	"github.com/vocdoni/circom2gnark/parser"
	"gotest.tools/assert"
)

const TX_BODY_MAX_BYTES = 512

func TestVerify(t *testing.T) {
	// assign email salt from email used to prove
	email, err := b64.StdEncoding.DecodeString("sAcYdn1nulpzJIM0RMaX6Vn5GPPGXuHxM//AfW7b7yU=")
	require.NoError(t, err)
	var emailBz [32]byte
	copy(emailBz[:], email)
	emailHash, err := fr.LittleEndian.Element(&emailBz)
	require.NoError(t, err)
	dkim, err := b64.StdEncoding.DecodeString("iEeNSGFNAiTctrIgoVuE40DFz/ATm+ip5RBx3HfHqQ4=")
	require.NoError(t, err)
	var dkimBz [32]byte
	copy(dkimBz[:], dkim)
	dkimHash, err := fr.LittleEndian.Element(&dkimBz)
	tx := "CqIBCp8BChwvY29zbW9zLmJhbmsudjFiZXRhMS5Nc2dTZW5kEn8KP3hpb24xczN1YWU1MDUydTVnNzd3ZmxheHd5aDJ1dHg5OWU3aDZjNjJhNjI5M3J5cnh0Z3F2djhncXhlZ3J0axIreGlvbjFxYWYyeGZseDVqM2FndGx2cWs1dmhqcGV1aGw2ZzQ1aHhzaHdxahoPCgV1eGlvbhIGMTAwMDAwEhYSFAoOCgV1eGlvbhIFNjAwMDAQwJoMGgZ4aW9uLTEgCw=="
	require.NoError(t, err)
	txBz, err := verify.CalculateTxBodyCommitment(tx)
	require.NoError(t, err)
	inputs := []string{txBz.String(), emailHash.String(), dkimHash.String()}

	vkey64 := "eyJ2a19hbHBoYV8xIjpbIjIwNDkxMTkyODA1MzkwNDg1Mjk5MTUzMDA5NzczNTk0NTM0OTQwMTg5MjYxODY2MjI4NDQ3OTE4MDY4NjU4NDcxOTcwNDgxNzYzMDQyIiwiOTM4MzQ4NTM2MzA1MzI5MDIwMDkxODM0NzE1NjE1NzgzNjU2NjU2Mjk2Nzk5NDAzOTcxMjI3MzQ0OTkwMjYyMTI2NjE3ODU0NTk1OCIsIjEiXSwidmtfYmV0YV8yIjpbWyI2Mzc1NjE0MzUxNjg4NzI1MjA2NDAzOTQ4MjYyODY4OTYyNzkzNjI1NzQ0MDQzNzk0MzA1NzE1MjIyMDExNTI4NDU5NjU2NzM4NzMxIiwiNDI1MjgyMjg3ODc1ODMwMDg1OTEyMzg5Nzk4MTQ1MDU5MTM1MzUzMzA3MzQxMzE5Nzc3MTc2ODY1MTQ0MjY2NTc1MjI1OTM5NzEzMiJdLFsiMTA1MDUyNDI2MjYzNzAyNjIyNzc1NTI5MDEwODIwOTQzNTY2OTc0MDk4MzU2ODAyMjA1OTA5NzE4NzMxNzExNDAzNzEzMzEyMDY4NTYiLCIyMTg0NzAzNTEwNTUyODc0NTQwMzI4ODIzMjY5MTE0NzU4NDcyODE5MTE2MjczMjI5OTg2NTMzODM3NzE1OTY5MjM1MDA1OTEzNjY3OSJdLFsiMSIsIjAiXV0sInZrX2dhbW1hXzIiOltbIjEwODU3MDQ2OTk5MDIzMDU3MTM1OTQ0NTcwNzYyMjMyODI5NDgxMzcwNzU2MzU5NTc4NTE4MDg2OTkwNTE5OTkzMjg1NjU1ODUyNzgxIiwiMTE1NTk3MzIwMzI5ODYzODcxMDc5OTEwMDQwMjEzOTIyODU3ODM5MjU4MTI4NjE4MjExOTI1MzA5MTc0MDMxNTE0NTIzOTE4MDU2MzQiXSxbIjg0OTU2NTM5MjMxMjM0MzE0MTc2MDQ5NzMyNDc0ODkyNzI0Mzg0MTgxOTA1ODcyNjM2MDAxNDg3NzAyODA2NDkzMDY5NTgxMDE5MzAiLCI0MDgyMzY3ODc1ODYzNDMzNjgxMzMyMjAzNDAzMTQ1NDM1NTY4MzE2ODUxMzI3NTkzNDAxMjA4MTA1NzQxMDc2MjE0MTIwMDkzNTMxIl0sWyIxIiwiMCJdXSwidmtfZGVsdGFfMiI6W1siNTY4MTAwNjE2NDMwODI1MTk1MzAwMjExMzkyNTU4NTQ5MDE1OTM4MjM2NTQ1OTkwMDYxNjY5NTA2OTczODA5OTYxNjIyMTAwNzQ0MCIsIjE3ODQzNzI1MzIwMjMyODUyMzQ3ODgxMTI5MTI2MDUwMTY0MTg3ODU4NTMwODI2Nzg0MzAxNjI4NDE4MzM2ODg5NzI0MDQ3NTQ1MjYiXSxbIjEzMjA3MzcyNzAwMzc0OTUxMjE3OTcyNzM0MzA1OTg3OTg0MjExMjk5NTQxOTUzMjcyMTk1ODA0NDAzMDE5Mjk0Mjg1MDE1NDMyMjMwIiwiMTEyMDgwOTg4MTU5MzE0OTgyNTg1NjYzMzU5NTMyNTU3Njg5MTU3ODEwMjQ1Njg0MzE0NzI5NzMwMDM3NDAzNTEyNDIxNDUyNzQ4ODIiXSxbIjEiLCIwIl1dLCJJQyI6W1siMTM1NTI3OTYxNTkzMjE1MDA0NDY1NDIwOTIzMzM5MjU3ODk2MjcyMjE3NjM5OTU5MTcwNTc3MDUwMjUwMjQ3MzY4NDU3MjE5NDIzNTMiLCI5NjgwOTg1Mjg1MDQwMjMwNzUxNjQ0NDk1ODkzMjE1MzgyNjc2MDgxNTM1ODc2MzYzNTUzNjYwMzc0MTE1NTg4ODYyMDYwNDg3MDM0IiwiMSJdLFsiMTUyNTQ3NzY3NzI2MTA1MzMzMjc0ODg4MTQyODE5MzEyODc2NjU4OTM5NDMxNzc5NzczMTAxNjgwNTY3MjIzNjgyODE3Mjg2MTg2NjIiLCIxNDM2NzY1NzcwMTI0OTU0NzkxODUxMzY3NTUzMzA5MTI4NjM4MzM1ODE4NTY2Mjg2OTg4NzMxNjQ2NjgxMzA2MjE0MjY3NDQ5OTI2MCIsIjEiXSxbIjE0ODY2ODU5MTc3NzU4NjM1MDMwMDc5MjI2MzQxODYyNjAxMTEyOTgzNDg3ODM4NTExNjkwNTY3ODk1NTc0MDMwNjcyMjEyNDQxNjc2IiwiMTEzMTQ1NDIyOTM1MzM5NzMzMjg0MTY0NDE2NjMxNzYwMzIzOTk4NDU1MTkzMDA0NDY4OTQ0MDc1MjAwODM0MTIwMzY4ODgzNDI5OCIsIjEiXSxbIjE0NDUyOTAyNDgyODI4NTU4MjcwMjk4Mzc0NzM3NzA1NjU4MzUxMjcwNzg4NDI4MDE5NTg1MjQxMDI2OTAxMzMxMzY4ODU4NTI3OTQ4IiwiMTkwOTc5OTc3NzQ2MDY1MjM1MjcxNTg1Mjk1NTI2NDU5NjEyNTcxNTAxODkzNTczNTc2MDEwMzUwNzgxMTE2NDM5NTMzODUxNzEzODQiLCIxIl1dfQ=="
	vkey64Bz, err := b64.StdEncoding.DecodeString(vkey64)
	require.NoError(t, err)

	snarkVk, err := parser.UnmarshalCircomVerificationKeyJSON(vkey64Bz)
	require.NoError(t, err)

	proof64 := "eyJwaV9hIjpbIjg4MDE3Nzg4OTg5NTY3NTYxMDM5NDMwMTE1MzEzNjY0NjY4NTM3MzM1Nzk0MTI4MzI4ODM3NTQ0MjY4NzMwMDMyMjgzOTA0MDY2MzEiLCIxODA3NjgyNzE0MTg5Nzk1MTI3MTU4ODk2NTY1OTY5NjA5ODU0ODE0Njc1NTkyMjg5Nzk5Njk1MTc4NjA2NzE4NzcxOTA4OTg1NDQ5NSIsIjEiXSwicGlfYiI6W1siMTkzNDU4MDkxMzk5ODkxMzcwNTczMjQ0MTgzMjgzNDk3OTE0NjI1NDEwMjgyODczNjY1MzA1ODMwNTI1OTAzOTk4NDEzMDU4NDE0ODUiLCIyMTEzNDA5OTMxOTEwODcwMDQzMTQ2MDY2MTA3MTYzMDk4MzU4NDE1MjAxNTA5NjY2MjI0MjczOTE5Mjc2MTAzNTE4NzEyMTY4ODI5MiJdLFsiMTUwMDc2MzI4MjQ5MjQ3MjAyMjg5NTgzMjkwMDUxNzE2NzkwMjIyMTUzOTM1MzkyMDY3MTA4MDM0OTAwMjE3MDIzNjUxNTExNTk0MDEiLCIxMjczOTQyMTYzNzgxMjg3NDA3ODA5MDMzMzg0MTg0NTY1MzgwMjAyOTE0NTE2NDc3MDU4NDA4NDg2MDgwMDE0MDIxMDE1NTI3NjEyOCJdLFsiMSIsIjAiXV0sInBpX2MiOlsiNTcyNjkxMTk3Nzk1ODg2MjA0MTY3MjU3NTg1MjQxNDEwMTcyNTA4NTI5NzM2NDk4MDI4OTc5NzM1OTkyNjIyMjUzMjY4NTQ2MTgwNSIsIjQ0MzEyMjk1MDU2NTQ3MzcwMDkyMDM1NDMyNjM3NTk3MjM5NDk2MDYwMTg1MTY1MzczMTQ3NTk3MjkxNzA1NzU3NzEwOTQ0MDA3MTQiLCIxIl19"
	proofData, err := b64.StdEncoding.DecodeString(proof64)
	require.NoError(t, err)

	// Unmarshal the JSON data
	snarkProof, err := parser.UnmarshalCircomProofJSON(proofData)
	require.NoError(t, err)

	gnarkProof, err := parser.ConvertCircomToGnark(snarkProof, snarkVk, inputs)
	require.NoError(t, err)

	verified, err := parser.VerifyProof(gnarkProof)
	require.NoError(t, err)
	require.True(t, verified, "proof verification failed")
	t.Log("success")
}

func TestCalculateTxBodyCommitment(t *testing.T) {
	txb64 := "CqIBCp8BChwvY29zbW9zLmJhbmsudjFiZXRhMS5Nc2dTZW5kEn8KP3hpb24xczN1YWU1MDUydTVnNzd3ZmxheHd5aDJ1dHg5OWU3aDZjNjJhNjI5M3J5cnh0Z3F2djhncXhlZ3J0axIreGlvbjFxYWYyeGZseDVqM2FndGx2cWs1dmhqcGV1aGw2ZzQ1aHhzaHdxahoPCgV1eGlvbhIGMTAwMDAwEhYSFAoOCgV1eGlvbhIFNjAwMDAQwJoMGgZ4aW9uLTEgCw=="
	received, err := verify.CalculateTxBodyCommitment(txb64)
	require.NoError(t, err)

	assert.Equal(t, "4191548640446622019618205632337897277567688684420692770387104411975872458580", received.String())
}
