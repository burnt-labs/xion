// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xion/dkim/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef31cf4588a86e6f, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef31cf4588a86e6f, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

// QueryDkimPubKeyRequest is the request type for the Query/DkimPubKey RPC
// method.
type QueryDkimPubKeyRequest struct {
	Selector string `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	Domain   string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (m *QueryDkimPubKeyRequest) Reset()         { *m = QueryDkimPubKeyRequest{} }
func (m *QueryDkimPubKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDkimPubKeyRequest) ProtoMessage()    {}
func (*QueryDkimPubKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef31cf4588a86e6f, []int{2}
}
func (m *QueryDkimPubKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDkimPubKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDkimPubKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDkimPubKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDkimPubKeyRequest.Merge(m, src)
}
func (m *QueryDkimPubKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDkimPubKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDkimPubKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDkimPubKeyRequest proto.InternalMessageInfo

func (m *QueryDkimPubKeyRequest) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *QueryDkimPubKeyRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

// QueryDkimPubKeyResponse is the response type for the Query/DkimPubKey RPC
// method.
type QueryDkimPubKeyResponse struct {
	DkimPubKey *DkimPubKey `protobuf:"bytes,1,opt,name=dkim_pub_key,json=dkimPubKey,proto3" json:"dkim_pub_key,omitempty"`
}

func (m *QueryDkimPubKeyResponse) Reset()         { *m = QueryDkimPubKeyResponse{} }
func (m *QueryDkimPubKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDkimPubKeyResponse) ProtoMessage()    {}
func (*QueryDkimPubKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef31cf4588a86e6f, []int{3}
}
func (m *QueryDkimPubKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDkimPubKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDkimPubKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDkimPubKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDkimPubKeyResponse.Merge(m, src)
}
func (m *QueryDkimPubKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDkimPubKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDkimPubKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDkimPubKeyResponse proto.InternalMessageInfo

func (m *QueryDkimPubKeyResponse) GetDkimPubKey() *DkimPubKey {
	if m != nil {
		return m.DkimPubKey
	}
	return nil
}

// QueryDkimPubKeysRequest is the request type for the Query/DkimPubKeys RPC
// method. All fields are optional, and will filter down results.
type QueryDkimPubKeysRequest struct {
	Selector     string             `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	Domain       string             `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	PoseidonHash []byte             `protobuf:"bytes,3,opt,name=poseidon_hash,json=poseidonHash,proto3" json:"poseidon_hash,omitempty"`
	Pagination   *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDkimPubKeysRequest) Reset()         { *m = QueryDkimPubKeysRequest{} }
func (m *QueryDkimPubKeysRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDkimPubKeysRequest) ProtoMessage()    {}
func (*QueryDkimPubKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef31cf4588a86e6f, []int{4}
}
func (m *QueryDkimPubKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDkimPubKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDkimPubKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDkimPubKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDkimPubKeysRequest.Merge(m, src)
}
func (m *QueryDkimPubKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDkimPubKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDkimPubKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDkimPubKeysRequest proto.InternalMessageInfo

func (m *QueryDkimPubKeysRequest) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *QueryDkimPubKeysRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *QueryDkimPubKeysRequest) GetPoseidonHash() []byte {
	if m != nil {
		return m.PoseidonHash
	}
	return nil
}

func (m *QueryDkimPubKeysRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDkimPubKeysResponse is the response type for the Query/DkimPubKeys RPC
// method.
type QueryDkimPubKeysResponse struct {
	DkimPubKeys []*DkimPubKey       `protobuf:"bytes,1,rep,name=dkim_pub_keys,json=dkimPubKeys,proto3" json:"dkim_pub_keys,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDkimPubKeysResponse) Reset()         { *m = QueryDkimPubKeysResponse{} }
func (m *QueryDkimPubKeysResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDkimPubKeysResponse) ProtoMessage()    {}
func (*QueryDkimPubKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef31cf4588a86e6f, []int{5}
}
func (m *QueryDkimPubKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDkimPubKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDkimPubKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDkimPubKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDkimPubKeysResponse.Merge(m, src)
}
func (m *QueryDkimPubKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDkimPubKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDkimPubKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDkimPubKeysResponse proto.InternalMessageInfo

func (m *QueryDkimPubKeysResponse) GetDkimPubKeys() []*DkimPubKey {
	if m != nil {
		return m.DkimPubKeys
	}
	return nil
}

func (m *QueryDkimPubKeysResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type SnarkJsProof struct {
	PiA [][]byte `protobuf:"bytes,1,rep,name=pi_a,json=piA,proto3" json:"pi_a,omitempty"`
	PiB [][]byte `protobuf:"bytes,2,rep,name=pi_b,json=piB,proto3" json:"pi_b,omitempty"`
	PiC [][]byte `protobuf:"bytes,3,rep,name=pi_c,json=piC,proto3" json:"pi_c,omitempty"`
}

func (m *SnarkJsProof) Reset()         { *m = SnarkJsProof{} }
func (m *SnarkJsProof) String() string { return proto.CompactTextString(m) }
func (*SnarkJsProof) ProtoMessage()    {}
func (*SnarkJsProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef31cf4588a86e6f, []int{6}
}
func (m *SnarkJsProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnarkJsProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnarkJsProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnarkJsProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnarkJsProof.Merge(m, src)
}
func (m *SnarkJsProof) XXX_Size() int {
	return m.Size()
}
func (m *SnarkJsProof) XXX_DiscardUnknown() {
	xxx_messageInfo_SnarkJsProof.DiscardUnknown(m)
}

var xxx_messageInfo_SnarkJsProof proto.InternalMessageInfo

func (m *SnarkJsProof) GetPiA() [][]byte {
	if m != nil {
		return m.PiA
	}
	return nil
}

func (m *SnarkJsProof) GetPiB() [][]byte {
	if m != nil {
		return m.PiB
	}
	return nil
}

func (m *SnarkJsProof) GetPiC() [][]byte {
	if m != nil {
		return m.PiC
	}
	return nil
}

type QueryVerifyRequest struct {
	DkimDomain string `protobuf:"bytes,1,opt,name=dkim_domain,json=dkimDomain,proto3" json:"dkim_domain,omitempty"`
	TxBytes    []byte `protobuf:"bytes,2,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	EmailHash  []byte `protobuf:"bytes,3,opt,name=email_hash,json=emailHash,proto3" json:"email_hash,omitempty"`
	DkimHash   []byte `protobuf:"bytes,4,opt,name=dkim_hash,json=dkimHash,proto3" json:"dkim_hash,omitempty"`
	Proof      []byte `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *QueryVerifyRequest) Reset()         { *m = QueryVerifyRequest{} }
func (m *QueryVerifyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyRequest) ProtoMessage()    {}
func (*QueryVerifyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef31cf4588a86e6f, []int{7}
}
func (m *QueryVerifyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyRequest.Merge(m, src)
}
func (m *QueryVerifyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyRequest proto.InternalMessageInfo

func (m *QueryVerifyRequest) GetDkimDomain() string {
	if m != nil {
		return m.DkimDomain
	}
	return ""
}

func (m *QueryVerifyRequest) GetTxBytes() []byte {
	if m != nil {
		return m.TxBytes
	}
	return nil
}

func (m *QueryVerifyRequest) GetEmailHash() []byte {
	if m != nil {
		return m.EmailHash
	}
	return nil
}

func (m *QueryVerifyRequest) GetDkimHash() []byte {
	if m != nil {
		return m.DkimHash
	}
	return nil
}

func (m *QueryVerifyRequest) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

type QueryVerifyResponse struct {
	Verified bool `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (m *QueryVerifyResponse) Reset()         { *m = QueryVerifyResponse{} }
func (m *QueryVerifyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyResponse) ProtoMessage()    {}
func (*QueryVerifyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef31cf4588a86e6f, []int{8}
}
func (m *QueryVerifyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyResponse.Merge(m, src)
}
func (m *QueryVerifyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyResponse proto.InternalMessageInfo

func (m *QueryVerifyResponse) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "xion.dkim.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "xion.dkim.v1.QueryParamsResponse")
	proto.RegisterType((*QueryDkimPubKeyRequest)(nil), "xion.dkim.v1.QueryDkimPubKeyRequest")
	proto.RegisterType((*QueryDkimPubKeyResponse)(nil), "xion.dkim.v1.QueryDkimPubKeyResponse")
	proto.RegisterType((*QueryDkimPubKeysRequest)(nil), "xion.dkim.v1.QueryDkimPubKeysRequest")
	proto.RegisterType((*QueryDkimPubKeysResponse)(nil), "xion.dkim.v1.QueryDkimPubKeysResponse")
	proto.RegisterType((*SnarkJsProof)(nil), "xion.dkim.v1.SnarkJsProof")
	proto.RegisterType((*QueryVerifyRequest)(nil), "xion.dkim.v1.QueryVerifyRequest")
	proto.RegisterType((*QueryVerifyResponse)(nil), "xion.dkim.v1.QueryVerifyResponse")
}

func init() { proto.RegisterFile("xion/dkim/v1/query.proto", fileDescriptor_ef31cf4588a86e6f) }

var fileDescriptor_ef31cf4588a86e6f = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xae, 0x9b, 0x36, 0x37, 0x3d, 0x49, 0x75, 0xd5, 0xb9, 0xb9, 0xad, 0x31, 0x6d, 0x28, 0x06,
	0xda, 0x0a, 0x81, 0xad, 0x94, 0x1d, 0x62, 0xd3, 0x1f, 0x51, 0x04, 0x2c, 0x82, 0x11, 0x2c, 0xd8,
	0x44, 0xe3, 0x64, 0x9a, 0x8c, 0x12, 0x7b, 0x5c, 0xcf, 0x24, 0xc4, 0x62, 0xc7, 0x13, 0x20, 0xf1,
	0x04, 0xf0, 0x18, 0x3c, 0x01, 0xcb, 0x4a, 0x2c, 0x60, 0x89, 0x5a, 0x1e, 0x04, 0x79, 0x66, 0xe2,
	0xc6, 0x4a, 0x68, 0x17, 0xec, 0x3c, 0xe7, 0x1c, 0x7f, 0xdf, 0x37, 0xe7, 0x3b, 0x67, 0xc0, 0x1c,
	0x51, 0x16, 0xba, 0xed, 0x1e, 0x0d, 0xdc, 0x61, 0xdd, 0x3d, 0x19, 0x90, 0x38, 0x71, 0xa2, 0x98,
	0x09, 0x86, 0x2a, 0x69, 0xc6, 0x49, 0x33, 0xce, 0xb0, 0x6e, 0xad, 0x77, 0x18, 0xeb, 0xf4, 0x89,
	0x8b, 0x23, 0xea, 0xe2, 0x30, 0x64, 0x02, 0x0b, 0xca, 0x42, 0xae, 0x6a, 0x2d, 0x2b, 0x87, 0xd2,
	0x21, 0x21, 0xe1, 0x74, 0x9c, 0xcb, 0x33, 0x70, 0x81, 0x05, 0xd1, 0x99, 0xbb, 0x2d, 0xc6, 0x03,
	0xc6, 0x5d, 0x1f, 0x73, 0xa2, 0xa8, 0xdd, 0x61, 0xdd, 0x27, 0x02, 0xd7, 0xdd, 0x08, 0x77, 0x68,
	0x28, 0x29, 0x54, 0xad, 0x5d, 0x05, 0xf4, 0x22, 0xad, 0x68, 0xe0, 0x18, 0x07, 0xdc, 0x23, 0x27,
	0x03, 0xc2, 0x85, 0x7d, 0x00, 0xff, 0xe5, 0xa2, 0x3c, 0x62, 0x21, 0x27, 0xe8, 0x1e, 0x14, 0x23,
	0x19, 0x31, 0x8d, 0x4d, 0x63, 0xa7, 0xbc, 0x5b, 0x75, 0x26, 0xef, 0xe2, 0xe8, 0x6a, 0x5d, 0x63,
	0x3f, 0x87, 0x55, 0x09, 0x72, 0xd8, 0xa3, 0x41, 0x63, 0xe0, 0x3f, 0x23, 0x89, 0x86, 0x47, 0x16,
	0x94, 0x38, 0xe9, 0x93, 0x96, 0x60, 0xb1, 0x44, 0x5a, 0xf2, 0xb2, 0x33, 0x5a, 0x85, 0x62, 0x9b,
	0x05, 0x98, 0x86, 0xe6, 0xbc, 0xcc, 0xe8, 0x93, 0xfd, 0x0a, 0xd6, 0xa6, 0xd0, 0xb4, 0xac, 0x87,
	0x50, 0x49, 0x25, 0x34, 0xa3, 0x81, 0xdf, 0xec, 0x91, 0x44, 0x8b, 0x33, 0xf3, 0xe2, 0x26, 0xfe,
	0x83, 0x76, 0xf6, 0x6d, 0x7f, 0x31, 0xa6, 0x70, 0xf9, 0x5f, 0xc8, 0x44, 0xb7, 0x60, 0x39, 0x62,
	0x9c, 0xd0, 0x36, 0x0b, 0x9b, 0x5d, 0xcc, 0xbb, 0x66, 0x61, 0xd3, 0xd8, 0xa9, 0x78, 0x95, 0x71,
	0xf0, 0x09, 0xe6, 0x5d, 0xf4, 0x18, 0xe0, 0xc2, 0x08, 0x73, 0x41, 0xca, 0xdd, 0x72, 0x94, 0x6b,
	0x4e, 0xea, 0x9a, 0xa3, 0x06, 0x46, 0xbb, 0xe6, 0x34, 0x70, 0x87, 0x68, 0x51, 0xde, 0xc4, 0x9f,
	0xf6, 0x27, 0x03, 0xcc, 0x69, 0xf1, 0xba, 0x2b, 0x8f, 0x60, 0x79, 0xb2, 0x2b, 0xa9, 0x67, 0x85,
	0x4b, 0xdb, 0x52, 0xbe, 0x68, 0x0b, 0x47, 0x47, 0x39, 0x89, 0x05, 0x29, 0x71, 0xfb, 0x4a, 0x89,
	0x8a, 0x3a, 0xa7, 0xf1, 0x08, 0x2a, 0x2f, 0x43, 0x1c, 0xf7, 0x9e, 0xf2, 0x46, 0xcc, 0xd8, 0x31,
	0x5a, 0x81, 0x85, 0x88, 0x36, 0xb1, 0x54, 0x53, 0xf1, 0x0a, 0x11, 0xdd, 0xd3, 0x21, 0xdf, 0x9c,
	0x1f, 0x87, 0xf6, 0x75, 0xa8, 0x65, 0x16, 0xc6, 0xa1, 0x03, 0xfb, 0xb3, 0xa1, 0x47, 0xf5, 0x35,
	0x89, 0xe9, 0x71, 0x36, 0x4b, 0x37, 0x40, 0xea, 0x6e, 0x6a, 0x37, 0x94, 0x4f, 0xd2, 0xe1, 0x43,
	0xe5, 0xc8, 0x35, 0x28, 0x89, 0x51, 0xd3, 0x4f, 0x04, 0xe1, 0xd2, 0xab, 0x8a, 0xf7, 0x8f, 0x18,
	0xed, 0xa7, 0x47, 0xb4, 0x01, 0x40, 0x02, 0x4c, 0xfb, 0x93, 0x4e, 0x2d, 0xc9, 0x88, 0xb4, 0xe9,
	0x3a, 0x2c, 0x49, 0x68, 0x99, 0x5d, 0x90, 0xd9, 0x52, 0x1a, 0x90, 0xc9, 0x2a, 0x2c, 0x46, 0xe9,
	0x85, 0xcc, 0x45, 0x99, 0x50, 0x07, 0xbb, 0xae, 0x17, 0x67, 0xac, 0x51, 0x7b, 0x61, 0x41, 0x69,
	0x98, 0x46, 0x28, 0x69, 0x4b, 0x85, 0x25, 0x2f, 0x3b, 0xef, 0x7e, 0x2f, 0xc0, 0xa2, 0xfc, 0x07,
	0x1d, 0x43, 0x51, 0xad, 0x10, 0xda, 0xcc, 0x9b, 0x34, 0xbd, 0xa1, 0xd6, 0xcd, 0x4b, 0x2a, 0x14,
	0xa9, 0xbd, 0xf6, 0xfe, 0xdb, 0xaf, 0x8f, 0xf3, 0x2b, 0xe8, 0xdf, 0xec, 0x91, 0x50, 0x8b, 0x89,
	0xde, 0x02, 0x5c, 0xd8, 0x8e, 0x6e, 0xcf, 0x40, 0x9a, 0x5a, 0x59, 0xeb, 0xce, 0x15, 0x55, 0x9a,
	0x73, 0x5d, 0x72, 0xae, 0xa2, 0x6a, 0xc6, 0x39, 0x9e, 0xc1, 0x1e, 0x49, 0xd0, 0x3b, 0x28, 0x4f,
	0x4c, 0x2a, 0xba, 0x1c, 0x33, 0xbb, 0xea, 0xd6, 0x55, 0x65, 0x9a, 0x7b, 0x43, 0x72, 0xaf, 0xa1,
	0xff, 0x67, 0x71, 0x73, 0x14, 0x41, 0x59, 0x4e, 0xa0, 0xb2, 0x66, 0x66, 0x8b, 0x73, 0x93, 0x35,
	0xb3, 0xc5, 0x79, 0x5f, 0xff, 0x74, 0x5d, 0xe9, 0x6d, 0xb2, 0xbf, 0xf7, 0xf5, 0xac, 0x66, 0x9c,
	0x9e, 0xd5, 0x8c, 0x9f, 0x67, 0x35, 0xe3, 0xc3, 0x79, 0x6d, 0xee, 0xf4, 0xbc, 0x36, 0xf7, 0xe3,
	0xbc, 0x36, 0xf7, 0x66, 0xbb, 0x43, 0x45, 0x77, 0xe0, 0x3b, 0x2d, 0x16, 0xb8, 0xfe, 0x20, 0x0e,
	0xc5, 0xfd, 0x3e, 0xf6, 0xb9, 0x2b, 0x5f, 0xf4, 0x91, 0xc2, 0x12, 0x49, 0x44, 0xb8, 0x5f, 0x94,
	0xaf, 0xf4, 0x83, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x3a, 0xd7, 0x3f, 0x4f, 0x06, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries all parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// DkimPubKey queries the DKIM public key for a given selector and domain.
	DkimPubKey(ctx context.Context, in *QueryDkimPubKeyRequest, opts ...grpc.CallOption) (*QueryDkimPubKeyResponse, error)
	// DkimPubKeys queries the DKIM public keys for a given selectors and domains.
	DkimPubKeys(ctx context.Context, in *QueryDkimPubKeysRequest, opts ...grpc.CallOption) (*QueryDkimPubKeysResponse, error)
	ProofVerify(ctx context.Context, in *QueryVerifyRequest, opts ...grpc.CallOption) (*QueryVerifyResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/xion.dkim.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DkimPubKey(ctx context.Context, in *QueryDkimPubKeyRequest, opts ...grpc.CallOption) (*QueryDkimPubKeyResponse, error) {
	out := new(QueryDkimPubKeyResponse)
	err := c.cc.Invoke(ctx, "/xion.dkim.v1.Query/DkimPubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DkimPubKeys(ctx context.Context, in *QueryDkimPubKeysRequest, opts ...grpc.CallOption) (*QueryDkimPubKeysResponse, error) {
	out := new(QueryDkimPubKeysResponse)
	err := c.cc.Invoke(ctx, "/xion.dkim.v1.Query/DkimPubKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProofVerify(ctx context.Context, in *QueryVerifyRequest, opts ...grpc.CallOption) (*QueryVerifyResponse, error) {
	out := new(QueryVerifyResponse)
	err := c.cc.Invoke(ctx, "/xion.dkim.v1.Query/ProofVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries all parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// DkimPubKey queries the DKIM public key for a given selector and domain.
	DkimPubKey(context.Context, *QueryDkimPubKeyRequest) (*QueryDkimPubKeyResponse, error)
	// DkimPubKeys queries the DKIM public keys for a given selectors and domains.
	DkimPubKeys(context.Context, *QueryDkimPubKeysRequest) (*QueryDkimPubKeysResponse, error)
	ProofVerify(context.Context, *QueryVerifyRequest) (*QueryVerifyResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) DkimPubKey(ctx context.Context, req *QueryDkimPubKeyRequest) (*QueryDkimPubKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DkimPubKey not implemented")
}
func (*UnimplementedQueryServer) DkimPubKeys(ctx context.Context, req *QueryDkimPubKeysRequest) (*QueryDkimPubKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DkimPubKeys not implemented")
}
func (*UnimplementedQueryServer) ProofVerify(ctx context.Context, req *QueryVerifyRequest) (*QueryVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProofVerify not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xion.dkim.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DkimPubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDkimPubKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DkimPubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xion.dkim.v1.Query/DkimPubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DkimPubKey(ctx, req.(*QueryDkimPubKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DkimPubKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDkimPubKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DkimPubKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xion.dkim.v1.Query/DkimPubKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DkimPubKeys(ctx, req.(*QueryDkimPubKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProofVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProofVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xion.dkim.v1.Query/ProofVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProofVerify(ctx, req.(*QueryVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "xion.dkim.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "DkimPubKey",
			Handler:    _Query_DkimPubKey_Handler,
		},
		{
			MethodName: "DkimPubKeys",
			Handler:    _Query_DkimPubKeys_Handler,
		},
		{
			MethodName: "ProofVerify",
			Handler:    _Query_ProofVerify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xion/dkim/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDkimPubKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDkimPubKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDkimPubKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Selector) > 0 {
		i -= len(m.Selector)
		copy(dAtA[i:], m.Selector)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Selector)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDkimPubKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDkimPubKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDkimPubKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DkimPubKey != nil {
		{
			size, err := m.DkimPubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDkimPubKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDkimPubKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDkimPubKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.PoseidonHash) > 0 {
		i -= len(m.PoseidonHash)
		copy(dAtA[i:], m.PoseidonHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoseidonHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Selector) > 0 {
		i -= len(m.Selector)
		copy(dAtA[i:], m.Selector)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Selector)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDkimPubKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDkimPubKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDkimPubKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DkimPubKeys) > 0 {
		for iNdEx := len(m.DkimPubKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DkimPubKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SnarkJsProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnarkJsProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnarkJsProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PiC) > 0 {
		for iNdEx := len(m.PiC) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PiC[iNdEx])
			copy(dAtA[i:], m.PiC[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.PiC[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PiB) > 0 {
		for iNdEx := len(m.PiB) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PiB[iNdEx])
			copy(dAtA[i:], m.PiB[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.PiB[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PiA) > 0 {
		for iNdEx := len(m.PiA) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PiA[iNdEx])
			copy(dAtA[i:], m.PiA[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.PiA[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DkimHash) > 0 {
		i -= len(m.DkimHash)
		copy(dAtA[i:], m.DkimHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DkimHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EmailHash) > 0 {
		i -= len(m.EmailHash)
		copy(dAtA[i:], m.EmailHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EmailHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxBytes) > 0 {
		i -= len(m.TxBytes)
		copy(dAtA[i:], m.TxBytes)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxBytes)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DkimDomain) > 0 {
		i -= len(m.DkimDomain)
		copy(dAtA[i:], m.DkimDomain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DkimDomain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDkimPubKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Selector)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDkimPubKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DkimPubKey != nil {
		l = m.DkimPubKey.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDkimPubKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Selector)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PoseidonHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDkimPubKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DkimPubKeys) > 0 {
		for _, e := range m.DkimPubKeys {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SnarkJsProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PiA) > 0 {
		for _, b := range m.PiA {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.PiB) > 0 {
		for _, b := range m.PiB {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.PiC) > 0 {
		for _, b := range m.PiC {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryVerifyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DkimDomain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TxBytes)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EmailHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DkimHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Verified {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDkimPubKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDkimPubKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDkimPubKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDkimPubKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDkimPubKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDkimPubKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DkimPubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DkimPubKey == nil {
				m.DkimPubKey = &DkimPubKey{}
			}
			if err := m.DkimPubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDkimPubKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDkimPubKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDkimPubKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoseidonHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoseidonHash = append(m.PoseidonHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PoseidonHash == nil {
				m.PoseidonHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDkimPubKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDkimPubKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDkimPubKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DkimPubKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DkimPubKeys = append(m.DkimPubKeys, &DkimPubKey{})
			if err := m.DkimPubKeys[len(m.DkimPubKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnarkJsProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnarkJsProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnarkJsProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PiA", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PiA = append(m.PiA, make([]byte, postIndex-iNdEx))
			copy(m.PiA[len(m.PiA)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PiB", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PiB = append(m.PiB, make([]byte, postIndex-iNdEx))
			copy(m.PiB[len(m.PiB)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PiC", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PiC = append(m.PiC, make([]byte, postIndex-iNdEx))
			copy(m.PiC[len(m.PiC)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DkimDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DkimDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBytes = append(m.TxBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.TxBytes == nil {
				m.TxBytes = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailHash = append(m.EmailHash[:0], dAtA[iNdEx:postIndex]...)
			if m.EmailHash == nil {
				m.EmailHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DkimHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DkimHash = append(m.DkimHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DkimHash == nil {
				m.DkimHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
