// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xion/dkim/v1/state.proto

package types

import (
	_ "cosmossdk.io/orm"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Version int32

const (
	Version_DKIM1 Version = 0
)

var Version_name = map[int32]string{
	0: "DKIM1",
}

var Version_value = map[string]int32{
	"DKIM1": 0,
}

func (x Version) String() string {
	return proto.EnumName(Version_name, int32(x))
}

func (Version) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_50cc02dd86df3648, []int{0}
}

type KeyType int32

const (
	KeyType_RSA KeyType = 0
)

var KeyType_name = map[int32]string{
	0: "RSA",
}

var KeyType_value = map[string]int32{
	"RSA": 0,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}

func (KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_50cc02dd86df3648, []int{1}
}

type DkimPubKey struct {
	Domain       string  `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	PubKey       string  `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	PoseidonHash []byte  `protobuf:"bytes,3,opt,name=poseidon_hash,json=poseidonHash,proto3" json:"poseidon_hash,omitempty"`
	Selector     string  `protobuf:"bytes,4,opt,name=selector,proto3" json:"selector,omitempty"`
	Version      Version `protobuf:"varint,5,opt,name=version,proto3,enum=xion.dkim.v1.Version" json:"version,omitempty"`
	KeyType      KeyType `protobuf:"varint,6,opt,name=key_type,json=keyType,proto3,enum=xion.dkim.v1.KeyType" json:"key_type,omitempty"`
}

func (m *DkimPubKey) Reset()         { *m = DkimPubKey{} }
func (m *DkimPubKey) String() string { return proto.CompactTextString(m) }
func (*DkimPubKey) ProtoMessage()    {}
func (*DkimPubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_50cc02dd86df3648, []int{0}
}
func (m *DkimPubKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DkimPubKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DkimPubKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DkimPubKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DkimPubKey.Merge(m, src)
}
func (m *DkimPubKey) XXX_Size() int {
	return m.Size()
}
func (m *DkimPubKey) XXX_DiscardUnknown() {
	xxx_messageInfo_DkimPubKey.DiscardUnknown(m)
}

var xxx_messageInfo_DkimPubKey proto.InternalMessageInfo

func (m *DkimPubKey) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *DkimPubKey) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *DkimPubKey) GetPoseidonHash() []byte {
	if m != nil {
		return m.PoseidonHash
	}
	return nil
}

func (m *DkimPubKey) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *DkimPubKey) GetVersion() Version {
	if m != nil {
		return m.Version
	}
	return Version_DKIM1
}

func (m *DkimPubKey) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_RSA
}

func init() {
	proto.RegisterEnum("xion.dkim.v1.Version", Version_name, Version_value)
	proto.RegisterEnum("xion.dkim.v1.KeyType", KeyType_name, KeyType_value)
	proto.RegisterType((*DkimPubKey)(nil), "xion.dkim.v1.DkimPubKey")
}

func init() { proto.RegisterFile("xion/dkim/v1/state.proto", fileDescriptor_50cc02dd86df3648) }

var fileDescriptor_50cc02dd86df3648 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x4e, 0xc2, 0x30,
	0x1c, 0xc6, 0x57, 0x11, 0x06, 0xff, 0xa0, 0x62, 0x23, 0xb2, 0x60, 0xb2, 0x10, 0x3d, 0x48, 0x88,
	0xae, 0xa2, 0x37, 0x6f, 0x18, 0x0e, 0x1a, 0x62, 0x62, 0xa6, 0xf1, 0xe0, 0x85, 0x6c, 0xd0, 0xb8,
	0x66, 0x6c, 0x5d, 0xd6, 0x8e, 0xb0, 0x97, 0x30, 0x3e, 0x81, 0xcf, 0xe3, 0x91, 0xc4, 0x8b, 0x47,
	0x03, 0x6f, 0xe0, 0x03, 0x18, 0xc3, 0x0a, 0xc4, 0x83, 0xb7, 0xfe, 0xfb, 0xfb, 0xbe, 0xf6, 0x6b,
	0x3f, 0x30, 0x26, 0x8c, 0x87, 0x64, 0xe8, 0xb3, 0x80, 0x8c, 0xdb, 0x44, 0x48, 0x47, 0x52, 0x2b,
	0x8a, 0xb9, 0xe4, 0xb8, 0xbc, 0x20, 0xd6, 0x82, 0x58, 0xe3, 0x76, 0xbd, 0x36, 0xe0, 0x22, 0xe0,
	0x82, 0xf0, 0x38, 0x13, 0xf2, 0x38, 0x50, 0xb2, 0xc3, 0x1f, 0x04, 0xd0, 0xf5, 0x59, 0x70, 0x97,
	0xb8, 0x3d, 0x9a, 0xe2, 0x7d, 0x28, 0x0c, 0x79, 0xe0, 0xb0, 0xd0, 0x40, 0x0d, 0xd4, 0x2c, 0xd9,
	0xcb, 0x09, 0xd7, 0x40, 0x8f, 0x12, 0xb7, 0xef, 0xd3, 0xd4, 0xd8, 0x50, 0x20, 0x52, 0x86, 0x23,
	0xd8, 0x8a, 0xb8, 0xa0, 0x6c, 0xc8, 0xc3, 0xbe, 0xe7, 0x08, 0xcf, 0xc8, 0x35, 0x50, 0xb3, 0x6c,
	0x97, 0x57, 0x9b, 0xd7, 0x8e, 0xf0, 0x70, 0x1d, 0x8a, 0x82, 0x8e, 0xe8, 0x40, 0xf2, 0xd8, 0xd8,
	0xcc, 0xec, 0xeb, 0x19, 0x13, 0xd0, 0xc7, 0x34, 0x16, 0x8c, 0x87, 0x46, 0xbe, 0x81, 0x9a, 0xdb,
	0xe7, 0x55, 0xeb, 0x6f, 0x72, 0xeb, 0x51, 0x41, 0x7b, 0xa5, 0xc2, 0x67, 0x50, 0xf4, 0x69, 0xda,
	0x97, 0x69, 0x44, 0x8d, 0xc2, 0x7f, 0x8e, 0x1e, 0x4d, 0x1f, 0xd2, 0x88, 0xda, 0xba, 0xaf, 0x16,
	0x97, 0x07, 0xdf, 0x6f, 0x1f, 0x2f, 0xb9, 0x2a, 0xec, 0xc2, 0x8e, 0x7a, 0xce, 0xc9, 0x3a, 0x0d,
	0x6a, 0xed, 0x81, 0xbe, 0xbc, 0x02, 0x97, 0x20, 0xdf, 0xed, 0xdd, 0xdc, 0xb6, 0x2b, 0x5a, 0x0b,
	0x83, 0xbe, 0x3c, 0x06, 0xeb, 0x90, 0xb3, 0xef, 0x3b, 0x15, 0xed, 0xaa, 0xf3, 0x3e, 0x33, 0xd1,
	0x74, 0x66, 0xa2, 0xaf, 0x99, 0x89, 0x5e, 0xe7, 0xa6, 0x36, 0x9d, 0x9b, 0xda, 0xe7, 0xdc, 0xd4,
	0x9e, 0x8e, 0x9f, 0x99, 0xf4, 0x12, 0xd7, 0x1a, 0xf0, 0x80, 0xb8, 0x49, 0x1c, 0xca, 0xd3, 0x91,
	0xe3, 0x0a, 0x92, 0x75, 0x33, 0x51, 0xed, 0x2c, 0xe2, 0x0a, 0xb7, 0x90, 0x7d, 0xfa, 0xc5, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x39, 0x15, 0x22, 0x17, 0xb7, 0x01, 0x00, 0x00,
}

func (m *DkimPubKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DkimPubKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DkimPubKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeyType != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x30
	}
	if m.Version != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Selector) > 0 {
		i -= len(m.Selector)
		copy(dAtA[i:], m.Selector)
		i = encodeVarintState(dAtA, i, uint64(len(m.Selector)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PoseidonHash) > 0 {
		i -= len(m.PoseidonHash)
		copy(dAtA[i:], m.PoseidonHash)
		i = encodeVarintState(dAtA, i, uint64(len(m.PoseidonHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintState(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Domain) > 0 {
		i -= len(m.Domain)
		copy(dAtA[i:], m.Domain)
		i = encodeVarintState(dAtA, i, uint64(len(m.Domain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DkimPubKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.PoseidonHash)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.Selector)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovState(uint64(m.Version))
	}
	if m.KeyType != 0 {
		n += 1 + sovState(uint64(m.KeyType))
	}
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DkimPubKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DkimPubKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DkimPubKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoseidonHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoseidonHash = append(m.PoseidonHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PoseidonHash == nil {
				m.PoseidonHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Selector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= Version(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= KeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
