// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: xion/mint/v1/event.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MintIncentiveTokens defines an event emitted on each block from the mint
// module EndBlocker
type MintIncentiveTokens struct {
	BondedRatio      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=bonded_ratio,json=bondedRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"bonded_ratio" yaml:"bonded_ratio"`
	Inflation        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=inflation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"inflation" yaml:"inflation"`
	AnnualProvisions github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=annual_provisions,json=annualProvisions,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"annual_provisions" yaml:"annual_provisions"`
	NeededAmount     uint64                                 `protobuf:"varint,4,opt,name=needed_amount,json=neededAmount,proto3" json:"needed_amount,omitempty"`
	CollectedAmount  uint64                                 `protobuf:"varint,5,opt,name=collected_amount,json=collectedAmount,proto3" json:"collected_amount,omitempty"`
	MintedAmount     uint64                                 `protobuf:"varint,6,opt,name=minted_amount,json=mintedAmount,proto3" json:"minted_amount,omitempty"`
	BurnedAmount     uint64                                 `protobuf:"varint,7,opt,name=burned_amount,json=burnedAmount,proto3" json:"burned_amount,omitempty"`
}

func (m *MintIncentiveTokens) Reset()         { *m = MintIncentiveTokens{} }
func (m *MintIncentiveTokens) String() string { return proto.CompactTextString(m) }
func (*MintIncentiveTokens) ProtoMessage()    {}
func (*MintIncentiveTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_a4b507e362b6edbc, []int{0}
}
func (m *MintIncentiveTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintIncentiveTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintIncentiveTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintIncentiveTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintIncentiveTokens.Merge(m, src)
}
func (m *MintIncentiveTokens) XXX_Size() int {
	return m.Size()
}
func (m *MintIncentiveTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_MintIncentiveTokens.DiscardUnknown(m)
}

var xxx_messageInfo_MintIncentiveTokens proto.InternalMessageInfo

func (m *MintIncentiveTokens) GetNeededAmount() uint64 {
	if m != nil {
		return m.NeededAmount
	}
	return 0
}

func (m *MintIncentiveTokens) GetCollectedAmount() uint64 {
	if m != nil {
		return m.CollectedAmount
	}
	return 0
}

func (m *MintIncentiveTokens) GetMintedAmount() uint64 {
	if m != nil {
		return m.MintedAmount
	}
	return 0
}

func (m *MintIncentiveTokens) GetBurnedAmount() uint64 {
	if m != nil {
		return m.BurnedAmount
	}
	return 0
}

func init() {
	proto.RegisterType((*MintIncentiveTokens)(nil), "xion.mint.v1.MintIncentiveTokens")
}

func init() { proto.RegisterFile("xion/mint/v1/event.proto", fileDescriptor_a4b507e362b6edbc) }

var fileDescriptor_a4b507e362b6edbc = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x86, 0xdb, 0x0b, 0x97, 0x1b, 0xe6, 0x42, 0xc4, 0xe2, 0xa2, 0x71, 0x51, 0x48, 0x49, 0x14,
	0x17, 0xb4, 0x21, 0xee, 0xdc, 0x41, 0x74, 0xa1, 0x89, 0x89, 0x69, 0x5c, 0xb9, 0xc1, 0xb6, 0x8c,
	0x30, 0xa1, 0x3d, 0x43, 0x3a, 0xd3, 0x0a, 0x6f, 0xe1, 0x63, 0xb1, 0x64, 0x69, 0x5c, 0x10, 0x03,
	0x6f, 0x60, 0x7c, 0x00, 0x33, 0x33, 0x84, 0x92, 0xb8, 0x62, 0xd5, 0x73, 0xfe, 0xf3, 0xf5, 0xff,
	0xd3, 0xd3, 0x83, 0xcc, 0x19, 0xa1, 0xe0, 0xc6, 0x04, 0xb8, 0x9b, 0x75, 0x5d, 0x9c, 0x61, 0xe0,
	0xce, 0x34, 0xa1, 0x9c, 0x1a, 0x15, 0x31, 0x71, 0xc4, 0xc4, 0xc9, 0xba, 0xa7, 0x27, 0x23, 0x3a,
	0xa2, 0x72, 0xe0, 0x8a, 0x4a, 0x31, 0xf6, 0x77, 0x01, 0xd5, 0xef, 0x09, 0xf0, 0x5b, 0x08, 0x31,
	0x70, 0x92, 0xe1, 0x47, 0x3a, 0xc1, 0xc0, 0x8c, 0x31, 0xaa, 0x04, 0x14, 0x86, 0x78, 0x38, 0x48,
	0x7c, 0x4e, 0xa8, 0xa9, 0x37, 0xf5, 0x76, 0xb9, 0x7f, 0xb3, 0x58, 0x35, 0xb4, 0x8f, 0x55, 0xe3,
	0x6c, 0x44, 0xf8, 0x38, 0x0d, 0x9c, 0x90, 0xc6, 0x6e, 0x48, 0x59, 0x4c, 0xd9, 0xf6, 0xd1, 0x61,
	0xc3, 0x89, 0xcb, 0xe7, 0x53, 0xcc, 0x9c, 0x6b, 0x1c, 0x7e, 0xad, 0x1a, 0xf5, 0xb9, 0x1f, 0x47,
	0x57, 0xf6, 0xbe, 0x97, 0xed, 0xfd, 0x57, 0xad, 0x27, 0x3a, 0xe3, 0x19, 0x95, 0x09, 0xbc, 0x44,
	0xa2, 0x06, 0xf3, 0x8f, 0x8c, 0xe9, 0x1f, 0x1c, 0x53, 0x53, 0x31, 0x3b, 0x23, 0xdb, 0xcb, 0x4d,
	0x8d, 0x57, 0x74, 0xec, 0x03, 0xa4, 0x7e, 0x34, 0x98, 0x26, 0x34, 0x23, 0x8c, 0x50, 0x60, 0x66,
	0x41, 0x26, 0xdd, 0x1d, 0x9c, 0x64, 0xaa, 0xa4, 0x5f, 0x86, 0xb6, 0x57, 0x53, 0xda, 0xc3, 0x4e,
	0x32, 0x5a, 0xa8, 0x0a, 0x18, 0x8b, 0x0f, 0xf7, 0x63, 0x9a, 0x02, 0x37, 0x8b, 0x4d, 0xbd, 0x5d,
	0xf4, 0x2a, 0x4a, 0xec, 0x49, 0xcd, 0xb8, 0x40, 0xb5, 0x90, 0x46, 0x11, 0x0e, 0x79, 0xce, 0xfd,
	0x95, 0xdc, 0xd1, 0x4e, 0xdf, 0xa2, 0x2d, 0x54, 0x15, 0x7f, 0x33, 0xe7, 0x4a, 0xca, 0x4f, 0x89,
	0x39, 0x14, 0xa4, 0x09, 0xe4, 0xd0, 0x3f, 0x05, 0x29, 0x51, 0x41, 0xfd, 0xde, 0x62, 0x6d, 0xe9,
	0xcb, 0xb5, 0xa5, 0x7f, 0xae, 0x2d, 0xfd, 0x6d, 0x63, 0x69, 0xcb, 0x8d, 0xa5, 0xbd, 0x6f, 0x2c,
	0xed, 0xe9, 0x7c, 0x6f, 0x13, 0xe2, 0x15, 0xde, 0x89, 0xfc, 0x80, 0xb9, 0xf2, 0xc8, 0x66, 0xea,
	0xcc, 0xe4, 0x3a, 0x82, 0x92, 0x3c, 0xa0, 0xcb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xb9,
	0xb8, 0x9d, 0x80, 0x02, 0x00, 0x00,
}

func (m *MintIncentiveTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintIncentiveTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintIncentiveTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BurnedAmount != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BurnedAmount))
		i--
		dAtA[i] = 0x38
	}
	if m.MintedAmount != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.MintedAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.CollectedAmount != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CollectedAmount))
		i--
		dAtA[i] = 0x28
	}
	if m.NeededAmount != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NeededAmount))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.AnnualProvisions.Size()
		i -= size
		if _, err := m.AnnualProvisions.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Inflation.Size()
		i -= size
		if _, err := m.Inflation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.BondedRatio.Size()
		i -= size
		if _, err := m.BondedRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MintIncentiveTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BondedRatio.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.Inflation.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.AnnualProvisions.Size()
	n += 1 + l + sovEvent(uint64(l))
	if m.NeededAmount != 0 {
		n += 1 + sovEvent(uint64(m.NeededAmount))
	}
	if m.CollectedAmount != 0 {
		n += 1 + sovEvent(uint64(m.CollectedAmount))
	}
	if m.MintedAmount != 0 {
		n += 1 + sovEvent(uint64(m.MintedAmount))
	}
	if m.BurnedAmount != 0 {
		n += 1 + sovEvent(uint64(m.BurnedAmount))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MintIncentiveTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintIncentiveTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintIncentiveTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondedRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inflation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Inflation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnualProvisions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AnnualProvisions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeededAmount", wireType)
			}
			m.NeededAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeededAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedAmount", wireType)
			}
			m.CollectedAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectedAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintedAmount", wireType)
			}
			m.MintedAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MintedAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnedAmount", wireType)
			}
			m.BurnedAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BurnedAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
