// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: feeabstraction/feeabs/v1beta1/osmosisibc.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/cometbft/cometbft/abci/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryArithmeticTwapToNowRequest
type QueryArithmeticTwapToNowRequest struct {
	PoolId     uint64    `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	BaseAsset  string    `protobuf:"bytes,2,opt,name=base_asset,json=baseAsset,proto3" json:"base_asset,omitempty"`
	QuoteAsset string    `protobuf:"bytes,3,opt,name=quote_asset,json=quoteAsset,proto3" json:"quote_asset,omitempty"`
	StartTime  time.Time `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
}

func (m *QueryArithmeticTwapToNowRequest) Reset()         { *m = QueryArithmeticTwapToNowRequest{} }
func (m *QueryArithmeticTwapToNowRequest) String() string { return proto.CompactTextString(m) }
func (*QueryArithmeticTwapToNowRequest) ProtoMessage()    {}
func (*QueryArithmeticTwapToNowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29d8511a7187d317, []int{0}
}
func (m *QueryArithmeticTwapToNowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryArithmeticTwapToNowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryArithmeticTwapToNowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryArithmeticTwapToNowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryArithmeticTwapToNowRequest.Merge(m, src)
}
func (m *QueryArithmeticTwapToNowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryArithmeticTwapToNowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryArithmeticTwapToNowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryArithmeticTwapToNowRequest proto.InternalMessageInfo

func (m *QueryArithmeticTwapToNowRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryArithmeticTwapToNowRequest) GetBaseAsset() string {
	if m != nil {
		return m.BaseAsset
	}
	return ""
}

func (m *QueryArithmeticTwapToNowRequest) GetQuoteAsset() string {
	if m != nil {
		return m.QuoteAsset
	}
	return ""
}

func (m *QueryArithmeticTwapToNowRequest) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

// QueryArithmeticTwapToNowResponse
type QueryArithmeticTwapToNowResponse struct {
	ArithmeticTwap cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=arithmetic_twap,json=arithmeticTwap,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"arithmetic_twap" yaml:"arithmetic_twap"`
}

func (m *QueryArithmeticTwapToNowResponse) Reset()         { *m = QueryArithmeticTwapToNowResponse{} }
func (m *QueryArithmeticTwapToNowResponse) String() string { return proto.CompactTextString(m) }
func (*QueryArithmeticTwapToNowResponse) ProtoMessage()    {}
func (*QueryArithmeticTwapToNowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29d8511a7187d317, []int{1}
}
func (m *QueryArithmeticTwapToNowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryArithmeticTwapToNowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryArithmeticTwapToNowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryArithmeticTwapToNowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryArithmeticTwapToNowResponse.Merge(m, src)
}
func (m *QueryArithmeticTwapToNowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryArithmeticTwapToNowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryArithmeticTwapToNowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryArithmeticTwapToNowResponse proto.InternalMessageInfo

// InterchainQueryRequest
type InterchainQueryRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *InterchainQueryRequest) Reset()         { *m = InterchainQueryRequest{} }
func (m *InterchainQueryRequest) String() string { return proto.CompactTextString(m) }
func (*InterchainQueryRequest) ProtoMessage()    {}
func (*InterchainQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29d8511a7187d317, []int{2}
}
func (m *InterchainQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainQueryRequest.Merge(m, src)
}
func (m *InterchainQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *InterchainQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainQueryRequest proto.InternalMessageInfo

func (m *InterchainQueryRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *InterchainQueryRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// InterchainQueryPacketData is comprised of raw query.
type InterchainQueryPacketData struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// optional memo
	Memo string `protobuf:"bytes,2,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *InterchainQueryPacketData) Reset()         { *m = InterchainQueryPacketData{} }
func (m *InterchainQueryPacketData) String() string { return proto.CompactTextString(m) }
func (*InterchainQueryPacketData) ProtoMessage()    {}
func (*InterchainQueryPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_29d8511a7187d317, []int{3}
}
func (m *InterchainQueryPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainQueryPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainQueryPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainQueryPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainQueryPacketData.Merge(m, src)
}
func (m *InterchainQueryPacketData) XXX_Size() int {
	return m.Size()
}
func (m *InterchainQueryPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainQueryPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainQueryPacketData proto.InternalMessageInfo

func (m *InterchainQueryPacketData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *InterchainQueryPacketData) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

// InterchainQueryPacketAck is comprised of an ABCI query response with
// non-deterministic fields left empty (e.g. Codespace, Log, Info and ...).
type InterchainQueryPacketAck struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *InterchainQueryPacketAck) Reset()         { *m = InterchainQueryPacketAck{} }
func (m *InterchainQueryPacketAck) String() string { return proto.CompactTextString(m) }
func (*InterchainQueryPacketAck) ProtoMessage()    {}
func (*InterchainQueryPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_29d8511a7187d317, []int{4}
}
func (m *InterchainQueryPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainQueryPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainQueryPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainQueryPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainQueryPacketAck.Merge(m, src)
}
func (m *InterchainQueryPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *InterchainQueryPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainQueryPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainQueryPacketAck proto.InternalMessageInfo

func (m *InterchainQueryPacketAck) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// InterchainQueryRequestPacket
type InterchainQueryRequestPacket struct {
	Requests []InterchainQueryRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests"`
}

func (m *InterchainQueryRequestPacket) Reset()         { *m = InterchainQueryRequestPacket{} }
func (m *InterchainQueryRequestPacket) String() string { return proto.CompactTextString(m) }
func (*InterchainQueryRequestPacket) ProtoMessage()    {}
func (*InterchainQueryRequestPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_29d8511a7187d317, []int{5}
}
func (m *InterchainQueryRequestPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainQueryRequestPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainQueryRequestPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainQueryRequestPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainQueryRequestPacket.Merge(m, src)
}
func (m *InterchainQueryRequestPacket) XXX_Size() int {
	return m.Size()
}
func (m *InterchainQueryRequestPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainQueryRequestPacket.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainQueryRequestPacket proto.InternalMessageInfo

func (m *InterchainQueryRequestPacket) GetRequests() []InterchainQueryRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

// CosmosQuery contains a list of tendermint ABCI query requests. It should be
// used when sending queries to an SDK host chain.
type CosmosQuery struct {
	Requests []types.RequestQuery `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests"`
}

func (m *CosmosQuery) Reset()         { *m = CosmosQuery{} }
func (m *CosmosQuery) String() string { return proto.CompactTextString(m) }
func (*CosmosQuery) ProtoMessage()    {}
func (*CosmosQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_29d8511a7187d317, []int{6}
}
func (m *CosmosQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CosmosQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CosmosQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CosmosQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CosmosQuery.Merge(m, src)
}
func (m *CosmosQuery) XXX_Size() int {
	return m.Size()
}
func (m *CosmosQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_CosmosQuery.DiscardUnknown(m)
}

var xxx_messageInfo_CosmosQuery proto.InternalMessageInfo

func (m *CosmosQuery) GetRequests() []types.RequestQuery {
	if m != nil {
		return m.Requests
	}
	return nil
}

// CosmosResponse contains a list of tendermint ABCI query responses. It should
// be used when receiving responses from an SDK host chain.
type CosmosResponse struct {
	Responses []types.ResponseQuery `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses"`
}

func (m *CosmosResponse) Reset()         { *m = CosmosResponse{} }
func (m *CosmosResponse) String() string { return proto.CompactTextString(m) }
func (*CosmosResponse) ProtoMessage()    {}
func (*CosmosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_29d8511a7187d317, []int{7}
}
func (m *CosmosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CosmosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CosmosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CosmosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CosmosResponse.Merge(m, src)
}
func (m *CosmosResponse) XXX_Size() int {
	return m.Size()
}
func (m *CosmosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CosmosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CosmosResponse proto.InternalMessageInfo

func (m *CosmosResponse) GetResponses() []types.ResponseQuery {
	if m != nil {
		return m.Responses
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryArithmeticTwapToNowRequest)(nil), "feeabstraction.feeabs.v1beta1.QueryArithmeticTwapToNowRequest")
	proto.RegisterType((*QueryArithmeticTwapToNowResponse)(nil), "feeabstraction.feeabs.v1beta1.QueryArithmeticTwapToNowResponse")
	proto.RegisterType((*InterchainQueryRequest)(nil), "feeabstraction.feeabs.v1beta1.InterchainQueryRequest")
	proto.RegisterType((*InterchainQueryPacketData)(nil), "feeabstraction.feeabs.v1beta1.InterchainQueryPacketData")
	proto.RegisterType((*InterchainQueryPacketAck)(nil), "feeabstraction.feeabs.v1beta1.InterchainQueryPacketAck")
	proto.RegisterType((*InterchainQueryRequestPacket)(nil), "feeabstraction.feeabs.v1beta1.InterchainQueryRequestPacket")
	proto.RegisterType((*CosmosQuery)(nil), "feeabstraction.feeabs.v1beta1.CosmosQuery")
	proto.RegisterType((*CosmosResponse)(nil), "feeabstraction.feeabs.v1beta1.CosmosResponse")
}

func init() {
	proto.RegisterFile("feeabstraction/feeabs/v1beta1/osmosisibc.proto", fileDescriptor_29d8511a7187d317)
}

var fileDescriptor_29d8511a7187d317 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x69, 0x54, 0xc8, 0x06, 0x15, 0x61, 0xa1, 0x12, 0x52, 0x62, 0x47, 0x3e, 0xe5, 0xd2,
	0xb5, 0x5a, 0x84, 0x04, 0x48, 0x08, 0x92, 0xf6, 0x52, 0x09, 0x55, 0x60, 0x22, 0x81, 0xb8, 0x44,
	0xeb, 0xcd, 0xc6, 0x59, 0x25, 0xf6, 0xba, 0xde, 0x49, 0x43, 0x5e, 0x81, 0x53, 0x1f, 0xab, 0xc7,
	0x1e, 0x38, 0x20, 0x0e, 0x01, 0x25, 0x6f, 0xd0, 0x27, 0x40, 0xbb, 0xb6, 0x93, 0xfe, 0x98, 0xde,
	0x66, 0x67, 0xbe, 0xef, 0x9b, 0x9f, 0x9d, 0x5d, 0x84, 0x07, 0x8c, 0x11, 0x5f, 0x42, 0x42, 0x28,
	0x70, 0x11, 0xb9, 0xe9, 0xd1, 0x3d, 0xdd, 0xf3, 0x19, 0x90, 0x3d, 0x57, 0xc8, 0x50, 0x48, 0x2e,
	0xb9, 0x4f, 0x71, 0x9c, 0x08, 0x10, 0x66, 0xe3, 0x3a, 0x3e, 0xa3, 0xe3, 0x0c, 0x5f, 0x7f, 0x12,
	0x88, 0x40, 0x68, 0xa4, 0xab, 0xac, 0x94, 0x54, 0xb7, 0x03, 0x21, 0x82, 0x31, 0x73, 0xf5, 0xc9,
	0x9f, 0x0c, 0x5c, 0xe0, 0x21, 0x93, 0x40, 0xc2, 0x38, 0x03, 0xec, 0x00, 0x8b, 0xfa, 0x2c, 0x09,
	0x79, 0x04, 0x2e, 0xf1, 0x29, 0x77, 0x61, 0x16, 0x33, 0x99, 0x06, 0x9d, 0x9f, 0x06, 0xb2, 0x3f,
	0x4d, 0x58, 0x32, 0x6b, 0x27, 0x1c, 0x86, 0x21, 0x03, 0x4e, 0xbb, 0x53, 0x12, 0x77, 0xc5, 0xb1,
	0x98, 0x7a, 0xec, 0x64, 0xc2, 0x24, 0x98, 0x4f, 0xd1, 0xfd, 0x58, 0x88, 0x71, 0x8f, 0xf7, 0x6b,
	0x46, 0xd3, 0x68, 0x95, 0xbd, 0x4d, 0x75, 0x3c, 0xea, 0x9b, 0x0d, 0x84, 0x7c, 0x22, 0x59, 0x8f,
	0x48, 0xc9, 0xa0, 0x76, 0xaf, 0x69, 0xb4, 0x2a, 0x5e, 0x45, 0x79, 0xda, 0xca, 0x61, 0xda, 0xa8,
	0x7a, 0x32, 0x11, 0x90, 0xc7, 0x37, 0x74, 0x1c, 0x69, 0x57, 0x0a, 0xf8, 0x8a, 0x90, 0x04, 0x92,
	0x40, 0x4f, 0x95, 0x5c, 0x2b, 0x37, 0x8d, 0x56, 0x75, 0xbf, 0x8e, 0xd3, 0x7e, 0x70, 0xde, 0x0f,
	0xee, 0xe6, 0xfd, 0x74, 0x1a, 0xe7, 0x73, 0xbb, 0x74, 0x39, 0xb7, 0x1f, 0xcf, 0x48, 0x38, 0x7e,
	0xe3, 0xac, 0xb9, 0xce, 0xd9, 0x1f, 0xdb, 0xf0, 0x2a, 0xda, 0xa1, 0xe0, 0xce, 0x0f, 0x03, 0x35,
	0xff, 0xdf, 0x96, 0x8c, 0x45, 0x24, 0x99, 0x39, 0x40, 0x8f, 0xc8, 0x2a, 0xdc, 0x83, 0x29, 0x89,
	0x75, 0x7f, 0x95, 0xce, 0x5b, 0x95, 0xe7, 0xf7, 0xdc, 0xde, 0xa1, 0xfa, 0x8a, 0x64, 0x7f, 0x84,
	0xb9, 0x70, 0x43, 0x02, 0x43, 0xfc, 0x81, 0x05, 0x84, 0xce, 0x0e, 0x19, 0xbd, 0x9c, 0xdb, 0xdb,
	0x69, 0x19, 0x37, 0x34, 0x1c, 0x6f, 0x8b, 0x5c, 0x4b, 0xea, 0xbc, 0x47, 0xdb, 0x47, 0x11, 0xb0,
	0x84, 0x0e, 0x09, 0x8f, 0x74, 0x55, 0xf9, 0x64, 0x4d, 0x54, 0xee, 0x13, 0x20, 0x3a, 0xed, 0x43,
	0x4f, 0xdb, 0xca, 0x17, 0x13, 0x18, 0x66, 0xe3, 0xd4, 0xb6, 0x73, 0x80, 0x9e, 0xdd, 0x50, 0xf8,
	0x48, 0xe8, 0x88, 0xc1, 0x61, 0x46, 0x28, 0x12, 0x09, 0x59, 0x28, 0x72, 0x11, 0x65, 0x3b, 0x18,
	0xd5, 0x0a, 0x45, 0xda, 0x74, 0x54, 0xa4, 0xe1, 0x4c, 0xd1, 0xf3, 0xe2, 0xb2, 0x53, 0x9a, 0xf9,
	0x05, 0x3d, 0x48, 0x52, 0x87, 0xac, 0x19, 0xcd, 0x8d, 0x56, 0x75, 0xff, 0x25, 0xbe, 0x73, 0x81,
	0x71, 0xb1, 0x5c, 0xa7, 0xac, 0xc6, 0xed, 0xad, 0xc4, 0x9c, 0x63, 0x54, 0x3d, 0xd0, 0x83, 0xd7,
	0x28, 0xf3, 0xdd, 0xad, 0x3c, 0x0d, 0xbc, 0x5e, 0x69, 0xac, 0x56, 0x1a, 0x67, 0x52, 0x9a, 0x70,
	0x4b, 0xaf, 0x8b, 0xb6, 0x52, 0xbd, 0xd5, 0xcd, 0x77, 0x50, 0x25, 0xc9, 0xec, 0x5c, 0xd3, 0x2a,
	0xd0, 0x4c, 0x11, 0x57, 0x45, 0xd7, 0xb4, 0xce, 0xe7, 0xf3, 0x85, 0x65, 0x5c, 0x2c, 0x2c, 0xe3,
	0xef, 0xc2, 0x32, 0xce, 0x96, 0x56, 0xe9, 0x62, 0x69, 0x95, 0x7e, 0x2d, 0xad, 0xd2, 0xb7, 0xd7,
	0x01, 0x87, 0xe1, 0xc4, 0xc7, 0x54, 0x84, 0xf9, 0x1b, 0xdf, 0x1d, 0xab, 0x87, 0x3f, 0x60, 0x6c,
	0xf7, 0xea, 0x7f, 0x70, 0xfa, 0xca, 0xfd, 0x9e, 0x7f, 0x0a, 0xfa, 0x51, 0xfa, 0x9b, 0x7a, 0xeb,
	0x5f, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x6b, 0xc1, 0x75, 0x1f, 0x3a, 0x04, 0x00, 0x00,
}

func (m *QueryArithmeticTwapToNowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryArithmeticTwapToNowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryArithmeticTwapToNowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintOsmosisibc(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if len(m.QuoteAsset) > 0 {
		i -= len(m.QuoteAsset)
		copy(dAtA[i:], m.QuoteAsset)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.QuoteAsset)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseAsset) > 0 {
		i -= len(m.BaseAsset)
		copy(dAtA[i:], m.BaseAsset)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.BaseAsset)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintOsmosisibc(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryArithmeticTwapToNowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryArithmeticTwapToNowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryArithmeticTwapToNowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ArithmeticTwap.Size()
		i -= size
		if _, err := m.ArithmeticTwap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOsmosisibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *InterchainQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InterchainQueryPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainQueryPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainQueryPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InterchainQueryPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainQueryPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainQueryPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintOsmosisibc(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InterchainQueryRequestPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainQueryRequestPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainQueryRequestPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOsmosisibc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CosmosQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosmosQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CosmosQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOsmosisibc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CosmosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosmosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CosmosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for iNdEx := len(m.Responses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Responses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOsmosisibc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintOsmosisibc(dAtA []byte, offset int, v uint64) int {
	offset -= sovOsmosisibc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryArithmeticTwapToNowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovOsmosisibc(uint64(m.PoolId))
	}
	l = len(m.BaseAsset)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	l = len(m.QuoteAsset)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovOsmosisibc(uint64(l))
	return n
}

func (m *QueryArithmeticTwapToNowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ArithmeticTwap.Size()
	n += 1 + l + sovOsmosisibc(uint64(l))
	return n
}

func (m *InterchainQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	return n
}

func (m *InterchainQueryPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	return n
}

func (m *InterchainQueryPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovOsmosisibc(uint64(l))
	}
	return n
}

func (m *InterchainQueryRequestPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovOsmosisibc(uint64(l))
		}
	}
	return n
}

func (m *CosmosQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovOsmosisibc(uint64(l))
		}
	}
	return n
}

func (m *CosmosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovOsmosisibc(uint64(l))
		}
	}
	return n
}

func sovOsmosisibc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOsmosisibc(x uint64) (n int) {
	return sovOsmosisibc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryArithmeticTwapToNowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosisibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryArithmeticTwapToNowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryArithmeticTwapToNowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosisibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryArithmeticTwapToNowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosisibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryArithmeticTwapToNowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryArithmeticTwapToNowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArithmeticTwap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ArithmeticTwap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosisibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterchainQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosisibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosisibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterchainQueryPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosisibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainQueryPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainQueryPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosisibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterchainQueryPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosisibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainQueryPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainQueryPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosisibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterchainQueryRequestPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosisibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainQueryRequestPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainQueryRequestPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, InterchainQueryRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosisibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CosmosQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosisibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CosmosQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CosmosQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, types.RequestQuery{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosisibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CosmosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOsmosisibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CosmosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CosmosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, types.ResponseQuery{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOsmosisibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOsmosisibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOsmosisibc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOsmosisibc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOsmosisibc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOsmosisibc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOsmosisibc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOsmosisibc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOsmosisibc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOsmosisibc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOsmosisibc = fmt.Errorf("proto: unexpected end of group")
)
