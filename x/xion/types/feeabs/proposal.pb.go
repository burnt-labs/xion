// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: feeabstraction/feeabs/v1beta1/proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// HostChainFeeAbsStatus
type HostChainFeeAbsStatus int32

const (
	HostChainFeeAbsStatus_UPDATED  HostChainFeeAbsStatus = 0
	HostChainFeeAbsStatus_OUTDATED HostChainFeeAbsStatus = 1
	HostChainFeeAbsStatus_FROZEN   HostChainFeeAbsStatus = 2
)

var HostChainFeeAbsStatus_name = map[int32]string{
	0: "UPDATED",
	1: "OUTDATED",
	2: "FROZEN",
}

var HostChainFeeAbsStatus_value = map[string]int32{
	"UPDATED":  0,
	"OUTDATED": 1,
	"FROZEN":   2,
}

func (x HostChainFeeAbsStatus) String() string {
	return proto.EnumName(HostChainFeeAbsStatus_name, int32(x))
}

func (HostChainFeeAbsStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c397b73ee3101036, []int{0}
}

// HostChainFeeAbsConfig
type HostChainFeeAbsConfig struct {
	// ibc token is allowed to be used as fee token
	IbcDenom string `protobuf:"bytes,1,opt,name=ibc_denom,json=ibcDenom,proto3" json:"ibc_denom,omitempty" yaml:"allowed_token"`
	// token_in in cross_chain swap contract.
	OsmosisPoolTokenDenomIn string `protobuf:"bytes,2,opt,name=osmosis_pool_token_denom_in,json=osmosisPoolTokenDenomIn,proto3" json:"osmosis_pool_token_denom_in,omitempty"`
	// pool id
	PoolId uint64 `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Host chain fee abstraction connection status
	Status HostChainFeeAbsStatus `protobuf:"varint,4,opt,name=status,proto3,enum=feeabstraction.feeabs.v1beta1.HostChainFeeAbsStatus" json:"status,omitempty"`
}

func (m *HostChainFeeAbsConfig) Reset()         { *m = HostChainFeeAbsConfig{} }
func (m *HostChainFeeAbsConfig) String() string { return proto.CompactTextString(m) }
func (*HostChainFeeAbsConfig) ProtoMessage()    {}
func (*HostChainFeeAbsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_c397b73ee3101036, []int{0}
}
func (m *HostChainFeeAbsConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostChainFeeAbsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostChainFeeAbsConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostChainFeeAbsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostChainFeeAbsConfig.Merge(m, src)
}
func (m *HostChainFeeAbsConfig) XXX_Size() int {
	return m.Size()
}
func (m *HostChainFeeAbsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HostChainFeeAbsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HostChainFeeAbsConfig proto.InternalMessageInfo

func (m *HostChainFeeAbsConfig) GetIbcDenom() string {
	if m != nil {
		return m.IbcDenom
	}
	return ""
}

func (m *HostChainFeeAbsConfig) GetOsmosisPoolTokenDenomIn() string {
	if m != nil {
		return m.OsmosisPoolTokenDenomIn
	}
	return ""
}

func (m *HostChainFeeAbsConfig) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *HostChainFeeAbsConfig) GetStatus() HostChainFeeAbsStatus {
	if m != nil {
		return m.Status
	}
	return HostChainFeeAbsStatus_UPDATED
}

// AddHostZoneProposal
type AddHostZoneProposal struct {
	// the title of the proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the host chain config
	HostChainConfig *HostChainFeeAbsConfig `protobuf:"bytes,3,opt,name=host_chain_config,json=hostChainConfig,proto3" json:"host_chain_config,omitempty"`
}

func (m *AddHostZoneProposal) Reset()         { *m = AddHostZoneProposal{} }
func (m *AddHostZoneProposal) String() string { return proto.CompactTextString(m) }
func (*AddHostZoneProposal) ProtoMessage()    {}
func (*AddHostZoneProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_c397b73ee3101036, []int{1}
}
func (m *AddHostZoneProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddHostZoneProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddHostZoneProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddHostZoneProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddHostZoneProposal.Merge(m, src)
}
func (m *AddHostZoneProposal) XXX_Size() int {
	return m.Size()
}
func (m *AddHostZoneProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_AddHostZoneProposal.DiscardUnknown(m)
}

var xxx_messageInfo_AddHostZoneProposal proto.InternalMessageInfo

// DeleteHostZoneProposal
type DeleteHostZoneProposal struct {
	// the title of the proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the  ibc denom of this token
	IbcDenom string `protobuf:"bytes,3,opt,name=ibc_denom,json=ibcDenom,proto3" json:"ibc_denom,omitempty"`
}

func (m *DeleteHostZoneProposal) Reset()         { *m = DeleteHostZoneProposal{} }
func (m *DeleteHostZoneProposal) String() string { return proto.CompactTextString(m) }
func (*DeleteHostZoneProposal) ProtoMessage()    {}
func (*DeleteHostZoneProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_c397b73ee3101036, []int{2}
}
func (m *DeleteHostZoneProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteHostZoneProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteHostZoneProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteHostZoneProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteHostZoneProposal.Merge(m, src)
}
func (m *DeleteHostZoneProposal) XXX_Size() int {
	return m.Size()
}
func (m *DeleteHostZoneProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteHostZoneProposal.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteHostZoneProposal proto.InternalMessageInfo

// SetHostZoneProposal
type SetHostZoneProposal struct {
	// the title of the proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the host chain config
	HostChainConfig *HostChainFeeAbsConfig `protobuf:"bytes,3,opt,name=host_chain_config,json=hostChainConfig,proto3" json:"host_chain_config,omitempty"`
}

func (m *SetHostZoneProposal) Reset()         { *m = SetHostZoneProposal{} }
func (m *SetHostZoneProposal) String() string { return proto.CompactTextString(m) }
func (*SetHostZoneProposal) ProtoMessage()    {}
func (*SetHostZoneProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_c397b73ee3101036, []int{3}
}
func (m *SetHostZoneProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetHostZoneProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetHostZoneProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetHostZoneProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetHostZoneProposal.Merge(m, src)
}
func (m *SetHostZoneProposal) XXX_Size() int {
	return m.Size()
}
func (m *SetHostZoneProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_SetHostZoneProposal.DiscardUnknown(m)
}

var xxx_messageInfo_SetHostZoneProposal proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("feeabstraction.feeabs.v1beta1.HostChainFeeAbsStatus", HostChainFeeAbsStatus_name, HostChainFeeAbsStatus_value)
	proto.RegisterType((*HostChainFeeAbsConfig)(nil), "feeabstraction.feeabs.v1beta1.HostChainFeeAbsConfig")
	proto.RegisterType((*AddHostZoneProposal)(nil), "feeabstraction.feeabs.v1beta1.AddHostZoneProposal")
	proto.RegisterType((*DeleteHostZoneProposal)(nil), "feeabstraction.feeabs.v1beta1.DeleteHostZoneProposal")
	proto.RegisterType((*SetHostZoneProposal)(nil), "feeabstraction.feeabs.v1beta1.SetHostZoneProposal")
}

func init() {
	proto.RegisterFile("feeabstraction/feeabs/v1beta1/proposal.proto", fileDescriptor_c397b73ee3101036)
}

var fileDescriptor_c397b73ee3101036 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xf6, 0xb6, 0x21, 0x6d, 0x37, 0x08, 0xca, 0x12, 0xa8, 0x45, 0x85, 0x1b, 0xf9, 0x14, 0x21,
	0x6a, 0xab, 0xfc, 0x48, 0x50, 0x21, 0xa4, 0xb4, 0x69, 0x45, 0x25, 0x44, 0x23, 0x27, 0xbd, 0xe4,
	0x62, 0xfc, 0x33, 0x49, 0x56, 0x6c, 0x3c, 0x56, 0x76, 0x5b, 0xe8, 0x1b, 0x70, 0xe4, 0x11, 0x78,
	0x09, 0xde, 0x81, 0x63, 0x8f, 0x9c, 0x10, 0x4a, 0xde, 0x00, 0x5e, 0x00, 0xad, 0xd7, 0x41, 0x01,
	0x24, 0x24, 0x24, 0x2e, 0xdc, 0xfc, 0x8d, 0xbf, 0x99, 0xd9, 0xef, 0x9b, 0x19, 0x7a, 0x77, 0x00,
	0x10, 0xc5, 0x52, 0x4d, 0xa2, 0x44, 0x71, 0xcc, 0x7c, 0x03, 0xfd, 0xb3, 0x9d, 0x18, 0x54, 0xb4,
	0xe3, 0xe7, 0x13, 0xcc, 0x51, 0x46, 0xc2, 0xcb, 0x27, 0xa8, 0x90, 0xdd, 0xfe, 0x99, 0xed, 0x19,
	0xe8, 0x95, 0xec, 0x5b, 0xf5, 0x21, 0x0e, 0xb1, 0x60, 0xfa, 0xfa, 0xcb, 0x24, 0xb9, 0xdf, 0x08,
	0xbd, 0xf1, 0x0c, 0xa5, 0xda, 0x1f, 0x45, 0x3c, 0x3b, 0x04, 0x68, 0xc5, 0x72, 0x1f, 0xb3, 0x01,
	0x1f, 0xb2, 0x87, 0x74, 0x8d, 0xc7, 0x49, 0x98, 0x42, 0x86, 0x63, 0x9b, 0x34, 0x48, 0x73, 0x6d,
	0xcf, 0xfe, 0xfa, 0x79, 0xab, 0x7e, 0x1e, 0x8d, 0xc5, 0xae, 0x1b, 0x09, 0x81, 0xaf, 0x21, 0x0d,
	0x15, 0xbe, 0x82, 0xcc, 0x0d, 0x56, 0x79, 0x9c, 0xb4, 0x35, 0x93, 0x3d, 0xa1, 0x9b, 0x28, 0xc7,
	0x28, 0xb9, 0x0c, 0x73, 0x44, 0x61, 0x08, 0xa6, 0x4a, 0xc8, 0x33, 0x7b, 0x49, 0x17, 0x0a, 0x36,
	0x4a, 0x4a, 0x07, 0x51, 0xf4, 0x34, 0xa1, 0xc8, 0x3d, 0xca, 0xd8, 0x06, 0x5d, 0x29, 0xb2, 0x78,
	0x6a, 0x2f, 0x37, 0x48, 0xb3, 0x12, 0x54, 0x35, 0x3c, 0x4a, 0xd9, 0x73, 0x5a, 0x95, 0x2a, 0x52,
	0xa7, 0xd2, 0xae, 0x34, 0x48, 0xf3, 0xca, 0xbd, 0x07, 0xde, 0x1f, 0xd5, 0x7a, 0xbf, 0x68, 0xea,
	0x16, 0xb9, 0x41, 0x59, 0xc3, 0xfd, 0x40, 0xe8, 0xf5, 0x56, 0x9a, 0x6a, 0x52, 0x1f, 0x33, 0xe8,
	0x94, 0x46, 0xb2, 0x3a, 0xbd, 0xa4, 0xb8, 0x12, 0x60, 0xf4, 0x06, 0x06, 0xb0, 0x06, 0xad, 0xa5,
	0x20, 0x93, 0x09, 0xcf, 0x75, 0xa7, 0x52, 0xc2, 0x62, 0x88, 0xbd, 0xa4, 0xd7, 0x46, 0x28, 0x55,
	0x98, 0xe8, 0x8e, 0x61, 0x52, 0x18, 0x58, 0x08, 0xa8, 0xfd, 0xed, 0x43, 0x8d, 0xf9, 0xc1, 0xd5,
	0xd1, 0x3c, 0x6c, 0x02, 0xbb, 0x95, 0xb7, 0xef, 0xb7, 0x2c, 0x57, 0xd2, 0x9b, 0x6d, 0x10, 0xa0,
	0xe0, 0x9f, 0xbd, 0x7c, 0x73, 0x71, 0xca, 0xcb, 0xc5, 0xff, 0x1f, 0xb3, 0x2c, 0x9b, 0x6a, 0xb3,
	0xba, 0xa0, 0xfe, 0x37, 0xb3, 0xee, 0x3c, 0xfd, 0x6d, 0xb3, 0xcd, 0x16, 0xb0, 0x1a, 0x5d, 0x39,
	0xe9, 0xb4, 0x5b, 0xbd, 0x83, 0xf6, 0xba, 0xc5, 0x2e, 0xd3, 0xd5, 0xe3, 0x93, 0x9e, 0x41, 0x84,
	0x51, 0x5a, 0x3d, 0x0c, 0x8e, 0xfb, 0x07, 0x2f, 0xd6, 0x97, 0xf6, 0xba, 0x1f, 0xa7, 0x0e, 0xb9,
	0x98, 0x3a, 0xe4, 0xcb, 0xd4, 0x21, 0xef, 0x66, 0x8e, 0x75, 0x31, 0x73, 0xac, 0x4f, 0x33, 0xc7,
	0xea, 0x3f, 0x1e, 0x72, 0x35, 0x3a, 0x8d, 0xbd, 0x04, 0xc7, 0x7e, 0xb9, 0xc9, 0xdb, 0x42, 0x5f,
	0xe6, 0x00, 0x60, 0x7b, 0xf1, 0x60, 0xcf, 0x1e, 0xf9, 0x6f, 0xe6, 0x57, 0xab, 0xce, 0x73, 0x90,
	0x71, 0xb5, 0x38, 0xbb, 0xfb, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x42, 0xf0, 0x3b, 0x14, 0xdb,
	0x03, 0x00, 0x00,
}

func (m *HostChainFeeAbsConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostChainFeeAbsConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostChainFeeAbsConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.PoolId != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OsmosisPoolTokenDenomIn) > 0 {
		i -= len(m.OsmosisPoolTokenDenomIn)
		copy(dAtA[i:], m.OsmosisPoolTokenDenomIn)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.OsmosisPoolTokenDenomIn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IbcDenom) > 0 {
		i -= len(m.IbcDenom)
		copy(dAtA[i:], m.IbcDenom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.IbcDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddHostZoneProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddHostZoneProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddHostZoneProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HostChainConfig != nil {
		{
			size, err := m.HostChainConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteHostZoneProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteHostZoneProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteHostZoneProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IbcDenom) > 0 {
		i -= len(m.IbcDenom)
		copy(dAtA[i:], m.IbcDenom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.IbcDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetHostZoneProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetHostZoneProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetHostZoneProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HostChainConfig != nil {
		{
			size, err := m.HostChainConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HostChainFeeAbsConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IbcDenom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.OsmosisPoolTokenDenomIn)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovProposal(uint64(m.PoolId))
	}
	if m.Status != 0 {
		n += 1 + sovProposal(uint64(m.Status))
	}
	return n
}

func (m *AddHostZoneProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.HostChainConfig != nil {
		l = m.HostChainConfig.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *DeleteHostZoneProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.IbcDenom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *SetHostZoneProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.HostChainConfig != nil {
		l = m.HostChainConfig.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HostChainFeeAbsConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostChainFeeAbsConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostChainFeeAbsConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmosisPoolTokenDenomIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsmosisPoolTokenDenomIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= HostChainFeeAbsStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddHostZoneProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddHostZoneProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddHostZoneProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostChainConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostChainConfig == nil {
				m.HostChainConfig = &HostChainFeeAbsConfig{}
			}
			if err := m.HostChainConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteHostZoneProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteHostZoneProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteHostZoneProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetHostZoneProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetHostZoneProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetHostZoneProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostChainConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostChainConfig == nil {
				m.HostChainConfig = &HostChainFeeAbsConfig{}
			}
			if err := m.HostChainConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
